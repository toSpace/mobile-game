#include <hxcpp.h>

#ifndef INCLUDED_Hash
#include <Hash.h>
#endif
#ifndef INCLUDED_hxMath
#include <hxMath.h>
#endif
#ifndef INCLUDED_PhysicsData
#include <PhysicsData.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_nape_callbacks_CbType
#include <nape/callbacks/CbType.h>
#endif
#ifndef INCLUDED_nape_callbacks_CbTypeList
#include <nape/callbacks/CbTypeList.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_geom_Vec3
#include <nape/geom/Vec3.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_BodyType
#include <nape/phys/BodyType.h>
#endif
#ifndef INCLUDED_nape_phys_FluidProperties
#include <nape/phys/FluidProperties.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_phys_Material
#include <nape/phys/Material.h>
#endif
#ifndef INCLUDED_nape_shape_Circle
#include <nape/shape/Circle.h>
#endif
#ifndef INCLUDED_nape_shape_Polygon
#include <nape/shape/Polygon.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_native_display_DisplayObject
#include <native/display/DisplayObject.h>
#endif
#ifndef INCLUDED_native_display_IBitmapDrawable
#include <native/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_native_events_EventDispatcher
#include <native/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_native_events_IEventDispatcher
#include <native/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_native_geom_Rectangle
#include <native/geom/Rectangle.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec3
#include <zpp_nape/geom/ZPP_Vec3.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_FluidProperties
#include <zpp_nape/phys/ZPP_FluidProperties.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_CbTypeList
#include <zpp_nape/util/ZPP_CbTypeList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeList
#include <zpp_nape/util/ZPP_ShapeList.h>
#endif

Void PhysicsData_obj::__construct()
{
	return null();
}

PhysicsData_obj::~PhysicsData_obj() { }

Dynamic PhysicsData_obj::__CreateEmpty() { return  new PhysicsData_obj; }
hx::ObjectPtr< PhysicsData_obj > PhysicsData_obj::__new()
{  hx::ObjectPtr< PhysicsData_obj > result = new PhysicsData_obj();
	result->__construct();
	return result;}

Dynamic PhysicsData_obj::__Create(hx::DynamicArray inArgs)
{  hx::ObjectPtr< PhysicsData_obj > result = new PhysicsData_obj();
	result->__construct();
	return result;}

::nape::geom::Vec3 PhysicsData_obj::graphicsPosition( ::nape::phys::Body body){
	HX_STACK_PUSH("PhysicsData::graphicsPosition","PhysicsData.hx",49);
	HX_STACK_ARG(body,"body");
	struct _Function_1_1{
		inline static Dynamic Block( ::nape::phys::Body &body){
			HX_STACK_PUSH("*::closure","PhysicsData.hx",50);
			{
				HX_STACK_LINE(50)
				if (((body->zpp_inner_i->userData == null()))){
					struct _Function_3_1{
						inline static Dynamic Block( ){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",50);
							{
								hx::Anon __result = hx::Anon_obj::Create();
								return __result;
							}
							return null();
						}
					};
					HX_STACK_LINE(50)
					body->zpp_inner_i->userData = _Function_3_1::Block();
				}
				HX_STACK_LINE(50)
				return body->zpp_inner_i->userData;
			}
			return null();
		}
	};
	HX_STACK_LINE(50)
	::nape::geom::Vec2 pos = body->localPointToWorld((_Function_1_1::Block(body))->__Field(HX_CSTRING("graphicOffset"),true),null());		HX_STACK_VAR(pos,"pos");
	struct _Function_1_2{
		inline static Float Block( ::nape::geom::Vec2 &pos){
			HX_STACK_PUSH("*::closure","PhysicsData.hx",51);
			{
				HX_STACK_LINE(51)
				if (((bool((pos != null())) && bool(pos->zpp_disp)))){
					HX_STACK_LINE(51)
					hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
				}
				HX_STACK_LINE(51)
				{
					HX_STACK_LINE(51)
					::zpp_nape::geom::ZPP_Vec2 _this = pos->zpp_inner;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(51)
					if (((_this->_validate_dyn() != null()))){
						HX_STACK_LINE(51)
						_this->_validate();
					}
				}
				HX_STACK_LINE(51)
				return pos->zpp_inner->x;
			}
			return null();
		}
	};
	struct _Function_1_3{
		inline static Float Block( ::nape::geom::Vec2 &pos){
			HX_STACK_PUSH("*::closure","PhysicsData.hx",51);
			{
				HX_STACK_LINE(51)
				if (((bool((pos != null())) && bool(pos->zpp_disp)))){
					HX_STACK_LINE(51)
					hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
				}
				HX_STACK_LINE(51)
				{
					HX_STACK_LINE(51)
					::zpp_nape::geom::ZPP_Vec2 _this = pos->zpp_inner;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(51)
					if (((_this->_validate_dyn() != null()))){
						HX_STACK_LINE(51)
						_this->_validate();
					}
				}
				HX_STACK_LINE(51)
				return pos->zpp_inner->y;
			}
			return null();
		}
	};
	HX_STACK_LINE(51)
	::nape::geom::Vec3 ret = ::nape::geom::Vec3_obj::get(_Function_1_2::Block(pos),_Function_1_3::Block(pos),hx::Mod((Float((body->zpp_inner->rot * (int)180)) / Float(::Math_obj::PI)),(int)360));		HX_STACK_VAR(ret,"ret");
	HX_STACK_LINE(52)
	{
		HX_STACK_LINE(52)
		if (((bool((pos != null())) && bool(pos->zpp_disp)))){
			HX_STACK_LINE(52)
			hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
		}
		HX_STACK_LINE(52)
		{
			HX_STACK_LINE(52)
			::zpp_nape::geom::ZPP_Vec2 _this = pos->zpp_inner;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(52)
			if ((_this->_immutable)){
				HX_STACK_LINE(52)
				hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
			}
			HX_STACK_LINE(52)
			if (((_this->_isimmutable_dyn() != null()))){
				HX_STACK_LINE(52)
				_this->_isimmutable();
			}
		}
		HX_STACK_LINE(52)
		if ((pos->zpp_inner->_inuse)){
			HX_STACK_LINE(52)
			hx::Throw (HX_CSTRING("Error: This Vec2 is not disposable"));
		}
		HX_STACK_LINE(52)
		::zpp_nape::geom::ZPP_Vec2 inner = pos->zpp_inner;		HX_STACK_VAR(inner,"inner");
		HX_STACK_LINE(52)
		pos->zpp_inner->outer = null();
		HX_STACK_LINE(52)
		pos->zpp_inner = null();
		HX_STACK_LINE(52)
		{
			HX_STACK_LINE(52)
			::nape::geom::Vec2 o = pos;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(52)
			{
			}
			HX_STACK_LINE(52)
			o->zpp_pool = null();
			HX_STACK_LINE(52)
			if (((::zpp_nape::util::ZPP_PubPool_obj::nextVec2 != null()))){
				HX_STACK_LINE(52)
				::zpp_nape::util::ZPP_PubPool_obj::nextVec2->zpp_pool = o;
			}
			else{
				HX_STACK_LINE(52)
				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = o;
			}
			HX_STACK_LINE(52)
			::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = o;
			HX_STACK_LINE(52)
			o->zpp_disp = true;
		}
		HX_STACK_LINE(52)
		{
			HX_STACK_LINE(52)
			::zpp_nape::geom::ZPP_Vec2 o = inner;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(52)
			{
			}
			HX_STACK_LINE(52)
			{
				HX_STACK_LINE(52)
				if (((o->outer != null()))){
					HX_STACK_LINE(52)
					o->outer->zpp_inner = null();
					HX_STACK_LINE(52)
					o->outer = null();
				}
				HX_STACK_LINE(52)
				o->_isimmutable = null();
				HX_STACK_LINE(52)
				o->_validate = null();
				HX_STACK_LINE(52)
				o->_invalidate = null();
			}
			HX_STACK_LINE(52)
			o->next = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
			HX_STACK_LINE(52)
			::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = o;
		}
	}
	HX_STACK_LINE(53)
	return ret;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PhysicsData_obj,graphicsPosition,return )

Void PhysicsData_obj::flashGraphicsUpdate( ::nape::phys::Body body){
{
		HX_STACK_PUSH("PhysicsData::flashGraphicsUpdate","PhysicsData.hx",61);
		HX_STACK_ARG(body,"body");
		HX_STACK_LINE(62)
		::nape::geom::Vec3 position = ::PhysicsData_obj::graphicsPosition(body);		HX_STACK_VAR(position,"position");
		struct _Function_1_1{
			inline static Dynamic Block( ::nape::phys::Body &body){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",63);
				{
					HX_STACK_LINE(63)
					if (((body->zpp_inner_i->userData == null()))){
						struct _Function_3_1{
							inline static Dynamic Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",63);
								{
									hx::Anon __result = hx::Anon_obj::Create();
									return __result;
								}
								return null();
							}
						};
						HX_STACK_LINE(63)
						body->zpp_inner_i->userData = _Function_3_1::Block();
					}
					HX_STACK_LINE(63)
					return body->zpp_inner_i->userData;
				}
				return null();
			}
		};
		HX_STACK_LINE(63)
		::native::display::DisplayObject graphic = (_Function_1_1::Block(body))->__Field(HX_CSTRING("graphic"),true);		HX_STACK_VAR(graphic,"graphic");
		struct _Function_1_2{
			inline static Float Block( ::nape::geom::Vec3 &position){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",64);
				{
					HX_STACK_LINE(64)
					if (((bool((position != null())) && bool(position->zpp_disp)))){
						HX_STACK_LINE(64)
						hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec3")) + HX_CSTRING(" has been disposed and cannot be used!")));
					}
					HX_STACK_LINE(64)
					{
						HX_STACK_LINE(64)
						::zpp_nape::geom::ZPP_Vec3 _this = position->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(64)
						if (((_this->_validate_dyn() != null()))){
							HX_STACK_LINE(64)
							_this->_validate();
						}
					}
					HX_STACK_LINE(64)
					return position->zpp_inner->x;
				}
				return null();
			}
		};
		HX_STACK_LINE(64)
		graphic->set_x(_Function_1_2::Block(position));
		struct _Function_1_3{
			inline static Float Block( ::nape::geom::Vec3 &position){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",65);
				{
					HX_STACK_LINE(65)
					if (((bool((position != null())) && bool(position->zpp_disp)))){
						HX_STACK_LINE(65)
						hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec3")) + HX_CSTRING(" has been disposed and cannot be used!")));
					}
					HX_STACK_LINE(65)
					{
						HX_STACK_LINE(65)
						::zpp_nape::geom::ZPP_Vec3 _this = position->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(65)
						if (((_this->_validate_dyn() != null()))){
							HX_STACK_LINE(65)
							_this->_validate();
						}
					}
					HX_STACK_LINE(65)
					return position->zpp_inner->y;
				}
				return null();
			}
		};
		HX_STACK_LINE(65)
		graphic->set_y(_Function_1_3::Block(position));
		struct _Function_1_4{
			inline static Float Block( ::nape::geom::Vec3 &position){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",66);
				{
					HX_STACK_LINE(66)
					if (((bool((position != null())) && bool(position->zpp_disp)))){
						HX_STACK_LINE(66)
						hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec3")) + HX_CSTRING(" has been disposed and cannot be used!")));
					}
					HX_STACK_LINE(66)
					{
						HX_STACK_LINE(66)
						::zpp_nape::geom::ZPP_Vec3 _this = position->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(66)
						if (((_this->_validate_dyn() != null()))){
							HX_STACK_LINE(66)
							_this->_validate();
						}
					}
					HX_STACK_LINE(66)
					return position->zpp_inner->z;
				}
				return null();
			}
		};
		HX_STACK_LINE(66)
		graphic->set_rotation(_Function_1_4::Block(position));
		HX_STACK_LINE(67)
		position->dispose();
	}
return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PhysicsData_obj,flashGraphicsUpdate,(void))

::nape::phys::Body PhysicsData_obj::createBody( ::String name,::native::display::DisplayObject graphic){
	HX_STACK_PUSH("PhysicsData::createBody","PhysicsData.hx",85);
	HX_STACK_ARG(name,"name");
	HX_STACK_ARG(graphic,"graphic");
	struct _Function_1_1{
		inline static Dynamic Block( ::String &name){
			HX_STACK_PUSH("*::closure","PhysicsData.hx",86);
			{
				HX_STACK_LINE(86)
				if (((::PhysicsData_obj::bodies == null()))){
					HX_STACK_LINE(86)
					::PhysicsData_obj::init();
				}
				HX_STACK_LINE(86)
				if ((!(::PhysicsData_obj::bodies->exists(name)))){
					HX_STACK_LINE(86)
					hx::Throw (((HX_CSTRING("Error: Body with name '") + name) + HX_CSTRING("' does not exist")));
				}
				HX_STACK_LINE(86)
				return ::PhysicsData_obj::bodies->get(name);
			}
			return null();
		}
	};
	HX_STACK_LINE(86)
	Dynamic xret = _Function_1_1::Block(name);		HX_STACK_VAR(xret,"xret");
	HX_STACK_LINE(87)
	if (((graphic == null()))){
		HX_STACK_LINE(87)
		return xret->__Field(HX_CSTRING("body"),true)->__Field(HX_CSTRING("copy"),true)();
	}
	HX_STACK_LINE(89)
	::nape::phys::Body ret = xret->__Field(HX_CSTRING("body"),true)->__Field(HX_CSTRING("copy"),true)();		HX_STACK_VAR(ret,"ret");
	HX_STACK_LINE(90)
	graphic->set_x(graphic->set_y((int)0));
	HX_STACK_LINE(91)
	graphic->set_rotation((int)0);
	HX_STACK_LINE(92)
	::native::geom::Rectangle bounds = graphic->getBounds(graphic);		HX_STACK_VAR(bounds,"bounds");
	struct _Function_1_2{
		inline static ::nape::geom::Vec2 Block( ::native::geom::Rectangle &bounds,Dynamic &xret){
			HX_STACK_PUSH("*::closure","PhysicsData.hx",93);
			{
				struct _Function_2_1{
					inline static Float Block( Dynamic &xret){
						HX_STACK_PUSH("*::closure","PhysicsData.hx",93);
						{
							HX_STACK_LINE(93)
							::nape::geom::Vec2 _this = xret->__Field(HX_CSTRING("anchor"),true);		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(93)
							if (((bool((_this != null())) && bool(_this->zpp_disp)))){
								HX_STACK_LINE(93)
								hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
							}
							HX_STACK_LINE(93)
							{
								HX_STACK_LINE(93)
								::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(93)
								if (((_this1->_validate_dyn() != null()))){
									HX_STACK_LINE(93)
									_this1->_validate();
								}
							}
							HX_STACK_LINE(93)
							return _this->zpp_inner->x;
						}
						return null();
					}
				};
				struct _Function_2_2{
					inline static Float Block( Dynamic &xret){
						HX_STACK_PUSH("*::closure","PhysicsData.hx",93);
						{
							HX_STACK_LINE(93)
							::nape::geom::Vec2 _this = xret->__Field(HX_CSTRING("anchor"),true);		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(93)
							if (((bool((_this != null())) && bool(_this->zpp_disp)))){
								HX_STACK_LINE(93)
								hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
							}
							HX_STACK_LINE(93)
							{
								HX_STACK_LINE(93)
								::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(93)
								if (((_this1->_validate_dyn() != null()))){
									HX_STACK_LINE(93)
									_this1->_validate();
								}
							}
							HX_STACK_LINE(93)
							return _this->zpp_inner->y;
						}
						return null();
					}
				};
				HX_STACK_LINE(93)
				Float x = (bounds->x - _Function_2_1::Block(xret));		HX_STACK_VAR(x,"x");
				Float y = (bounds->y - _Function_2_2::Block(xret));		HX_STACK_VAR(y,"y");
				bool weak = false;		HX_STACK_VAR(weak,"weak");
				HX_STACK_LINE(93)
				if (((bool((x != x)) || bool((y != y))))){
					HX_STACK_LINE(93)
					hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
				}
				HX_STACK_LINE(93)
				::nape::geom::Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
				HX_STACK_LINE(93)
				if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
					HX_STACK_LINE(93)
					ret1 = ::nape::geom::Vec2_obj::__new(null(),null());
				}
				else{
					HX_STACK_LINE(93)
					ret1 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
					HX_STACK_LINE(93)
					::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret1->zpp_pool;
					HX_STACK_LINE(93)
					ret1->zpp_pool = null();
					HX_STACK_LINE(93)
					ret1->zpp_disp = false;
					HX_STACK_LINE(93)
					if (((ret1 == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
						HX_STACK_LINE(93)
						::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
					}
				}
				HX_STACK_LINE(93)
				if (((ret1->zpp_inner == null()))){
					struct _Function_3_1{
						inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",93);
							{
								HX_STACK_LINE(93)
								bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
								HX_STACK_LINE(93)
								::zpp_nape::geom::ZPP_Vec2 ret2;		HX_STACK_VAR(ret2,"ret2");
								HX_STACK_LINE(93)
								{
									HX_STACK_LINE(93)
									if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
										HX_STACK_LINE(93)
										ret2 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
									}
									else{
										HX_STACK_LINE(93)
										ret2 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
										HX_STACK_LINE(93)
										::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret2->next;
										HX_STACK_LINE(93)
										ret2->next = null();
									}
									HX_STACK_LINE(93)
									ret2->weak = false;
								}
								HX_STACK_LINE(93)
								ret2->_immutable = immutable;
								HX_STACK_LINE(93)
								{
									HX_STACK_LINE(93)
									ret2->x = x;
									HX_STACK_LINE(93)
									ret2->y = y;
									HX_STACK_LINE(93)
									{
									}
									HX_STACK_LINE(93)
									{
									}
								}
								HX_STACK_LINE(93)
								return ret2;
							}
							return null();
						}
					};
					HX_STACK_LINE(93)
					ret1->zpp_inner = _Function_3_1::Block(x,y);
					HX_STACK_LINE(93)
					ret1->zpp_inner->outer = ret1;
				}
				else{
					HX_STACK_LINE(93)
					if (((bool((ret1 != null())) && bool(ret1->zpp_disp)))){
						HX_STACK_LINE(93)
						hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
					}
					HX_STACK_LINE(93)
					{
						HX_STACK_LINE(93)
						::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(93)
						if ((_this->_immutable)){
							HX_STACK_LINE(93)
							hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
						}
						HX_STACK_LINE(93)
						if (((_this->_isimmutable_dyn() != null()))){
							HX_STACK_LINE(93)
							_this->_isimmutable();
						}
					}
					HX_STACK_LINE(93)
					if (((bool((x != x)) || bool((y != y))))){
						HX_STACK_LINE(93)
						hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
					}
					struct _Function_3_1{
						inline static Float Block( ::nape::geom::Vec2 &ret1){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",93);
							{
								HX_STACK_LINE(93)
								if (((bool((ret1 != null())) && bool(ret1->zpp_disp)))){
									HX_STACK_LINE(93)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(93)
								{
									HX_STACK_LINE(93)
									::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(93)
									if (((_this->_validate_dyn() != null()))){
										HX_STACK_LINE(93)
										_this->_validate();
									}
								}
								HX_STACK_LINE(93)
								return ret1->zpp_inner->x;
							}
							return null();
						}
					};
					struct _Function_3_2{
						inline static Float Block( ::nape::geom::Vec2 &ret1){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",93);
							{
								HX_STACK_LINE(93)
								if (((bool((ret1 != null())) && bool(ret1->zpp_disp)))){
									HX_STACK_LINE(93)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(93)
								{
									HX_STACK_LINE(93)
									::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(93)
									if (((_this->_validate_dyn() != null()))){
										HX_STACK_LINE(93)
										_this->_validate();
									}
								}
								HX_STACK_LINE(93)
								return ret1->zpp_inner->y;
							}
							return null();
						}
					};
					HX_STACK_LINE(93)
					if ((!(((bool((_Function_3_1::Block(ret1) == x)) && bool((_Function_3_2::Block(ret1) == y))))))){
						HX_STACK_LINE(93)
						{
							HX_STACK_LINE(93)
							ret1->zpp_inner->x = x;
							HX_STACK_LINE(93)
							ret1->zpp_inner->y = y;
							HX_STACK_LINE(93)
							{
							}
							HX_STACK_LINE(93)
							{
							}
						}
						HX_STACK_LINE(93)
						{
							HX_STACK_LINE(93)
							::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(93)
							if (((_this->_invalidate_dyn() != null()))){
								HX_STACK_LINE(93)
								_this->_invalidate(_this);
							}
						}
					}
					HX_STACK_LINE(93)
					ret1;
				}
				HX_STACK_LINE(93)
				ret1->zpp_inner->weak = weak;
				HX_STACK_LINE(93)
				return ret1;
			}
			return null();
		}
	};
	HX_STACK_LINE(93)
	::nape::geom::Vec2 offset = _Function_1_2::Block(bounds,xret);		HX_STACK_VAR(offset,"offset");
	struct _Function_1_3{
		inline static Dynamic Block( ::nape::phys::Body &ret){
			HX_STACK_PUSH("*::closure","PhysicsData.hx",95);
			{
				HX_STACK_LINE(95)
				if (((ret->zpp_inner_i->userData == null()))){
					struct _Function_3_1{
						inline static Dynamic Block( ){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",95);
							{
								hx::Anon __result = hx::Anon_obj::Create();
								return __result;
							}
							return null();
						}
					};
					HX_STACK_LINE(95)
					ret->zpp_inner_i->userData = _Function_3_1::Block();
				}
				HX_STACK_LINE(95)
				return ret->zpp_inner_i->userData;
			}
			return null();
		}
	};
	HX_STACK_LINE(95)
	(_Function_1_3::Block(ret))->__FieldRef(HX_CSTRING("graphic")) = graphic;
	struct _Function_1_4{
		inline static Dynamic Block( ::nape::phys::Body &ret){
			HX_STACK_PUSH("*::closure","PhysicsData.hx",96);
			{
				HX_STACK_LINE(96)
				if (((ret->zpp_inner_i->userData == null()))){
					struct _Function_3_1{
						inline static Dynamic Block( ){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",96);
							{
								hx::Anon __result = hx::Anon_obj::Create();
								return __result;
							}
							return null();
						}
					};
					HX_STACK_LINE(96)
					ret->zpp_inner_i->userData = _Function_3_1::Block();
				}
				HX_STACK_LINE(96)
				return ret->zpp_inner_i->userData;
			}
			return null();
		}
	};
	HX_STACK_LINE(96)
	(_Function_1_4::Block(ret))->__FieldRef(HX_CSTRING("graphicOffset")) = offset;
	HX_STACK_LINE(98)
	return ret;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PhysicsData_obj,createBody,return )

Void PhysicsData_obj::registerMaterial( ::String name,::nape::phys::Material material){
{
		HX_STACK_PUSH("PhysicsData::registerMaterial","PhysicsData.hx",107);
		HX_STACK_ARG(name,"name");
		HX_STACK_ARG(material,"material");
		HX_STACK_LINE(108)
		if (((::PhysicsData_obj::materials == null()))){
			HX_STACK_LINE(108)
			::PhysicsData_obj::materials = ::Hash_obj::__new();
		}
		HX_STACK_LINE(109)
		::PhysicsData_obj::materials->set(name,material);
	}
return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PhysicsData_obj,registerMaterial,(void))

Void PhysicsData_obj::registerFilter( ::String name,::nape::dynamics::InteractionFilter filter){
{
		HX_STACK_PUSH("PhysicsData::registerFilter","PhysicsData.hx",118);
		HX_STACK_ARG(name,"name");
		HX_STACK_ARG(filter,"filter");
		HX_STACK_LINE(119)
		if (((::PhysicsData_obj::filters == null()))){
			HX_STACK_LINE(119)
			::PhysicsData_obj::filters = ::Hash_obj::__new();
		}
		HX_STACK_LINE(120)
		::PhysicsData_obj::filters->set(name,filter);
	}
return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PhysicsData_obj,registerFilter,(void))

Void PhysicsData_obj::registerFluidProperties( ::String name,::nape::phys::FluidProperties properties){
{
		HX_STACK_PUSH("PhysicsData::registerFluidProperties","PhysicsData.hx",129);
		HX_STACK_ARG(name,"name");
		HX_STACK_ARG(properties,"properties");
		HX_STACK_LINE(130)
		if (((::PhysicsData_obj::fprops == null()))){
			HX_STACK_LINE(130)
			::PhysicsData_obj::fprops = ::Hash_obj::__new();
		}
		HX_STACK_LINE(131)
		::PhysicsData_obj::fprops->set(name,properties);
	}
return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PhysicsData_obj,registerFluidProperties,(void))

Void PhysicsData_obj::registerCbType( ::String name,::nape::callbacks::CbType cbType){
{
		HX_STACK_PUSH("PhysicsData::registerCbType","PhysicsData.hx",140);
		HX_STACK_ARG(name,"name");
		HX_STACK_ARG(cbType,"cbType");
		HX_STACK_LINE(141)
		if (((::PhysicsData_obj::types == null()))){
			HX_STACK_LINE(141)
			::PhysicsData_obj::types = ::Hash_obj::__new();
		}
		HX_STACK_LINE(142)
		::PhysicsData_obj::types->set(name,cbType);
	}
return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PhysicsData_obj,registerCbType,(void))

::Hash PhysicsData_obj::bodies;

::Hash PhysicsData_obj::materials;

::Hash PhysicsData_obj::filters;

::Hash PhysicsData_obj::fprops;

::Hash PhysicsData_obj::types;

::nape::phys::Material PhysicsData_obj::material( ::String name){
	HX_STACK_PUSH("PhysicsData::material","PhysicsData.hx",152);
	HX_STACK_ARG(name,"name");
	HX_STACK_LINE(152)
	if (((name == HX_CSTRING("default")))){
		HX_STACK_LINE(153)
		return ::nape::phys::Material_obj::__new(null(),null(),null(),null(),null());
	}
	else{
		HX_STACK_LINE(155)
		if (((bool((::PhysicsData_obj::materials == null())) || bool(!(::PhysicsData_obj::materials->exists(name)))))){
			HX_STACK_LINE(156)
			hx::Throw (((HX_CSTRING("Error: Material with name '") + name) + HX_CSTRING("' has not been registered")));
		}
		HX_STACK_LINE(157)
		return ::PhysicsData_obj::materials->get(name);
	}
	HX_STACK_LINE(152)
	return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PhysicsData_obj,material,return )

::nape::dynamics::InteractionFilter PhysicsData_obj::filter( ::String name){
	HX_STACK_PUSH("PhysicsData::filter","PhysicsData.hx",160);
	HX_STACK_ARG(name,"name");
	HX_STACK_LINE(160)
	if (((name == HX_CSTRING("default")))){
		HX_STACK_LINE(161)
		return ::nape::dynamics::InteractionFilter_obj::__new(null(),null(),null(),null(),null(),null());
	}
	else{
		HX_STACK_LINE(163)
		if (((bool((::PhysicsData_obj::filters == null())) || bool(!(::PhysicsData_obj::filters->exists(name)))))){
			HX_STACK_LINE(164)
			hx::Throw (((HX_CSTRING("Error: InteractionFilter with name '") + name) + HX_CSTRING("' has not been registered")));
		}
		HX_STACK_LINE(165)
		return ::PhysicsData_obj::filters->get(name);
	}
	HX_STACK_LINE(160)
	return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PhysicsData_obj,filter,return )

::nape::phys::FluidProperties PhysicsData_obj::fprop( ::String name){
	HX_STACK_PUSH("PhysicsData::fprop","PhysicsData.hx",168);
	HX_STACK_ARG(name,"name");
	HX_STACK_LINE(168)
	if (((name == HX_CSTRING("default")))){
		HX_STACK_LINE(169)
		return ::nape::phys::FluidProperties_obj::__new(null(),null());
	}
	else{
		HX_STACK_LINE(171)
		if (((bool((::PhysicsData_obj::fprops == null())) || bool(!(::PhysicsData_obj::fprops->exists(name)))))){
			HX_STACK_LINE(172)
			hx::Throw (((HX_CSTRING("Error: FluidProperties with name '") + name) + HX_CSTRING("' has not been registered")));
		}
		HX_STACK_LINE(173)
		return ::PhysicsData_obj::fprops->get(name);
	}
	HX_STACK_LINE(168)
	return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PhysicsData_obj,fprop,return )

Void PhysicsData_obj::cbtype( ::nape::callbacks::CbTypeList outtypes,::String names){
{
		HX_STACK_PUSH("PhysicsData::cbtype","PhysicsData.hx",176);
		HX_STACK_ARG(outtypes,"outtypes");
		HX_STACK_ARG(names,"names");
		HX_STACK_LINE(177)
		int _g = (int)0;		HX_STACK_VAR(_g,"_g");
		Array< ::String > _g1 = names.split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
		HX_STACK_LINE(177)
		while(((_g < _g1->length))){
			HX_STACK_LINE(177)
			::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
			HX_STACK_LINE(177)
			++(_g);
			HX_STACK_LINE(178)
			::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
			HX_STACK_LINE(179)
			if (((name == HX_CSTRING("")))){
				HX_STACK_LINE(179)
				continue;
			}
			HX_STACK_LINE(181)
			if ((!(::PhysicsData_obj::types->exists(name)))){
				HX_STACK_LINE(182)
				hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
			}
			HX_STACK_LINE(183)
			{
				HX_STACK_LINE(183)
				::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
				HX_STACK_LINE(183)
				if ((outtypes->zpp_inner->reverse_flag)){
					HX_STACK_LINE(183)
					outtypes->push(obj);
				}
				else{
					HX_STACK_LINE(183)
					outtypes->unshift(obj);
				}
			}
		}
	}
return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PhysicsData_obj,cbtype,(void))

Dynamic PhysicsData_obj::lookup( ::String name){
	HX_STACK_PUSH("PhysicsData::lookup","PhysicsData.hx",187);
	HX_STACK_ARG(name,"name");
	HX_STACK_LINE(188)
	if (((::PhysicsData_obj::bodies == null()))){
		HX_STACK_LINE(188)
		::PhysicsData_obj::init();
	}
	HX_STACK_LINE(189)
	if ((!(::PhysicsData_obj::bodies->exists(name)))){
		HX_STACK_LINE(189)
		hx::Throw (((HX_CSTRING("Error: Body with name '") + name) + HX_CSTRING("' does not exist")));
	}
	HX_STACK_LINE(190)
	return ::PhysicsData_obj::bodies->get(name);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PhysicsData_obj,lookup,return )

Void PhysicsData_obj::init( ){
{
		HX_STACK_PUSH("PhysicsData::init","PhysicsData.hx",195);
		HX_STACK_LINE(196)
		::PhysicsData_obj::bodies = ::Hash_obj::__new();
		HX_STACK_LINE(199)
		::nape::phys::Body body = ::nape::phys::Body_obj::__new(null(),null());		HX_STACK_VAR(body,"body");
		HX_STACK_LINE(200)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::phys::Body &body){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",200);
					{
						HX_STACK_LINE(200)
						if (((body->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(200)
							body->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(200)
						return body->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(200)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(body);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(200)
			{
				HX_STACK_LINE(200)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(200)
				while(((_g < _g1->length))){
					HX_STACK_LINE(200)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(200)
					++(_g);
					HX_STACK_LINE(200)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(200)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(200)
						continue;
					}
					HX_STACK_LINE(200)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(200)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(200)
					{
						HX_STACK_LINE(200)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(200)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(200)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(200)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		HX_STACK_LINE(203)
		::nape::phys::Material mat = ::nape::phys::Material_obj::__new(null(),null(),null(),null(),null());		HX_STACK_VAR(mat,"mat");
		HX_STACK_LINE(204)
		::nape::dynamics::InteractionFilter filt = ::nape::dynamics::InteractionFilter_obj::__new(null(),null(),null(),null(),null(),null());		HX_STACK_VAR(filt,"filt");
		HX_STACK_LINE(205)
		::nape::phys::FluidProperties prop = ::nape::phys::FluidProperties_obj::__new(null(),null());		HX_STACK_VAR(prop,"prop");
		struct _Function_1_1{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
				{
					HX_STACK_LINE(210)
					{
					}
					HX_STACK_LINE(210)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(210)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(210)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(210)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(210)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(210)
						ret->zpp_pool = null();
						HX_STACK_LINE(210)
						ret->zpp_disp = false;
						HX_STACK_LINE(210)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(210)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(210)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(210)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(210)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(210)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(210)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(210)
											ret1->next = null();
										}
										HX_STACK_LINE(210)
										ret1->weak = false;
									}
									HX_STACK_LINE(210)
									ret1->_immutable = immutable;
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										ret1->x = 149.5;
										HX_STACK_LINE(210)
										ret1->y = (int)46;
										HX_STACK_LINE(210)
										{
										}
										HX_STACK_LINE(210)
										{
										}
									}
									HX_STACK_LINE(210)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(210)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(210)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(210)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(210)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(210)
						{
							HX_STACK_LINE(210)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(210)
							if ((_this->_immutable)){
								HX_STACK_LINE(210)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(210)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(210)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(210)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(210)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(210)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(210)
											_this->_validate();
										}
									}
									HX_STACK_LINE(210)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(210)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(210)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(210)
											_this->_validate();
										}
									}
									HX_STACK_LINE(210)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(210)
						if ((!(((bool((_Function_3_1::Block(ret) == 149.5)) && bool((_Function_3_2::Block(ret) == (int)46))))))){
							HX_STACK_LINE(210)
							{
								HX_STACK_LINE(210)
								ret->zpp_inner->x = 149.5;
								HX_STACK_LINE(210)
								ret->zpp_inner->y = (int)46;
								HX_STACK_LINE(210)
								{
								}
								HX_STACK_LINE(210)
								{
								}
							}
							HX_STACK_LINE(210)
							{
								HX_STACK_LINE(210)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(210)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(210)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(210)
						ret;
					}
					HX_STACK_LINE(210)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(210)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_2{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
				{
					HX_STACK_LINE(210)
					{
					}
					HX_STACK_LINE(210)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(210)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(210)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(210)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(210)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(210)
						ret->zpp_pool = null();
						HX_STACK_LINE(210)
						ret->zpp_disp = false;
						HX_STACK_LINE(210)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(210)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(210)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(210)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(210)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(210)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(210)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(210)
											ret1->next = null();
										}
										HX_STACK_LINE(210)
										ret1->weak = false;
									}
									HX_STACK_LINE(210)
									ret1->_immutable = immutable;
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										ret1->x = (int)140;
										HX_STACK_LINE(210)
										ret1->y = 28.5;
										HX_STACK_LINE(210)
										{
										}
										HX_STACK_LINE(210)
										{
										}
									}
									HX_STACK_LINE(210)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(210)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(210)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(210)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(210)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(210)
						{
							HX_STACK_LINE(210)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(210)
							if ((_this->_immutable)){
								HX_STACK_LINE(210)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(210)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(210)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(210)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(210)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(210)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(210)
											_this->_validate();
										}
									}
									HX_STACK_LINE(210)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(210)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(210)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(210)
											_this->_validate();
										}
									}
									HX_STACK_LINE(210)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(210)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)140)) && bool((_Function_3_2::Block(ret) == 28.5))))))){
							HX_STACK_LINE(210)
							{
								HX_STACK_LINE(210)
								ret->zpp_inner->x = (int)140;
								HX_STACK_LINE(210)
								ret->zpp_inner->y = 28.5;
								HX_STACK_LINE(210)
								{
								}
								HX_STACK_LINE(210)
								{
								}
							}
							HX_STACK_LINE(210)
							{
								HX_STACK_LINE(210)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(210)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(210)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(210)
						ret;
					}
					HX_STACK_LINE(210)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(210)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_3{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
				{
					HX_STACK_LINE(210)
					{
					}
					HX_STACK_LINE(210)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(210)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(210)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(210)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(210)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(210)
						ret->zpp_pool = null();
						HX_STACK_LINE(210)
						ret->zpp_disp = false;
						HX_STACK_LINE(210)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(210)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(210)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(210)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(210)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(210)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(210)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(210)
											ret1->next = null();
										}
										HX_STACK_LINE(210)
										ret1->weak = false;
									}
									HX_STACK_LINE(210)
									ret1->_immutable = immutable;
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										ret1->x = (int)117;
										HX_STACK_LINE(210)
										ret1->y = 11.5;
										HX_STACK_LINE(210)
										{
										}
										HX_STACK_LINE(210)
										{
										}
									}
									HX_STACK_LINE(210)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(210)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(210)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(210)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(210)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(210)
						{
							HX_STACK_LINE(210)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(210)
							if ((_this->_immutable)){
								HX_STACK_LINE(210)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(210)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(210)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(210)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(210)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(210)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(210)
											_this->_validate();
										}
									}
									HX_STACK_LINE(210)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(210)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(210)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(210)
											_this->_validate();
										}
									}
									HX_STACK_LINE(210)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(210)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)117)) && bool((_Function_3_2::Block(ret) == 11.5))))))){
							HX_STACK_LINE(210)
							{
								HX_STACK_LINE(210)
								ret->zpp_inner->x = (int)117;
								HX_STACK_LINE(210)
								ret->zpp_inner->y = 11.5;
								HX_STACK_LINE(210)
								{
								}
								HX_STACK_LINE(210)
								{
								}
							}
							HX_STACK_LINE(210)
							{
								HX_STACK_LINE(210)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(210)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(210)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(210)
						ret;
					}
					HX_STACK_LINE(210)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(210)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_4{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
				{
					HX_STACK_LINE(210)
					{
					}
					HX_STACK_LINE(210)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(210)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(210)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(210)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(210)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(210)
						ret->zpp_pool = null();
						HX_STACK_LINE(210)
						ret->zpp_disp = false;
						HX_STACK_LINE(210)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(210)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(210)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(210)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(210)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(210)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(210)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(210)
											ret1->next = null();
										}
										HX_STACK_LINE(210)
										ret1->weak = false;
									}
									HX_STACK_LINE(210)
									ret1->_immutable = immutable;
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										ret1->x = (int)90;
										HX_STACK_LINE(210)
										ret1->y = 1.5;
										HX_STACK_LINE(210)
										{
										}
										HX_STACK_LINE(210)
										{
										}
									}
									HX_STACK_LINE(210)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(210)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(210)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(210)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(210)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(210)
						{
							HX_STACK_LINE(210)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(210)
							if ((_this->_immutable)){
								HX_STACK_LINE(210)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(210)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(210)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(210)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(210)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(210)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(210)
											_this->_validate();
										}
									}
									HX_STACK_LINE(210)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(210)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(210)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(210)
											_this->_validate();
										}
									}
									HX_STACK_LINE(210)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(210)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)90)) && bool((_Function_3_2::Block(ret) == 1.5))))))){
							HX_STACK_LINE(210)
							{
								HX_STACK_LINE(210)
								ret->zpp_inner->x = (int)90;
								HX_STACK_LINE(210)
								ret->zpp_inner->y = 1.5;
								HX_STACK_LINE(210)
								{
								}
								HX_STACK_LINE(210)
								{
								}
							}
							HX_STACK_LINE(210)
							{
								HX_STACK_LINE(210)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(210)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(210)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(210)
						ret;
					}
					HX_STACK_LINE(210)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(210)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_5{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
				{
					HX_STACK_LINE(210)
					{
					}
					HX_STACK_LINE(210)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(210)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(210)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(210)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(210)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(210)
						ret->zpp_pool = null();
						HX_STACK_LINE(210)
						ret->zpp_disp = false;
						HX_STACK_LINE(210)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(210)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(210)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(210)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(210)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(210)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(210)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(210)
											ret1->next = null();
										}
										HX_STACK_LINE(210)
										ret1->weak = false;
									}
									HX_STACK_LINE(210)
									ret1->_immutable = immutable;
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										ret1->x = (int)28;
										HX_STACK_LINE(210)
										ret1->y = (int)71;
										HX_STACK_LINE(210)
										{
										}
										HX_STACK_LINE(210)
										{
										}
									}
									HX_STACK_LINE(210)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(210)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(210)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(210)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(210)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(210)
						{
							HX_STACK_LINE(210)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(210)
							if ((_this->_immutable)){
								HX_STACK_LINE(210)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(210)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(210)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(210)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(210)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(210)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(210)
											_this->_validate();
										}
									}
									HX_STACK_LINE(210)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(210)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(210)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(210)
											_this->_validate();
										}
									}
									HX_STACK_LINE(210)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(210)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)28)) && bool((_Function_3_2::Block(ret) == (int)71))))))){
							HX_STACK_LINE(210)
							{
								HX_STACK_LINE(210)
								ret->zpp_inner->x = (int)28;
								HX_STACK_LINE(210)
								ret->zpp_inner->y = (int)71;
								HX_STACK_LINE(210)
								{
								}
								HX_STACK_LINE(210)
								{
								}
							}
							HX_STACK_LINE(210)
							{
								HX_STACK_LINE(210)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(210)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(210)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(210)
						ret;
					}
					HX_STACK_LINE(210)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(210)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_6{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
				{
					HX_STACK_LINE(210)
					{
					}
					HX_STACK_LINE(210)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(210)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(210)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(210)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(210)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(210)
						ret->zpp_pool = null();
						HX_STACK_LINE(210)
						ret->zpp_disp = false;
						HX_STACK_LINE(210)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(210)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(210)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(210)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(210)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(210)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(210)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(210)
											ret1->next = null();
										}
										HX_STACK_LINE(210)
										ret1->weak = false;
									}
									HX_STACK_LINE(210)
									ret1->_immutable = immutable;
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										ret1->x = (int)67;
										HX_STACK_LINE(210)
										ret1->y = 84.5;
										HX_STACK_LINE(210)
										{
										}
										HX_STACK_LINE(210)
										{
										}
									}
									HX_STACK_LINE(210)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(210)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(210)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(210)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(210)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(210)
						{
							HX_STACK_LINE(210)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(210)
							if ((_this->_immutable)){
								HX_STACK_LINE(210)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(210)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(210)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(210)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(210)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(210)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(210)
											_this->_validate();
										}
									}
									HX_STACK_LINE(210)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(210)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(210)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(210)
											_this->_validate();
										}
									}
									HX_STACK_LINE(210)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(210)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)67)) && bool((_Function_3_2::Block(ret) == 84.5))))))){
							HX_STACK_LINE(210)
							{
								HX_STACK_LINE(210)
								ret->zpp_inner->x = (int)67;
								HX_STACK_LINE(210)
								ret->zpp_inner->y = 84.5;
								HX_STACK_LINE(210)
								{
								}
								HX_STACK_LINE(210)
								{
								}
							}
							HX_STACK_LINE(210)
							{
								HX_STACK_LINE(210)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(210)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(210)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(210)
						ret;
					}
					HX_STACK_LINE(210)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(210)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_7{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
				{
					HX_STACK_LINE(210)
					{
					}
					HX_STACK_LINE(210)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(210)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(210)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(210)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(210)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(210)
						ret->zpp_pool = null();
						HX_STACK_LINE(210)
						ret->zpp_disp = false;
						HX_STACK_LINE(210)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(210)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(210)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(210)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(210)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(210)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(210)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(210)
											ret1->next = null();
										}
										HX_STACK_LINE(210)
										ret1->weak = false;
									}
									HX_STACK_LINE(210)
									ret1->_immutable = immutable;
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										ret1->x = (int)97;
										HX_STACK_LINE(210)
										ret1->y = 82.5;
										HX_STACK_LINE(210)
										{
										}
										HX_STACK_LINE(210)
										{
										}
									}
									HX_STACK_LINE(210)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(210)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(210)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(210)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(210)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(210)
						{
							HX_STACK_LINE(210)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(210)
							if ((_this->_immutable)){
								HX_STACK_LINE(210)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(210)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(210)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(210)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(210)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(210)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(210)
											_this->_validate();
										}
									}
									HX_STACK_LINE(210)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(210)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(210)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(210)
											_this->_validate();
										}
									}
									HX_STACK_LINE(210)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(210)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)97)) && bool((_Function_3_2::Block(ret) == 82.5))))))){
							HX_STACK_LINE(210)
							{
								HX_STACK_LINE(210)
								ret->zpp_inner->x = (int)97;
								HX_STACK_LINE(210)
								ret->zpp_inner->y = 82.5;
								HX_STACK_LINE(210)
								{
								}
								HX_STACK_LINE(210)
								{
								}
							}
							HX_STACK_LINE(210)
							{
								HX_STACK_LINE(210)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(210)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(210)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(210)
						ret;
					}
					HX_STACK_LINE(210)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(210)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_8{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
				{
					HX_STACK_LINE(210)
					{
					}
					HX_STACK_LINE(210)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(210)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(210)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(210)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(210)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(210)
						ret->zpp_pool = null();
						HX_STACK_LINE(210)
						ret->zpp_disp = false;
						HX_STACK_LINE(210)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(210)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(210)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(210)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(210)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(210)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(210)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(210)
											ret1->next = null();
										}
										HX_STACK_LINE(210)
										ret1->weak = false;
									}
									HX_STACK_LINE(210)
									ret1->_immutable = immutable;
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										ret1->x = (int)133;
										HX_STACK_LINE(210)
										ret1->y = 64.5;
										HX_STACK_LINE(210)
										{
										}
										HX_STACK_LINE(210)
										{
										}
									}
									HX_STACK_LINE(210)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(210)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(210)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(210)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(210)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(210)
						{
							HX_STACK_LINE(210)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(210)
							if ((_this->_immutable)){
								HX_STACK_LINE(210)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(210)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(210)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(210)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(210)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(210)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(210)
											_this->_validate();
										}
									}
									HX_STACK_LINE(210)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",210);
								{
									HX_STACK_LINE(210)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(210)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(210)
									{
										HX_STACK_LINE(210)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(210)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(210)
											_this->_validate();
										}
									}
									HX_STACK_LINE(210)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(210)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)133)) && bool((_Function_3_2::Block(ret) == 64.5))))))){
							HX_STACK_LINE(210)
							{
								HX_STACK_LINE(210)
								ret->zpp_inner->x = (int)133;
								HX_STACK_LINE(210)
								ret->zpp_inner->y = 64.5;
								HX_STACK_LINE(210)
								{
								}
								HX_STACK_LINE(210)
								{
								}
							}
							HX_STACK_LINE(210)
							{
								HX_STACK_LINE(210)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(210)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(210)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(210)
						ret;
					}
					HX_STACK_LINE(210)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(210)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(209)
		::nape::shape::Polygon s = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_1::Block()).Add(_Function_1_2::Block()).Add(_Function_1_3::Block()).Add(_Function_1_4::Block()).Add(_Function_1_5::Block()).Add(_Function_1_6::Block()).Add(_Function_1_7::Block()).Add(_Function_1_8::Block())),mat,filt);		HX_STACK_VAR(s,"s");
		HX_STACK_LINE(214)
		{
			HX_STACK_LINE(214)
			{
				HX_STACK_LINE(214)
				s->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(214)
				if (((((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body))){
					HX_STACK_LINE(214)
					if (((s->zpp_inner->body != null()))){
						HX_STACK_LINE(214)
						((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s);
					}
					HX_STACK_LINE(214)
					if (((body != null()))){
						HX_STACK_LINE(214)
						::nape::shape::ShapeList _this = body->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(214)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(214)
							_this->push(s);
						}
						else{
							HX_STACK_LINE(214)
							_this->unshift(s);
						}
					}
				}
			}
			HX_STACK_LINE(214)
			if (((s->zpp_inner->body != null()))){
				HX_STACK_LINE(214)
				s->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(214)
				Dynamic();
			}
		}
		HX_STACK_LINE(215)
		{
			HX_STACK_LINE(215)
			{
				HX_STACK_LINE(215)
				s->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(215)
				s->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(215)
				s->zpp_inner->wake();
			}
			HX_STACK_LINE(215)
			s->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(216)
		{
			HX_STACK_LINE(216)
			{
				HX_STACK_LINE(216)
				s->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(216)
				s->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(216)
				{
				}
				HX_STACK_LINE(216)
				s->zpp_inner->wake();
			}
			HX_STACK_LINE(216)
			s->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(217)
		{
			HX_STACK_LINE(217)
			{
				HX_STACK_LINE(217)
				if (((prop == null()))){
					HX_STACK_LINE(217)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(217)
				s->zpp_inner->setFluid(prop->zpp_inner);
			}
			HX_STACK_LINE(217)
			{
				HX_STACK_LINE(217)
				s->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(217)
				if (((s->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(217)
					s->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(217)
				s->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(218)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",218);
					{
						HX_STACK_LINE(218)
						if (((s->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(218)
							s->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(218)
						return s->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(218)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(218)
			{
				HX_STACK_LINE(218)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(218)
				while(((_g < _g1->length))){
					HX_STACK_LINE(218)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(218)
					++(_g);
					HX_STACK_LINE(218)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(218)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(218)
						continue;
					}
					HX_STACK_LINE(218)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(218)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(218)
					{
						HX_STACK_LINE(218)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(218)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(218)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(218)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_9{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
				{
					HX_STACK_LINE(221)
					{
					}
					HX_STACK_LINE(221)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(221)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(221)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(221)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(221)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(221)
						ret->zpp_pool = null();
						HX_STACK_LINE(221)
						ret->zpp_disp = false;
						HX_STACK_LINE(221)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(221)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(221)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
								{
									HX_STACK_LINE(221)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(221)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(221)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(221)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(221)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(221)
											ret1->next = null();
										}
										HX_STACK_LINE(221)
										ret1->weak = false;
									}
									HX_STACK_LINE(221)
									ret1->_immutable = immutable;
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										ret1->x = (int)28;
										HX_STACK_LINE(221)
										ret1->y = (int)71;
										HX_STACK_LINE(221)
										{
										}
										HX_STACK_LINE(221)
										{
										}
									}
									HX_STACK_LINE(221)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(221)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(221)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(221)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(221)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(221)
						{
							HX_STACK_LINE(221)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(221)
							if ((_this->_immutable)){
								HX_STACK_LINE(221)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(221)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(221)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(221)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
								{
									HX_STACK_LINE(221)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(221)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(221)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(221)
											_this->_validate();
										}
									}
									HX_STACK_LINE(221)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
								{
									HX_STACK_LINE(221)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(221)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(221)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(221)
											_this->_validate();
										}
									}
									HX_STACK_LINE(221)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(221)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)28)) && bool((_Function_3_2::Block(ret) == (int)71))))))){
							HX_STACK_LINE(221)
							{
								HX_STACK_LINE(221)
								ret->zpp_inner->x = (int)28;
								HX_STACK_LINE(221)
								ret->zpp_inner->y = (int)71;
								HX_STACK_LINE(221)
								{
								}
								HX_STACK_LINE(221)
								{
								}
							}
							HX_STACK_LINE(221)
							{
								HX_STACK_LINE(221)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(221)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(221)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(221)
						ret;
					}
					HX_STACK_LINE(221)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(221)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_10{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
				{
					HX_STACK_LINE(221)
					{
					}
					HX_STACK_LINE(221)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(221)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(221)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(221)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(221)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(221)
						ret->zpp_pool = null();
						HX_STACK_LINE(221)
						ret->zpp_disp = false;
						HX_STACK_LINE(221)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(221)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(221)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
								{
									HX_STACK_LINE(221)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(221)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(221)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(221)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(221)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(221)
											ret1->next = null();
										}
										HX_STACK_LINE(221)
										ret1->weak = false;
									}
									HX_STACK_LINE(221)
									ret1->_immutable = immutable;
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										ret1->x = (int)90;
										HX_STACK_LINE(221)
										ret1->y = 1.5;
										HX_STACK_LINE(221)
										{
										}
										HX_STACK_LINE(221)
										{
										}
									}
									HX_STACK_LINE(221)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(221)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(221)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(221)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(221)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(221)
						{
							HX_STACK_LINE(221)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(221)
							if ((_this->_immutable)){
								HX_STACK_LINE(221)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(221)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(221)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(221)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
								{
									HX_STACK_LINE(221)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(221)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(221)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(221)
											_this->_validate();
										}
									}
									HX_STACK_LINE(221)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
								{
									HX_STACK_LINE(221)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(221)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(221)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(221)
											_this->_validate();
										}
									}
									HX_STACK_LINE(221)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(221)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)90)) && bool((_Function_3_2::Block(ret) == 1.5))))))){
							HX_STACK_LINE(221)
							{
								HX_STACK_LINE(221)
								ret->zpp_inner->x = (int)90;
								HX_STACK_LINE(221)
								ret->zpp_inner->y = 1.5;
								HX_STACK_LINE(221)
								{
								}
								HX_STACK_LINE(221)
								{
								}
							}
							HX_STACK_LINE(221)
							{
								HX_STACK_LINE(221)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(221)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(221)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(221)
						ret;
					}
					HX_STACK_LINE(221)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(221)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_11{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
				{
					HX_STACK_LINE(221)
					{
					}
					HX_STACK_LINE(221)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(221)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(221)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(221)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(221)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(221)
						ret->zpp_pool = null();
						HX_STACK_LINE(221)
						ret->zpp_disp = false;
						HX_STACK_LINE(221)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(221)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(221)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
								{
									HX_STACK_LINE(221)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(221)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(221)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(221)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(221)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(221)
											ret1->next = null();
										}
										HX_STACK_LINE(221)
										ret1->weak = false;
									}
									HX_STACK_LINE(221)
									ret1->_immutable = immutable;
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										ret1->x = (int)66;
										HX_STACK_LINE(221)
										ret1->y = 0.5;
										HX_STACK_LINE(221)
										{
										}
										HX_STACK_LINE(221)
										{
										}
									}
									HX_STACK_LINE(221)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(221)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(221)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(221)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(221)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(221)
						{
							HX_STACK_LINE(221)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(221)
							if ((_this->_immutable)){
								HX_STACK_LINE(221)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(221)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(221)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(221)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
								{
									HX_STACK_LINE(221)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(221)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(221)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(221)
											_this->_validate();
										}
									}
									HX_STACK_LINE(221)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
								{
									HX_STACK_LINE(221)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(221)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(221)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(221)
											_this->_validate();
										}
									}
									HX_STACK_LINE(221)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(221)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)66)) && bool((_Function_3_2::Block(ret) == 0.5))))))){
							HX_STACK_LINE(221)
							{
								HX_STACK_LINE(221)
								ret->zpp_inner->x = (int)66;
								HX_STACK_LINE(221)
								ret->zpp_inner->y = 0.5;
								HX_STACK_LINE(221)
								{
								}
								HX_STACK_LINE(221)
								{
								}
							}
							HX_STACK_LINE(221)
							{
								HX_STACK_LINE(221)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(221)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(221)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(221)
						ret;
					}
					HX_STACK_LINE(221)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(221)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_12{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
				{
					HX_STACK_LINE(221)
					{
					}
					HX_STACK_LINE(221)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(221)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(221)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(221)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(221)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(221)
						ret->zpp_pool = null();
						HX_STACK_LINE(221)
						ret->zpp_disp = false;
						HX_STACK_LINE(221)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(221)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(221)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
								{
									HX_STACK_LINE(221)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(221)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(221)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(221)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(221)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(221)
											ret1->next = null();
										}
										HX_STACK_LINE(221)
										ret1->weak = false;
									}
									HX_STACK_LINE(221)
									ret1->_immutable = immutable;
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										ret1->x = (int)65;
										HX_STACK_LINE(221)
										ret1->y = 0.5;
										HX_STACK_LINE(221)
										{
										}
										HX_STACK_LINE(221)
										{
										}
									}
									HX_STACK_LINE(221)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(221)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(221)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(221)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(221)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(221)
						{
							HX_STACK_LINE(221)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(221)
							if ((_this->_immutable)){
								HX_STACK_LINE(221)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(221)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(221)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(221)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
								{
									HX_STACK_LINE(221)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(221)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(221)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(221)
											_this->_validate();
										}
									}
									HX_STACK_LINE(221)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
								{
									HX_STACK_LINE(221)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(221)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(221)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(221)
											_this->_validate();
										}
									}
									HX_STACK_LINE(221)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(221)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)65)) && bool((_Function_3_2::Block(ret) == 0.5))))))){
							HX_STACK_LINE(221)
							{
								HX_STACK_LINE(221)
								ret->zpp_inner->x = (int)65;
								HX_STACK_LINE(221)
								ret->zpp_inner->y = 0.5;
								HX_STACK_LINE(221)
								{
								}
								HX_STACK_LINE(221)
								{
								}
							}
							HX_STACK_LINE(221)
							{
								HX_STACK_LINE(221)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(221)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(221)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(221)
						ret;
					}
					HX_STACK_LINE(221)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(221)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_13{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
				{
					HX_STACK_LINE(221)
					{
					}
					HX_STACK_LINE(221)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(221)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(221)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(221)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(221)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(221)
						ret->zpp_pool = null();
						HX_STACK_LINE(221)
						ret->zpp_disp = false;
						HX_STACK_LINE(221)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(221)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(221)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
								{
									HX_STACK_LINE(221)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(221)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(221)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(221)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(221)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(221)
											ret1->next = null();
										}
										HX_STACK_LINE(221)
										ret1->weak = false;
									}
									HX_STACK_LINE(221)
									ret1->_immutable = immutable;
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										ret1->x = 26.5;
										HX_STACK_LINE(221)
										ret1->y = (int)14;
										HX_STACK_LINE(221)
										{
										}
										HX_STACK_LINE(221)
										{
										}
									}
									HX_STACK_LINE(221)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(221)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(221)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(221)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(221)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(221)
						{
							HX_STACK_LINE(221)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(221)
							if ((_this->_immutable)){
								HX_STACK_LINE(221)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(221)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(221)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(221)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
								{
									HX_STACK_LINE(221)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(221)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(221)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(221)
											_this->_validate();
										}
									}
									HX_STACK_LINE(221)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
								{
									HX_STACK_LINE(221)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(221)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(221)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(221)
											_this->_validate();
										}
									}
									HX_STACK_LINE(221)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(221)
						if ((!(((bool((_Function_3_1::Block(ret) == 26.5)) && bool((_Function_3_2::Block(ret) == (int)14))))))){
							HX_STACK_LINE(221)
							{
								HX_STACK_LINE(221)
								ret->zpp_inner->x = 26.5;
								HX_STACK_LINE(221)
								ret->zpp_inner->y = (int)14;
								HX_STACK_LINE(221)
								{
								}
								HX_STACK_LINE(221)
								{
								}
							}
							HX_STACK_LINE(221)
							{
								HX_STACK_LINE(221)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(221)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(221)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(221)
						ret;
					}
					HX_STACK_LINE(221)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(221)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_14{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
				{
					HX_STACK_LINE(221)
					{
					}
					HX_STACK_LINE(221)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(221)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(221)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(221)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(221)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(221)
						ret->zpp_pool = null();
						HX_STACK_LINE(221)
						ret->zpp_disp = false;
						HX_STACK_LINE(221)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(221)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(221)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
								{
									HX_STACK_LINE(221)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(221)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(221)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(221)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(221)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(221)
											ret1->next = null();
										}
										HX_STACK_LINE(221)
										ret1->weak = false;
									}
									HX_STACK_LINE(221)
									ret1->_immutable = immutable;
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										ret1->x = (int)3;
										HX_STACK_LINE(221)
										ret1->y = (int)48;
										HX_STACK_LINE(221)
										{
										}
										HX_STACK_LINE(221)
										{
										}
									}
									HX_STACK_LINE(221)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(221)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(221)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(221)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(221)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(221)
						{
							HX_STACK_LINE(221)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(221)
							if ((_this->_immutable)){
								HX_STACK_LINE(221)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(221)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(221)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(221)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
								{
									HX_STACK_LINE(221)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(221)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(221)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(221)
											_this->_validate();
										}
									}
									HX_STACK_LINE(221)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",221);
								{
									HX_STACK_LINE(221)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(221)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(221)
									{
										HX_STACK_LINE(221)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(221)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(221)
											_this->_validate();
										}
									}
									HX_STACK_LINE(221)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(221)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)3)) && bool((_Function_3_2::Block(ret) == (int)48))))))){
							HX_STACK_LINE(221)
							{
								HX_STACK_LINE(221)
								ret->zpp_inner->x = (int)3;
								HX_STACK_LINE(221)
								ret->zpp_inner->y = (int)48;
								HX_STACK_LINE(221)
								{
								}
								HX_STACK_LINE(221)
								{
								}
							}
							HX_STACK_LINE(221)
							{
								HX_STACK_LINE(221)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(221)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(221)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(221)
						ret;
					}
					HX_STACK_LINE(221)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(221)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(220)
		::nape::shape::Polygon s1 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_9::Block()).Add(_Function_1_10::Block()).Add(_Function_1_11::Block()).Add(_Function_1_12::Block()).Add(_Function_1_13::Block()).Add(_Function_1_14::Block())),mat,filt);		HX_STACK_VAR(s1,"s1");
		HX_STACK_LINE(225)
		{
			HX_STACK_LINE(225)
			{
				HX_STACK_LINE(225)
				s1->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(225)
				if (((((  (((s1->zpp_inner->body != null()))) ? ::nape::phys::Body(s1->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body))){
					HX_STACK_LINE(225)
					if (((s1->zpp_inner->body != null()))){
						HX_STACK_LINE(225)
						((  (((s1->zpp_inner->body != null()))) ? ::nape::phys::Body(s1->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s1);
					}
					HX_STACK_LINE(225)
					if (((body != null()))){
						HX_STACK_LINE(225)
						::nape::shape::ShapeList _this = body->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(225)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(225)
							_this->push(s1);
						}
						else{
							HX_STACK_LINE(225)
							_this->unshift(s1);
						}
					}
				}
			}
			HX_STACK_LINE(225)
			if (((s1->zpp_inner->body != null()))){
				HX_STACK_LINE(225)
				s1->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(225)
				Dynamic();
			}
		}
		HX_STACK_LINE(226)
		{
			HX_STACK_LINE(226)
			{
				HX_STACK_LINE(226)
				s1->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(226)
				s1->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(226)
				s1->zpp_inner->wake();
			}
			HX_STACK_LINE(226)
			s1->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(227)
		{
			HX_STACK_LINE(227)
			{
				HX_STACK_LINE(227)
				s1->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(227)
				s1->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(227)
				{
				}
				HX_STACK_LINE(227)
				s1->zpp_inner->wake();
			}
			HX_STACK_LINE(227)
			s1->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(228)
		{
			HX_STACK_LINE(228)
			{
				HX_STACK_LINE(228)
				if (((prop == null()))){
					HX_STACK_LINE(228)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(228)
				s1->zpp_inner->setFluid(prop->zpp_inner);
			}
			HX_STACK_LINE(228)
			{
				HX_STACK_LINE(228)
				s1->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(228)
				if (((s1->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(228)
					s1->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(228)
				s1->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(229)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s1){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",229);
					{
						HX_STACK_LINE(229)
						if (((s1->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(229)
							s1->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(229)
						return s1->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(229)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s1);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(229)
			{
				HX_STACK_LINE(229)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(229)
				while(((_g < _g1->length))){
					HX_STACK_LINE(229)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(229)
					++(_g);
					HX_STACK_LINE(229)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(229)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(229)
						continue;
					}
					HX_STACK_LINE(229)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(229)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(229)
					{
						HX_STACK_LINE(229)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(229)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(229)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(229)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_15{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",232);
				{
					HX_STACK_LINE(232)
					{
					}
					HX_STACK_LINE(232)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(232)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(232)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(232)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(232)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(232)
						ret->zpp_pool = null();
						HX_STACK_LINE(232)
						ret->zpp_disp = false;
						HX_STACK_LINE(232)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(232)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(232)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",232);
								{
									HX_STACK_LINE(232)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(232)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(232)
									{
										HX_STACK_LINE(232)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(232)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(232)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(232)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(232)
											ret1->next = null();
										}
										HX_STACK_LINE(232)
										ret1->weak = false;
									}
									HX_STACK_LINE(232)
									ret1->_immutable = immutable;
									HX_STACK_LINE(232)
									{
										HX_STACK_LINE(232)
										ret1->x = (int)1;
										HX_STACK_LINE(232)
										ret1->y = (int)38;
										HX_STACK_LINE(232)
										{
										}
										HX_STACK_LINE(232)
										{
										}
									}
									HX_STACK_LINE(232)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(232)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(232)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(232)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(232)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(232)
						{
							HX_STACK_LINE(232)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(232)
							if ((_this->_immutable)){
								HX_STACK_LINE(232)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(232)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(232)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(232)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",232);
								{
									HX_STACK_LINE(232)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(232)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(232)
									{
										HX_STACK_LINE(232)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(232)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(232)
											_this->_validate();
										}
									}
									HX_STACK_LINE(232)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",232);
								{
									HX_STACK_LINE(232)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(232)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(232)
									{
										HX_STACK_LINE(232)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(232)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(232)
											_this->_validate();
										}
									}
									HX_STACK_LINE(232)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(232)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)1)) && bool((_Function_3_2::Block(ret) == (int)38))))))){
							HX_STACK_LINE(232)
							{
								HX_STACK_LINE(232)
								ret->zpp_inner->x = (int)1;
								HX_STACK_LINE(232)
								ret->zpp_inner->y = (int)38;
								HX_STACK_LINE(232)
								{
								}
								HX_STACK_LINE(232)
								{
								}
							}
							HX_STACK_LINE(232)
							{
								HX_STACK_LINE(232)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(232)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(232)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(232)
						ret;
					}
					HX_STACK_LINE(232)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(232)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_16{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",232);
				{
					HX_STACK_LINE(232)
					{
					}
					HX_STACK_LINE(232)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(232)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(232)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(232)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(232)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(232)
						ret->zpp_pool = null();
						HX_STACK_LINE(232)
						ret->zpp_disp = false;
						HX_STACK_LINE(232)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(232)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(232)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",232);
								{
									HX_STACK_LINE(232)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(232)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(232)
									{
										HX_STACK_LINE(232)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(232)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(232)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(232)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(232)
											ret1->next = null();
										}
										HX_STACK_LINE(232)
										ret1->weak = false;
									}
									HX_STACK_LINE(232)
									ret1->_immutable = immutable;
									HX_STACK_LINE(232)
									{
										HX_STACK_LINE(232)
										ret1->x = (int)3;
										HX_STACK_LINE(232)
										ret1->y = (int)48;
										HX_STACK_LINE(232)
										{
										}
										HX_STACK_LINE(232)
										{
										}
									}
									HX_STACK_LINE(232)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(232)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(232)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(232)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(232)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(232)
						{
							HX_STACK_LINE(232)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(232)
							if ((_this->_immutable)){
								HX_STACK_LINE(232)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(232)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(232)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(232)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",232);
								{
									HX_STACK_LINE(232)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(232)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(232)
									{
										HX_STACK_LINE(232)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(232)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(232)
											_this->_validate();
										}
									}
									HX_STACK_LINE(232)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",232);
								{
									HX_STACK_LINE(232)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(232)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(232)
									{
										HX_STACK_LINE(232)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(232)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(232)
											_this->_validate();
										}
									}
									HX_STACK_LINE(232)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(232)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)3)) && bool((_Function_3_2::Block(ret) == (int)48))))))){
							HX_STACK_LINE(232)
							{
								HX_STACK_LINE(232)
								ret->zpp_inner->x = (int)3;
								HX_STACK_LINE(232)
								ret->zpp_inner->y = (int)48;
								HX_STACK_LINE(232)
								{
								}
								HX_STACK_LINE(232)
								{
								}
							}
							HX_STACK_LINE(232)
							{
								HX_STACK_LINE(232)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(232)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(232)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(232)
						ret;
					}
					HX_STACK_LINE(232)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(232)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_17{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",232);
				{
					HX_STACK_LINE(232)
					{
					}
					HX_STACK_LINE(232)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(232)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(232)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(232)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(232)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(232)
						ret->zpp_pool = null();
						HX_STACK_LINE(232)
						ret->zpp_disp = false;
						HX_STACK_LINE(232)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(232)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(232)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",232);
								{
									HX_STACK_LINE(232)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(232)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(232)
									{
										HX_STACK_LINE(232)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(232)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(232)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(232)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(232)
											ret1->next = null();
										}
										HX_STACK_LINE(232)
										ret1->weak = false;
									}
									HX_STACK_LINE(232)
									ret1->_immutable = immutable;
									HX_STACK_LINE(232)
									{
										HX_STACK_LINE(232)
										ret1->x = 26.5;
										HX_STACK_LINE(232)
										ret1->y = (int)14;
										HX_STACK_LINE(232)
										{
										}
										HX_STACK_LINE(232)
										{
										}
									}
									HX_STACK_LINE(232)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(232)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(232)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(232)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(232)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(232)
						{
							HX_STACK_LINE(232)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(232)
							if ((_this->_immutable)){
								HX_STACK_LINE(232)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(232)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(232)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(232)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",232);
								{
									HX_STACK_LINE(232)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(232)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(232)
									{
										HX_STACK_LINE(232)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(232)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(232)
											_this->_validate();
										}
									}
									HX_STACK_LINE(232)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",232);
								{
									HX_STACK_LINE(232)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(232)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(232)
									{
										HX_STACK_LINE(232)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(232)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(232)
											_this->_validate();
										}
									}
									HX_STACK_LINE(232)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(232)
						if ((!(((bool((_Function_3_1::Block(ret) == 26.5)) && bool((_Function_3_2::Block(ret) == (int)14))))))){
							HX_STACK_LINE(232)
							{
								HX_STACK_LINE(232)
								ret->zpp_inner->x = 26.5;
								HX_STACK_LINE(232)
								ret->zpp_inner->y = (int)14;
								HX_STACK_LINE(232)
								{
								}
								HX_STACK_LINE(232)
								{
								}
							}
							HX_STACK_LINE(232)
							{
								HX_STACK_LINE(232)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(232)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(232)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(232)
						ret;
					}
					HX_STACK_LINE(232)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(232)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(231)
		::nape::shape::Polygon s2 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_15::Block()).Add(_Function_1_16::Block()).Add(_Function_1_17::Block())),mat,filt);		HX_STACK_VAR(s2,"s2");
		HX_STACK_LINE(236)
		{
			HX_STACK_LINE(236)
			{
				HX_STACK_LINE(236)
				s2->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(236)
				if (((((  (((s2->zpp_inner->body != null()))) ? ::nape::phys::Body(s2->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body))){
					HX_STACK_LINE(236)
					if (((s2->zpp_inner->body != null()))){
						HX_STACK_LINE(236)
						((  (((s2->zpp_inner->body != null()))) ? ::nape::phys::Body(s2->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s2);
					}
					HX_STACK_LINE(236)
					if (((body != null()))){
						HX_STACK_LINE(236)
						::nape::shape::ShapeList _this = body->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(236)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(236)
							_this->push(s2);
						}
						else{
							HX_STACK_LINE(236)
							_this->unshift(s2);
						}
					}
				}
			}
			HX_STACK_LINE(236)
			if (((s2->zpp_inner->body != null()))){
				HX_STACK_LINE(236)
				s2->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(236)
				Dynamic();
			}
		}
		HX_STACK_LINE(237)
		{
			HX_STACK_LINE(237)
			{
				HX_STACK_LINE(237)
				s2->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(237)
				s2->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(237)
				s2->zpp_inner->wake();
			}
			HX_STACK_LINE(237)
			s2->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(238)
		{
			HX_STACK_LINE(238)
			{
				HX_STACK_LINE(238)
				s2->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(238)
				s2->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(238)
				{
				}
				HX_STACK_LINE(238)
				s2->zpp_inner->wake();
			}
			HX_STACK_LINE(238)
			s2->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(239)
		{
			HX_STACK_LINE(239)
			{
				HX_STACK_LINE(239)
				if (((prop == null()))){
					HX_STACK_LINE(239)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(239)
				s2->zpp_inner->setFluid(prop->zpp_inner);
			}
			HX_STACK_LINE(239)
			{
				HX_STACK_LINE(239)
				s2->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(239)
				if (((s2->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(239)
					s2->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(239)
				s2->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(240)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s2){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",240);
					{
						HX_STACK_LINE(240)
						if (((s2->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(240)
							s2->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(240)
						return s2->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(240)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s2);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(240)
			{
				HX_STACK_LINE(240)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(240)
				while(((_g < _g1->length))){
					HX_STACK_LINE(240)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(240)
					++(_g);
					HX_STACK_LINE(240)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(240)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(240)
						continue;
					}
					HX_STACK_LINE(240)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(240)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(240)
					{
						HX_STACK_LINE(240)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(240)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(240)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(240)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		HX_STACK_LINE(244)
		::nape::phys::Material mat1 = ::nape::phys::Material_obj::__new(null(),null(),null(),null(),null());		HX_STACK_VAR(mat1,"mat1");
		HX_STACK_LINE(245)
		::nape::dynamics::InteractionFilter filt1 = ::nape::dynamics::InteractionFilter_obj::__new(null(),null(),null(),null(),null(),null());		HX_STACK_VAR(filt1,"filt1");
		HX_STACK_LINE(246)
		::nape::phys::FluidProperties prop1 = ::nape::phys::FluidProperties_obj::__new(null(),null());		HX_STACK_VAR(prop1,"prop1");
		struct _Function_1_18{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
				{
					HX_STACK_LINE(251)
					{
					}
					HX_STACK_LINE(251)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(251)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(251)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(251)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(251)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(251)
						ret->zpp_pool = null();
						HX_STACK_LINE(251)
						ret->zpp_disp = false;
						HX_STACK_LINE(251)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(251)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(251)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(251)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(251)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(251)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(251)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(251)
											ret1->next = null();
										}
										HX_STACK_LINE(251)
										ret1->weak = false;
									}
									HX_STACK_LINE(251)
									ret1->_immutable = immutable;
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										ret1->x = 149.5;
										HX_STACK_LINE(251)
										ret1->y = (int)41;
										HX_STACK_LINE(251)
										{
										}
										HX_STACK_LINE(251)
										{
										}
									}
									HX_STACK_LINE(251)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(251)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(251)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(251)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(251)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(251)
						{
							HX_STACK_LINE(251)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(251)
							if ((_this->_immutable)){
								HX_STACK_LINE(251)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(251)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(251)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(251)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(251)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(251)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(251)
											_this->_validate();
										}
									}
									HX_STACK_LINE(251)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(251)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(251)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(251)
											_this->_validate();
										}
									}
									HX_STACK_LINE(251)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(251)
						if ((!(((bool((_Function_3_1::Block(ret) == 149.5)) && bool((_Function_3_2::Block(ret) == (int)41))))))){
							HX_STACK_LINE(251)
							{
								HX_STACK_LINE(251)
								ret->zpp_inner->x = 149.5;
								HX_STACK_LINE(251)
								ret->zpp_inner->y = (int)41;
								HX_STACK_LINE(251)
								{
								}
								HX_STACK_LINE(251)
								{
								}
							}
							HX_STACK_LINE(251)
							{
								HX_STACK_LINE(251)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(251)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(251)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(251)
						ret;
					}
					HX_STACK_LINE(251)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(251)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_19{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
				{
					HX_STACK_LINE(251)
					{
					}
					HX_STACK_LINE(251)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(251)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(251)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(251)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(251)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(251)
						ret->zpp_pool = null();
						HX_STACK_LINE(251)
						ret->zpp_disp = false;
						HX_STACK_LINE(251)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(251)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(251)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(251)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(251)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(251)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(251)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(251)
											ret1->next = null();
										}
										HX_STACK_LINE(251)
										ret1->weak = false;
									}
									HX_STACK_LINE(251)
									ret1->_immutable = immutable;
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										ret1->x = (int)146;
										HX_STACK_LINE(251)
										ret1->y = 35.5;
										HX_STACK_LINE(251)
										{
										}
										HX_STACK_LINE(251)
										{
										}
									}
									HX_STACK_LINE(251)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(251)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(251)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(251)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(251)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(251)
						{
							HX_STACK_LINE(251)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(251)
							if ((_this->_immutable)){
								HX_STACK_LINE(251)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(251)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(251)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(251)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(251)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(251)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(251)
											_this->_validate();
										}
									}
									HX_STACK_LINE(251)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(251)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(251)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(251)
											_this->_validate();
										}
									}
									HX_STACK_LINE(251)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(251)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)146)) && bool((_Function_3_2::Block(ret) == 35.5))))))){
							HX_STACK_LINE(251)
							{
								HX_STACK_LINE(251)
								ret->zpp_inner->x = (int)146;
								HX_STACK_LINE(251)
								ret->zpp_inner->y = 35.5;
								HX_STACK_LINE(251)
								{
								}
								HX_STACK_LINE(251)
								{
								}
							}
							HX_STACK_LINE(251)
							{
								HX_STACK_LINE(251)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(251)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(251)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(251)
						ret;
					}
					HX_STACK_LINE(251)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(251)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_20{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
				{
					HX_STACK_LINE(251)
					{
					}
					HX_STACK_LINE(251)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(251)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(251)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(251)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(251)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(251)
						ret->zpp_pool = null();
						HX_STACK_LINE(251)
						ret->zpp_disp = false;
						HX_STACK_LINE(251)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(251)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(251)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(251)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(251)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(251)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(251)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(251)
											ret1->next = null();
										}
										HX_STACK_LINE(251)
										ret1->weak = false;
									}
									HX_STACK_LINE(251)
									ret1->_immutable = immutable;
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										ret1->x = (int)122;
										HX_STACK_LINE(251)
										ret1->y = 14.5;
										HX_STACK_LINE(251)
										{
										}
										HX_STACK_LINE(251)
										{
										}
									}
									HX_STACK_LINE(251)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(251)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(251)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(251)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(251)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(251)
						{
							HX_STACK_LINE(251)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(251)
							if ((_this->_immutable)){
								HX_STACK_LINE(251)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(251)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(251)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(251)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(251)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(251)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(251)
											_this->_validate();
										}
									}
									HX_STACK_LINE(251)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(251)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(251)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(251)
											_this->_validate();
										}
									}
									HX_STACK_LINE(251)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(251)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)122)) && bool((_Function_3_2::Block(ret) == 14.5))))))){
							HX_STACK_LINE(251)
							{
								HX_STACK_LINE(251)
								ret->zpp_inner->x = (int)122;
								HX_STACK_LINE(251)
								ret->zpp_inner->y = 14.5;
								HX_STACK_LINE(251)
								{
								}
								HX_STACK_LINE(251)
								{
								}
							}
							HX_STACK_LINE(251)
							{
								HX_STACK_LINE(251)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(251)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(251)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(251)
						ret;
					}
					HX_STACK_LINE(251)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(251)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_21{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
				{
					HX_STACK_LINE(251)
					{
					}
					HX_STACK_LINE(251)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(251)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(251)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(251)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(251)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(251)
						ret->zpp_pool = null();
						HX_STACK_LINE(251)
						ret->zpp_disp = false;
						HX_STACK_LINE(251)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(251)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(251)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(251)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(251)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(251)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(251)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(251)
											ret1->next = null();
										}
										HX_STACK_LINE(251)
										ret1->weak = false;
									}
									HX_STACK_LINE(251)
									ret1->_immutable = immutable;
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										ret1->x = (int)90;
										HX_STACK_LINE(251)
										ret1->y = 1.5;
										HX_STACK_LINE(251)
										{
										}
										HX_STACK_LINE(251)
										{
										}
									}
									HX_STACK_LINE(251)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(251)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(251)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(251)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(251)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(251)
						{
							HX_STACK_LINE(251)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(251)
							if ((_this->_immutable)){
								HX_STACK_LINE(251)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(251)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(251)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(251)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(251)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(251)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(251)
											_this->_validate();
										}
									}
									HX_STACK_LINE(251)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(251)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(251)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(251)
											_this->_validate();
										}
									}
									HX_STACK_LINE(251)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(251)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)90)) && bool((_Function_3_2::Block(ret) == 1.5))))))){
							HX_STACK_LINE(251)
							{
								HX_STACK_LINE(251)
								ret->zpp_inner->x = (int)90;
								HX_STACK_LINE(251)
								ret->zpp_inner->y = 1.5;
								HX_STACK_LINE(251)
								{
								}
								HX_STACK_LINE(251)
								{
								}
							}
							HX_STACK_LINE(251)
							{
								HX_STACK_LINE(251)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(251)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(251)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(251)
						ret;
					}
					HX_STACK_LINE(251)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(251)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_22{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
				{
					HX_STACK_LINE(251)
					{
					}
					HX_STACK_LINE(251)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(251)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(251)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(251)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(251)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(251)
						ret->zpp_pool = null();
						HX_STACK_LINE(251)
						ret->zpp_disp = false;
						HX_STACK_LINE(251)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(251)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(251)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(251)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(251)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(251)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(251)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(251)
											ret1->next = null();
										}
										HX_STACK_LINE(251)
										ret1->weak = false;
									}
									HX_STACK_LINE(251)
									ret1->_immutable = immutable;
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										ret1->x = (int)66;
										HX_STACK_LINE(251)
										ret1->y = 0.5;
										HX_STACK_LINE(251)
										{
										}
										HX_STACK_LINE(251)
										{
										}
									}
									HX_STACK_LINE(251)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(251)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(251)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(251)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(251)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(251)
						{
							HX_STACK_LINE(251)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(251)
							if ((_this->_immutable)){
								HX_STACK_LINE(251)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(251)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(251)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(251)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(251)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(251)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(251)
											_this->_validate();
										}
									}
									HX_STACK_LINE(251)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(251)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(251)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(251)
											_this->_validate();
										}
									}
									HX_STACK_LINE(251)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(251)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)66)) && bool((_Function_3_2::Block(ret) == 0.5))))))){
							HX_STACK_LINE(251)
							{
								HX_STACK_LINE(251)
								ret->zpp_inner->x = (int)66;
								HX_STACK_LINE(251)
								ret->zpp_inner->y = 0.5;
								HX_STACK_LINE(251)
								{
								}
								HX_STACK_LINE(251)
								{
								}
							}
							HX_STACK_LINE(251)
							{
								HX_STACK_LINE(251)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(251)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(251)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(251)
						ret;
					}
					HX_STACK_LINE(251)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(251)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_23{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
				{
					HX_STACK_LINE(251)
					{
					}
					HX_STACK_LINE(251)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(251)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(251)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(251)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(251)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(251)
						ret->zpp_pool = null();
						HX_STACK_LINE(251)
						ret->zpp_disp = false;
						HX_STACK_LINE(251)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(251)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(251)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(251)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(251)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(251)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(251)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(251)
											ret1->next = null();
										}
										HX_STACK_LINE(251)
										ret1->weak = false;
									}
									HX_STACK_LINE(251)
									ret1->_immutable = immutable;
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										ret1->x = (int)65;
										HX_STACK_LINE(251)
										ret1->y = 0.5;
										HX_STACK_LINE(251)
										{
										}
										HX_STACK_LINE(251)
										{
										}
									}
									HX_STACK_LINE(251)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(251)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(251)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(251)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(251)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(251)
						{
							HX_STACK_LINE(251)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(251)
							if ((_this->_immutable)){
								HX_STACK_LINE(251)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(251)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(251)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(251)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(251)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(251)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(251)
											_this->_validate();
										}
									}
									HX_STACK_LINE(251)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(251)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(251)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(251)
											_this->_validate();
										}
									}
									HX_STACK_LINE(251)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(251)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)65)) && bool((_Function_3_2::Block(ret) == 0.5))))))){
							HX_STACK_LINE(251)
							{
								HX_STACK_LINE(251)
								ret->zpp_inner->x = (int)65;
								HX_STACK_LINE(251)
								ret->zpp_inner->y = 0.5;
								HX_STACK_LINE(251)
								{
								}
								HX_STACK_LINE(251)
								{
								}
							}
							HX_STACK_LINE(251)
							{
								HX_STACK_LINE(251)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(251)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(251)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(251)
						ret;
					}
					HX_STACK_LINE(251)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(251)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_24{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
				{
					HX_STACK_LINE(251)
					{
					}
					HX_STACK_LINE(251)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(251)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(251)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(251)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(251)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(251)
						ret->zpp_pool = null();
						HX_STACK_LINE(251)
						ret->zpp_disp = false;
						HX_STACK_LINE(251)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(251)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(251)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(251)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(251)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(251)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(251)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(251)
											ret1->next = null();
										}
										HX_STACK_LINE(251)
										ret1->weak = false;
									}
									HX_STACK_LINE(251)
									ret1->_immutable = immutable;
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										ret1->x = (int)49;
										HX_STACK_LINE(251)
										ret1->y = 3.5;
										HX_STACK_LINE(251)
										{
										}
										HX_STACK_LINE(251)
										{
										}
									}
									HX_STACK_LINE(251)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(251)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(251)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(251)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(251)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(251)
						{
							HX_STACK_LINE(251)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(251)
							if ((_this->_immutable)){
								HX_STACK_LINE(251)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(251)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(251)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(251)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(251)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(251)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(251)
											_this->_validate();
										}
									}
									HX_STACK_LINE(251)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(251)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(251)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(251)
											_this->_validate();
										}
									}
									HX_STACK_LINE(251)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(251)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)49)) && bool((_Function_3_2::Block(ret) == 3.5))))))){
							HX_STACK_LINE(251)
							{
								HX_STACK_LINE(251)
								ret->zpp_inner->x = (int)49;
								HX_STACK_LINE(251)
								ret->zpp_inner->y = 3.5;
								HX_STACK_LINE(251)
								{
								}
								HX_STACK_LINE(251)
								{
								}
							}
							HX_STACK_LINE(251)
							{
								HX_STACK_LINE(251)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(251)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(251)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(251)
						ret;
					}
					HX_STACK_LINE(251)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(251)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_25{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
				{
					HX_STACK_LINE(251)
					{
					}
					HX_STACK_LINE(251)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(251)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(251)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(251)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(251)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(251)
						ret->zpp_pool = null();
						HX_STACK_LINE(251)
						ret->zpp_disp = false;
						HX_STACK_LINE(251)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(251)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(251)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(251)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(251)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(251)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(251)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(251)
											ret1->next = null();
										}
										HX_STACK_LINE(251)
										ret1->weak = false;
									}
									HX_STACK_LINE(251)
									ret1->_immutable = immutable;
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										ret1->x = 146.5;
										HX_STACK_LINE(251)
										ret1->y = (int)51;
										HX_STACK_LINE(251)
										{
										}
										HX_STACK_LINE(251)
										{
										}
									}
									HX_STACK_LINE(251)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(251)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(251)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(251)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(251)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(251)
						{
							HX_STACK_LINE(251)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(251)
							if ((_this->_immutable)){
								HX_STACK_LINE(251)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(251)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(251)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(251)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(251)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(251)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(251)
											_this->_validate();
										}
									}
									HX_STACK_LINE(251)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",251);
								{
									HX_STACK_LINE(251)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(251)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(251)
									{
										HX_STACK_LINE(251)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(251)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(251)
											_this->_validate();
										}
									}
									HX_STACK_LINE(251)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(251)
						if ((!(((bool((_Function_3_1::Block(ret) == 146.5)) && bool((_Function_3_2::Block(ret) == (int)51))))))){
							HX_STACK_LINE(251)
							{
								HX_STACK_LINE(251)
								ret->zpp_inner->x = 146.5;
								HX_STACK_LINE(251)
								ret->zpp_inner->y = (int)51;
								HX_STACK_LINE(251)
								{
								}
								HX_STACK_LINE(251)
								{
								}
							}
							HX_STACK_LINE(251)
							{
								HX_STACK_LINE(251)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(251)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(251)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(251)
						ret;
					}
					HX_STACK_LINE(251)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(251)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(250)
		::nape::shape::Polygon s3 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_18::Block()).Add(_Function_1_19::Block()).Add(_Function_1_20::Block()).Add(_Function_1_21::Block()).Add(_Function_1_22::Block()).Add(_Function_1_23::Block()).Add(_Function_1_24::Block()).Add(_Function_1_25::Block())),mat1,filt1);		HX_STACK_VAR(s3,"s3");
		HX_STACK_LINE(255)
		{
			HX_STACK_LINE(255)
			{
				HX_STACK_LINE(255)
				s3->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(255)
				if (((((  (((s3->zpp_inner->body != null()))) ? ::nape::phys::Body(s3->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body))){
					HX_STACK_LINE(255)
					if (((s3->zpp_inner->body != null()))){
						HX_STACK_LINE(255)
						((  (((s3->zpp_inner->body != null()))) ? ::nape::phys::Body(s3->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s3);
					}
					HX_STACK_LINE(255)
					if (((body != null()))){
						HX_STACK_LINE(255)
						::nape::shape::ShapeList _this = body->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(255)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(255)
							_this->push(s3);
						}
						else{
							HX_STACK_LINE(255)
							_this->unshift(s3);
						}
					}
				}
			}
			HX_STACK_LINE(255)
			if (((s3->zpp_inner->body != null()))){
				HX_STACK_LINE(255)
				s3->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(255)
				Dynamic();
			}
		}
		HX_STACK_LINE(256)
		{
			HX_STACK_LINE(256)
			{
				HX_STACK_LINE(256)
				s3->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(256)
				s3->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(256)
				s3->zpp_inner->wake();
			}
			HX_STACK_LINE(256)
			s3->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(257)
		{
			HX_STACK_LINE(257)
			{
				HX_STACK_LINE(257)
				s3->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(257)
				s3->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(257)
				{
				}
				HX_STACK_LINE(257)
				s3->zpp_inner->wake();
			}
			HX_STACK_LINE(257)
			s3->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(258)
		{
			HX_STACK_LINE(258)
			{
				HX_STACK_LINE(258)
				if (((prop1 == null()))){
					HX_STACK_LINE(258)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(258)
				s3->zpp_inner->setFluid(prop1->zpp_inner);
			}
			HX_STACK_LINE(258)
			{
				HX_STACK_LINE(258)
				s3->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(258)
				if (((s3->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(258)
					s3->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(258)
				s3->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(259)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s3){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",259);
					{
						HX_STACK_LINE(259)
						if (((s3->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(259)
							s3->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(259)
						return s3->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(259)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s3);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(259)
			{
				HX_STACK_LINE(259)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(259)
				while(((_g < _g1->length))){
					HX_STACK_LINE(259)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(259)
					++(_g);
					HX_STACK_LINE(259)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(259)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(259)
						continue;
					}
					HX_STACK_LINE(259)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(259)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(259)
					{
						HX_STACK_LINE(259)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(259)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(259)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(259)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_26{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
				{
					HX_STACK_LINE(262)
					{
					}
					HX_STACK_LINE(262)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(262)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(262)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(262)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(262)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(262)
						ret->zpp_pool = null();
						HX_STACK_LINE(262)
						ret->zpp_disp = false;
						HX_STACK_LINE(262)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(262)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(262)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(262)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(262)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(262)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(262)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(262)
											ret1->next = null();
										}
										HX_STACK_LINE(262)
										ret1->weak = false;
									}
									HX_STACK_LINE(262)
									ret1->_immutable = immutable;
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										ret1->x = 1.5;
										HX_STACK_LINE(262)
										ret1->y = (int)47;
										HX_STACK_LINE(262)
										{
										}
										HX_STACK_LINE(262)
										{
										}
									}
									HX_STACK_LINE(262)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(262)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(262)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(262)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(262)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(262)
						{
							HX_STACK_LINE(262)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(262)
							if ((_this->_immutable)){
								HX_STACK_LINE(262)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(262)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(262)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(262)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(262)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(262)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(262)
											_this->_validate();
										}
									}
									HX_STACK_LINE(262)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(262)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(262)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(262)
											_this->_validate();
										}
									}
									HX_STACK_LINE(262)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(262)
						if ((!(((bool((_Function_3_1::Block(ret) == 1.5)) && bool((_Function_3_2::Block(ret) == (int)47))))))){
							HX_STACK_LINE(262)
							{
								HX_STACK_LINE(262)
								ret->zpp_inner->x = 1.5;
								HX_STACK_LINE(262)
								ret->zpp_inner->y = (int)47;
								HX_STACK_LINE(262)
								{
								}
								HX_STACK_LINE(262)
								{
								}
							}
							HX_STACK_LINE(262)
							{
								HX_STACK_LINE(262)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(262)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(262)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(262)
						ret;
					}
					HX_STACK_LINE(262)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(262)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_27{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
				{
					HX_STACK_LINE(262)
					{
					}
					HX_STACK_LINE(262)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(262)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(262)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(262)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(262)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(262)
						ret->zpp_pool = null();
						HX_STACK_LINE(262)
						ret->zpp_disp = false;
						HX_STACK_LINE(262)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(262)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(262)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(262)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(262)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(262)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(262)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(262)
											ret1->next = null();
										}
										HX_STACK_LINE(262)
										ret1->weak = false;
									}
									HX_STACK_LINE(262)
									ret1->_immutable = immutable;
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										ret1->x = (int)7;
										HX_STACK_LINE(262)
										ret1->y = 53.5;
										HX_STACK_LINE(262)
										{
										}
										HX_STACK_LINE(262)
										{
										}
									}
									HX_STACK_LINE(262)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(262)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(262)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(262)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(262)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(262)
						{
							HX_STACK_LINE(262)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(262)
							if ((_this->_immutable)){
								HX_STACK_LINE(262)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(262)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(262)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(262)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(262)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(262)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(262)
											_this->_validate();
										}
									}
									HX_STACK_LINE(262)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(262)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(262)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(262)
											_this->_validate();
										}
									}
									HX_STACK_LINE(262)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(262)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)7)) && bool((_Function_3_2::Block(ret) == 53.5))))))){
							HX_STACK_LINE(262)
							{
								HX_STACK_LINE(262)
								ret->zpp_inner->x = (int)7;
								HX_STACK_LINE(262)
								ret->zpp_inner->y = 53.5;
								HX_STACK_LINE(262)
								{
								}
								HX_STACK_LINE(262)
								{
								}
							}
							HX_STACK_LINE(262)
							{
								HX_STACK_LINE(262)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(262)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(262)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(262)
						ret;
					}
					HX_STACK_LINE(262)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(262)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_28{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
				{
					HX_STACK_LINE(262)
					{
					}
					HX_STACK_LINE(262)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(262)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(262)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(262)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(262)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(262)
						ret->zpp_pool = null();
						HX_STACK_LINE(262)
						ret->zpp_disp = false;
						HX_STACK_LINE(262)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(262)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(262)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(262)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(262)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(262)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(262)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(262)
											ret1->next = null();
										}
										HX_STACK_LINE(262)
										ret1->weak = false;
									}
									HX_STACK_LINE(262)
									ret1->_immutable = immutable;
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										ret1->x = (int)30;
										HX_STACK_LINE(262)
										ret1->y = 72.5;
										HX_STACK_LINE(262)
										{
										}
										HX_STACK_LINE(262)
										{
										}
									}
									HX_STACK_LINE(262)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(262)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(262)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(262)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(262)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(262)
						{
							HX_STACK_LINE(262)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(262)
							if ((_this->_immutable)){
								HX_STACK_LINE(262)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(262)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(262)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(262)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(262)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(262)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(262)
											_this->_validate();
										}
									}
									HX_STACK_LINE(262)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(262)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(262)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(262)
											_this->_validate();
										}
									}
									HX_STACK_LINE(262)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(262)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)30)) && bool((_Function_3_2::Block(ret) == 72.5))))))){
							HX_STACK_LINE(262)
							{
								HX_STACK_LINE(262)
								ret->zpp_inner->x = (int)30;
								HX_STACK_LINE(262)
								ret->zpp_inner->y = 72.5;
								HX_STACK_LINE(262)
								{
								}
								HX_STACK_LINE(262)
								{
								}
							}
							HX_STACK_LINE(262)
							{
								HX_STACK_LINE(262)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(262)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(262)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(262)
						ret;
					}
					HX_STACK_LINE(262)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(262)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_29{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
				{
					HX_STACK_LINE(262)
					{
					}
					HX_STACK_LINE(262)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(262)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(262)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(262)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(262)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(262)
						ret->zpp_pool = null();
						HX_STACK_LINE(262)
						ret->zpp_disp = false;
						HX_STACK_LINE(262)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(262)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(262)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(262)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(262)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(262)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(262)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(262)
											ret1->next = null();
										}
										HX_STACK_LINE(262)
										ret1->weak = false;
									}
									HX_STACK_LINE(262)
									ret1->_immutable = immutable;
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										ret1->x = (int)60;
										HX_STACK_LINE(262)
										ret1->y = 83.5;
										HX_STACK_LINE(262)
										{
										}
										HX_STACK_LINE(262)
										{
										}
									}
									HX_STACK_LINE(262)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(262)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(262)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(262)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(262)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(262)
						{
							HX_STACK_LINE(262)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(262)
							if ((_this->_immutable)){
								HX_STACK_LINE(262)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(262)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(262)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(262)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(262)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(262)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(262)
											_this->_validate();
										}
									}
									HX_STACK_LINE(262)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(262)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(262)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(262)
											_this->_validate();
										}
									}
									HX_STACK_LINE(262)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(262)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)60)) && bool((_Function_3_2::Block(ret) == 83.5))))))){
							HX_STACK_LINE(262)
							{
								HX_STACK_LINE(262)
								ret->zpp_inner->x = (int)60;
								HX_STACK_LINE(262)
								ret->zpp_inner->y = 83.5;
								HX_STACK_LINE(262)
								{
								}
								HX_STACK_LINE(262)
								{
								}
							}
							HX_STACK_LINE(262)
							{
								HX_STACK_LINE(262)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(262)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(262)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(262)
						ret;
					}
					HX_STACK_LINE(262)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(262)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_30{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
				{
					HX_STACK_LINE(262)
					{
					}
					HX_STACK_LINE(262)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(262)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(262)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(262)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(262)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(262)
						ret->zpp_pool = null();
						HX_STACK_LINE(262)
						ret->zpp_disp = false;
						HX_STACK_LINE(262)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(262)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(262)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(262)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(262)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(262)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(262)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(262)
											ret1->next = null();
										}
										HX_STACK_LINE(262)
										ret1->weak = false;
									}
									HX_STACK_LINE(262)
									ret1->_immutable = immutable;
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										ret1->x = (int)92;
										HX_STACK_LINE(262)
										ret1->y = 83.5;
										HX_STACK_LINE(262)
										{
										}
										HX_STACK_LINE(262)
										{
										}
									}
									HX_STACK_LINE(262)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(262)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(262)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(262)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(262)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(262)
						{
							HX_STACK_LINE(262)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(262)
							if ((_this->_immutable)){
								HX_STACK_LINE(262)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(262)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(262)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(262)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(262)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(262)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(262)
											_this->_validate();
										}
									}
									HX_STACK_LINE(262)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(262)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(262)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(262)
											_this->_validate();
										}
									}
									HX_STACK_LINE(262)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(262)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)92)) && bool((_Function_3_2::Block(ret) == 83.5))))))){
							HX_STACK_LINE(262)
							{
								HX_STACK_LINE(262)
								ret->zpp_inner->x = (int)92;
								HX_STACK_LINE(262)
								ret->zpp_inner->y = 83.5;
								HX_STACK_LINE(262)
								{
								}
								HX_STACK_LINE(262)
								{
								}
							}
							HX_STACK_LINE(262)
							{
								HX_STACK_LINE(262)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(262)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(262)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(262)
						ret;
					}
					HX_STACK_LINE(262)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(262)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_31{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
				{
					HX_STACK_LINE(262)
					{
					}
					HX_STACK_LINE(262)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(262)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(262)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(262)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(262)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(262)
						ret->zpp_pool = null();
						HX_STACK_LINE(262)
						ret->zpp_disp = false;
						HX_STACK_LINE(262)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(262)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(262)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(262)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(262)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(262)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(262)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(262)
											ret1->next = null();
										}
										HX_STACK_LINE(262)
										ret1->weak = false;
									}
									HX_STACK_LINE(262)
									ret1->_immutable = immutable;
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										ret1->x = (int)49;
										HX_STACK_LINE(262)
										ret1->y = 3.5;
										HX_STACK_LINE(262)
										{
										}
										HX_STACK_LINE(262)
										{
										}
									}
									HX_STACK_LINE(262)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(262)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(262)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(262)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(262)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(262)
						{
							HX_STACK_LINE(262)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(262)
							if ((_this->_immutable)){
								HX_STACK_LINE(262)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(262)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(262)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(262)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(262)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(262)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(262)
											_this->_validate();
										}
									}
									HX_STACK_LINE(262)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(262)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(262)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(262)
											_this->_validate();
										}
									}
									HX_STACK_LINE(262)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(262)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)49)) && bool((_Function_3_2::Block(ret) == 3.5))))))){
							HX_STACK_LINE(262)
							{
								HX_STACK_LINE(262)
								ret->zpp_inner->x = (int)49;
								HX_STACK_LINE(262)
								ret->zpp_inner->y = 3.5;
								HX_STACK_LINE(262)
								{
								}
								HX_STACK_LINE(262)
								{
								}
							}
							HX_STACK_LINE(262)
							{
								HX_STACK_LINE(262)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(262)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(262)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(262)
						ret;
					}
					HX_STACK_LINE(262)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(262)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_32{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
				{
					HX_STACK_LINE(262)
					{
					}
					HX_STACK_LINE(262)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(262)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(262)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(262)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(262)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(262)
						ret->zpp_pool = null();
						HX_STACK_LINE(262)
						ret->zpp_disp = false;
						HX_STACK_LINE(262)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(262)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(262)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(262)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(262)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(262)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(262)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(262)
											ret1->next = null();
										}
										HX_STACK_LINE(262)
										ret1->weak = false;
									}
									HX_STACK_LINE(262)
									ret1->_immutable = immutable;
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										ret1->x = 26.5;
										HX_STACK_LINE(262)
										ret1->y = (int)14;
										HX_STACK_LINE(262)
										{
										}
										HX_STACK_LINE(262)
										{
										}
									}
									HX_STACK_LINE(262)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(262)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(262)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(262)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(262)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(262)
						{
							HX_STACK_LINE(262)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(262)
							if ((_this->_immutable)){
								HX_STACK_LINE(262)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(262)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(262)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(262)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(262)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(262)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(262)
											_this->_validate();
										}
									}
									HX_STACK_LINE(262)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(262)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(262)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(262)
											_this->_validate();
										}
									}
									HX_STACK_LINE(262)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(262)
						if ((!(((bool((_Function_3_1::Block(ret) == 26.5)) && bool((_Function_3_2::Block(ret) == (int)14))))))){
							HX_STACK_LINE(262)
							{
								HX_STACK_LINE(262)
								ret->zpp_inner->x = 26.5;
								HX_STACK_LINE(262)
								ret->zpp_inner->y = (int)14;
								HX_STACK_LINE(262)
								{
								}
								HX_STACK_LINE(262)
								{
								}
							}
							HX_STACK_LINE(262)
							{
								HX_STACK_LINE(262)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(262)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(262)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(262)
						ret;
					}
					HX_STACK_LINE(262)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(262)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_33{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
				{
					HX_STACK_LINE(262)
					{
					}
					HX_STACK_LINE(262)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(262)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(262)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(262)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(262)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(262)
						ret->zpp_pool = null();
						HX_STACK_LINE(262)
						ret->zpp_disp = false;
						HX_STACK_LINE(262)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(262)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(262)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(262)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(262)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(262)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(262)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(262)
											ret1->next = null();
										}
										HX_STACK_LINE(262)
										ret1->weak = false;
									}
									HX_STACK_LINE(262)
									ret1->_immutable = immutable;
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										ret1->x = 0.5;
										HX_STACK_LINE(262)
										ret1->y = (int)39;
										HX_STACK_LINE(262)
										{
										}
										HX_STACK_LINE(262)
										{
										}
									}
									HX_STACK_LINE(262)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(262)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(262)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(262)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(262)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(262)
						{
							HX_STACK_LINE(262)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(262)
							if ((_this->_immutable)){
								HX_STACK_LINE(262)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(262)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(262)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(262)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(262)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(262)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(262)
											_this->_validate();
										}
									}
									HX_STACK_LINE(262)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",262);
								{
									HX_STACK_LINE(262)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(262)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(262)
									{
										HX_STACK_LINE(262)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(262)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(262)
											_this->_validate();
										}
									}
									HX_STACK_LINE(262)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(262)
						if ((!(((bool((_Function_3_1::Block(ret) == 0.5)) && bool((_Function_3_2::Block(ret) == (int)39))))))){
							HX_STACK_LINE(262)
							{
								HX_STACK_LINE(262)
								ret->zpp_inner->x = 0.5;
								HX_STACK_LINE(262)
								ret->zpp_inner->y = (int)39;
								HX_STACK_LINE(262)
								{
								}
								HX_STACK_LINE(262)
								{
								}
							}
							HX_STACK_LINE(262)
							{
								HX_STACK_LINE(262)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(262)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(262)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(262)
						ret;
					}
					HX_STACK_LINE(262)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(262)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(261)
		::nape::shape::Polygon s4 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_26::Block()).Add(_Function_1_27::Block()).Add(_Function_1_28::Block()).Add(_Function_1_29::Block()).Add(_Function_1_30::Block()).Add(_Function_1_31::Block()).Add(_Function_1_32::Block()).Add(_Function_1_33::Block())),mat1,filt1);		HX_STACK_VAR(s4,"s4");
		HX_STACK_LINE(266)
		{
			HX_STACK_LINE(266)
			{
				HX_STACK_LINE(266)
				s4->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(266)
				if (((((  (((s4->zpp_inner->body != null()))) ? ::nape::phys::Body(s4->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body))){
					HX_STACK_LINE(266)
					if (((s4->zpp_inner->body != null()))){
						HX_STACK_LINE(266)
						((  (((s4->zpp_inner->body != null()))) ? ::nape::phys::Body(s4->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s4);
					}
					HX_STACK_LINE(266)
					if (((body != null()))){
						HX_STACK_LINE(266)
						::nape::shape::ShapeList _this = body->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(266)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(266)
							_this->push(s4);
						}
						else{
							HX_STACK_LINE(266)
							_this->unshift(s4);
						}
					}
				}
			}
			HX_STACK_LINE(266)
			if (((s4->zpp_inner->body != null()))){
				HX_STACK_LINE(266)
				s4->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(266)
				Dynamic();
			}
		}
		HX_STACK_LINE(267)
		{
			HX_STACK_LINE(267)
			{
				HX_STACK_LINE(267)
				s4->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(267)
				s4->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(267)
				s4->zpp_inner->wake();
			}
			HX_STACK_LINE(267)
			s4->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(268)
		{
			HX_STACK_LINE(268)
			{
				HX_STACK_LINE(268)
				s4->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(268)
				s4->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(268)
				{
				}
				HX_STACK_LINE(268)
				s4->zpp_inner->wake();
			}
			HX_STACK_LINE(268)
			s4->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(269)
		{
			HX_STACK_LINE(269)
			{
				HX_STACK_LINE(269)
				if (((prop1 == null()))){
					HX_STACK_LINE(269)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(269)
				s4->zpp_inner->setFluid(prop1->zpp_inner);
			}
			HX_STACK_LINE(269)
			{
				HX_STACK_LINE(269)
				s4->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(269)
				if (((s4->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(269)
					s4->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(269)
				s4->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(270)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s4){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",270);
					{
						HX_STACK_LINE(270)
						if (((s4->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(270)
							s4->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(270)
						return s4->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(270)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s4);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(270)
			{
				HX_STACK_LINE(270)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(270)
				while(((_g < _g1->length))){
					HX_STACK_LINE(270)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(270)
					++(_g);
					HX_STACK_LINE(270)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(270)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(270)
						continue;
					}
					HX_STACK_LINE(270)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(270)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(270)
					{
						HX_STACK_LINE(270)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(270)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(270)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(270)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_34{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",273);
				{
					HX_STACK_LINE(273)
					{
					}
					HX_STACK_LINE(273)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(273)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(273)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(273)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(273)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(273)
						ret->zpp_pool = null();
						HX_STACK_LINE(273)
						ret->zpp_disp = false;
						HX_STACK_LINE(273)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(273)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(273)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",273);
								{
									HX_STACK_LINE(273)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(273)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(273)
									{
										HX_STACK_LINE(273)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(273)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(273)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(273)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(273)
											ret1->next = null();
										}
										HX_STACK_LINE(273)
										ret1->weak = false;
									}
									HX_STACK_LINE(273)
									ret1->_immutable = immutable;
									HX_STACK_LINE(273)
									{
										HX_STACK_LINE(273)
										ret1->x = (int)92;
										HX_STACK_LINE(273)
										ret1->y = 83.5;
										HX_STACK_LINE(273)
										{
										}
										HX_STACK_LINE(273)
										{
										}
									}
									HX_STACK_LINE(273)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(273)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(273)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(273)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(273)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(273)
						{
							HX_STACK_LINE(273)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(273)
							if ((_this->_immutable)){
								HX_STACK_LINE(273)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(273)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(273)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(273)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",273);
								{
									HX_STACK_LINE(273)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(273)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(273)
									{
										HX_STACK_LINE(273)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(273)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(273)
											_this->_validate();
										}
									}
									HX_STACK_LINE(273)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",273);
								{
									HX_STACK_LINE(273)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(273)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(273)
									{
										HX_STACK_LINE(273)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(273)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(273)
											_this->_validate();
										}
									}
									HX_STACK_LINE(273)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(273)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)92)) && bool((_Function_3_2::Block(ret) == 83.5))))))){
							HX_STACK_LINE(273)
							{
								HX_STACK_LINE(273)
								ret->zpp_inner->x = (int)92;
								HX_STACK_LINE(273)
								ret->zpp_inner->y = 83.5;
								HX_STACK_LINE(273)
								{
								}
								HX_STACK_LINE(273)
								{
								}
							}
							HX_STACK_LINE(273)
							{
								HX_STACK_LINE(273)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(273)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(273)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(273)
						ret;
					}
					HX_STACK_LINE(273)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(273)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_35{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",273);
				{
					HX_STACK_LINE(273)
					{
					}
					HX_STACK_LINE(273)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(273)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(273)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(273)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(273)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(273)
						ret->zpp_pool = null();
						HX_STACK_LINE(273)
						ret->zpp_disp = false;
						HX_STACK_LINE(273)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(273)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(273)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",273);
								{
									HX_STACK_LINE(273)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(273)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(273)
									{
										HX_STACK_LINE(273)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(273)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(273)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(273)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(273)
											ret1->next = null();
										}
										HX_STACK_LINE(273)
										ret1->weak = false;
									}
									HX_STACK_LINE(273)
									ret1->_immutable = immutable;
									HX_STACK_LINE(273)
									{
										HX_STACK_LINE(273)
										ret1->x = 120.5;
										HX_STACK_LINE(273)
										ret1->y = (int)73;
										HX_STACK_LINE(273)
										{
										}
										HX_STACK_LINE(273)
										{
										}
									}
									HX_STACK_LINE(273)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(273)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(273)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(273)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(273)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(273)
						{
							HX_STACK_LINE(273)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(273)
							if ((_this->_immutable)){
								HX_STACK_LINE(273)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(273)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(273)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(273)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",273);
								{
									HX_STACK_LINE(273)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(273)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(273)
									{
										HX_STACK_LINE(273)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(273)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(273)
											_this->_validate();
										}
									}
									HX_STACK_LINE(273)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",273);
								{
									HX_STACK_LINE(273)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(273)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(273)
									{
										HX_STACK_LINE(273)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(273)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(273)
											_this->_validate();
										}
									}
									HX_STACK_LINE(273)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(273)
						if ((!(((bool((_Function_3_1::Block(ret) == 120.5)) && bool((_Function_3_2::Block(ret) == (int)73))))))){
							HX_STACK_LINE(273)
							{
								HX_STACK_LINE(273)
								ret->zpp_inner->x = 120.5;
								HX_STACK_LINE(273)
								ret->zpp_inner->y = (int)73;
								HX_STACK_LINE(273)
								{
								}
								HX_STACK_LINE(273)
								{
								}
							}
							HX_STACK_LINE(273)
							{
								HX_STACK_LINE(273)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(273)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(273)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(273)
						ret;
					}
					HX_STACK_LINE(273)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(273)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_36{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",273);
				{
					HX_STACK_LINE(273)
					{
					}
					HX_STACK_LINE(273)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(273)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(273)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(273)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(273)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(273)
						ret->zpp_pool = null();
						HX_STACK_LINE(273)
						ret->zpp_disp = false;
						HX_STACK_LINE(273)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(273)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(273)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",273);
								{
									HX_STACK_LINE(273)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(273)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(273)
									{
										HX_STACK_LINE(273)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(273)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(273)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(273)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(273)
											ret1->next = null();
										}
										HX_STACK_LINE(273)
										ret1->weak = false;
									}
									HX_STACK_LINE(273)
									ret1->_immutable = immutable;
									HX_STACK_LINE(273)
									{
										HX_STACK_LINE(273)
										ret1->x = 146.5;
										HX_STACK_LINE(273)
										ret1->y = (int)51;
										HX_STACK_LINE(273)
										{
										}
										HX_STACK_LINE(273)
										{
										}
									}
									HX_STACK_LINE(273)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(273)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(273)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(273)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(273)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(273)
						{
							HX_STACK_LINE(273)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(273)
							if ((_this->_immutable)){
								HX_STACK_LINE(273)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(273)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(273)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(273)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",273);
								{
									HX_STACK_LINE(273)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(273)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(273)
									{
										HX_STACK_LINE(273)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(273)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(273)
											_this->_validate();
										}
									}
									HX_STACK_LINE(273)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",273);
								{
									HX_STACK_LINE(273)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(273)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(273)
									{
										HX_STACK_LINE(273)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(273)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(273)
											_this->_validate();
										}
									}
									HX_STACK_LINE(273)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(273)
						if ((!(((bool((_Function_3_1::Block(ret) == 146.5)) && bool((_Function_3_2::Block(ret) == (int)51))))))){
							HX_STACK_LINE(273)
							{
								HX_STACK_LINE(273)
								ret->zpp_inner->x = 146.5;
								HX_STACK_LINE(273)
								ret->zpp_inner->y = (int)51;
								HX_STACK_LINE(273)
								{
								}
								HX_STACK_LINE(273)
								{
								}
							}
							HX_STACK_LINE(273)
							{
								HX_STACK_LINE(273)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(273)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(273)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(273)
						ret;
					}
					HX_STACK_LINE(273)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(273)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_37{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",273);
				{
					HX_STACK_LINE(273)
					{
					}
					HX_STACK_LINE(273)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(273)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(273)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(273)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(273)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(273)
						ret->zpp_pool = null();
						HX_STACK_LINE(273)
						ret->zpp_disp = false;
						HX_STACK_LINE(273)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(273)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(273)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",273);
								{
									HX_STACK_LINE(273)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(273)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(273)
									{
										HX_STACK_LINE(273)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(273)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(273)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(273)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(273)
											ret1->next = null();
										}
										HX_STACK_LINE(273)
										ret1->weak = false;
									}
									HX_STACK_LINE(273)
									ret1->_immutable = immutable;
									HX_STACK_LINE(273)
									{
										HX_STACK_LINE(273)
										ret1->x = (int)49;
										HX_STACK_LINE(273)
										ret1->y = 3.5;
										HX_STACK_LINE(273)
										{
										}
										HX_STACK_LINE(273)
										{
										}
									}
									HX_STACK_LINE(273)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(273)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(273)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(273)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(273)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(273)
						{
							HX_STACK_LINE(273)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(273)
							if ((_this->_immutable)){
								HX_STACK_LINE(273)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(273)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(273)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(273)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",273);
								{
									HX_STACK_LINE(273)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(273)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(273)
									{
										HX_STACK_LINE(273)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(273)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(273)
											_this->_validate();
										}
									}
									HX_STACK_LINE(273)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",273);
								{
									HX_STACK_LINE(273)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(273)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(273)
									{
										HX_STACK_LINE(273)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(273)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(273)
											_this->_validate();
										}
									}
									HX_STACK_LINE(273)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(273)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)49)) && bool((_Function_3_2::Block(ret) == 3.5))))))){
							HX_STACK_LINE(273)
							{
								HX_STACK_LINE(273)
								ret->zpp_inner->x = (int)49;
								HX_STACK_LINE(273)
								ret->zpp_inner->y = 3.5;
								HX_STACK_LINE(273)
								{
								}
								HX_STACK_LINE(273)
								{
								}
							}
							HX_STACK_LINE(273)
							{
								HX_STACK_LINE(273)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(273)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(273)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(273)
						ret;
					}
					HX_STACK_LINE(273)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(273)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(272)
		::nape::shape::Polygon s5 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_34::Block()).Add(_Function_1_35::Block()).Add(_Function_1_36::Block()).Add(_Function_1_37::Block())),mat1,filt1);		HX_STACK_VAR(s5,"s5");
		HX_STACK_LINE(277)
		{
			HX_STACK_LINE(277)
			{
				HX_STACK_LINE(277)
				s5->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(277)
				if (((((  (((s5->zpp_inner->body != null()))) ? ::nape::phys::Body(s5->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body))){
					HX_STACK_LINE(277)
					if (((s5->zpp_inner->body != null()))){
						HX_STACK_LINE(277)
						((  (((s5->zpp_inner->body != null()))) ? ::nape::phys::Body(s5->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s5);
					}
					HX_STACK_LINE(277)
					if (((body != null()))){
						HX_STACK_LINE(277)
						::nape::shape::ShapeList _this = body->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(277)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(277)
							_this->push(s5);
						}
						else{
							HX_STACK_LINE(277)
							_this->unshift(s5);
						}
					}
				}
			}
			HX_STACK_LINE(277)
			if (((s5->zpp_inner->body != null()))){
				HX_STACK_LINE(277)
				s5->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(277)
				Dynamic();
			}
		}
		HX_STACK_LINE(278)
		{
			HX_STACK_LINE(278)
			{
				HX_STACK_LINE(278)
				s5->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(278)
				s5->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(278)
				s5->zpp_inner->wake();
			}
			HX_STACK_LINE(278)
			s5->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(279)
		{
			HX_STACK_LINE(279)
			{
				HX_STACK_LINE(279)
				s5->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(279)
				s5->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(279)
				{
				}
				HX_STACK_LINE(279)
				s5->zpp_inner->wake();
			}
			HX_STACK_LINE(279)
			s5->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(280)
		{
			HX_STACK_LINE(280)
			{
				HX_STACK_LINE(280)
				if (((prop1 == null()))){
					HX_STACK_LINE(280)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(280)
				s5->zpp_inner->setFluid(prop1->zpp_inner);
			}
			HX_STACK_LINE(280)
			{
				HX_STACK_LINE(280)
				s5->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(280)
				if (((s5->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(280)
					s5->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(280)
				s5->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(281)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s5){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",281);
					{
						HX_STACK_LINE(281)
						if (((s5->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(281)
							s5->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(281)
						return s5->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(281)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s5);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(281)
			{
				HX_STACK_LINE(281)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(281)
				while(((_g < _g1->length))){
					HX_STACK_LINE(281)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(281)
					++(_g);
					HX_STACK_LINE(281)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(281)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(281)
						continue;
					}
					HX_STACK_LINE(281)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(281)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(281)
					{
						HX_STACK_LINE(281)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(281)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(281)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(281)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_38{
			inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",286);
				{
					struct _Function_2_1{
						inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",286);
							{
								HX_STACK_LINE(286)
								if ((body->zpp_inner->world)){
									HX_STACK_LINE(286)
									hx::Throw ((HX_CSTRING("Error: Space::world has no ") + HX_CSTRING("localCOM")));
								}
								HX_STACK_LINE(286)
								if (((body->zpp_inner->wrap_localCOM == null()))){
									struct _Function_4_1{
										inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",286);
											{
												HX_STACK_LINE(286)
												Float x = body->zpp_inner->localCOMx;		HX_STACK_VAR(x,"x");
												Float y = body->zpp_inner->localCOMy;		HX_STACK_VAR(y,"y");
												bool weak = false;		HX_STACK_VAR(weak,"weak");
												HX_STACK_LINE(286)
												if (((bool((x != x)) || bool((y != y))))){
													HX_STACK_LINE(286)
													hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
												}
												HX_STACK_LINE(286)
												::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
												HX_STACK_LINE(286)
												if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
													HX_STACK_LINE(286)
													ret = ::nape::geom::Vec2_obj::__new(null(),null());
												}
												else{
													HX_STACK_LINE(286)
													ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
													HX_STACK_LINE(286)
													::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
													HX_STACK_LINE(286)
													ret->zpp_pool = null();
													HX_STACK_LINE(286)
													ret->zpp_disp = false;
													HX_STACK_LINE(286)
													if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
														HX_STACK_LINE(286)
														::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
													}
												}
												HX_STACK_LINE(286)
												if (((ret->zpp_inner == null()))){
													struct _Function_6_1{
														inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",286);
															{
																HX_STACK_LINE(286)
																bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
																HX_STACK_LINE(286)
																::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(286)
																{
																	HX_STACK_LINE(286)
																	if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
																		HX_STACK_LINE(286)
																		ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
																	}
																	else{
																		HX_STACK_LINE(286)
																		ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
																		HX_STACK_LINE(286)
																		::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
																		HX_STACK_LINE(286)
																		ret1->next = null();
																	}
																	HX_STACK_LINE(286)
																	ret1->weak = false;
																}
																HX_STACK_LINE(286)
																ret1->_immutable = immutable;
																HX_STACK_LINE(286)
																{
																	HX_STACK_LINE(286)
																	ret1->x = x;
																	HX_STACK_LINE(286)
																	ret1->y = y;
																	HX_STACK_LINE(286)
																	{
																	}
																	HX_STACK_LINE(286)
																	{
																	}
																}
																HX_STACK_LINE(286)
																return ret1;
															}
															return null();
														}
													};
													HX_STACK_LINE(286)
													ret->zpp_inner = _Function_6_1::Block(x,y);
													HX_STACK_LINE(286)
													ret->zpp_inner->outer = ret;
												}
												else{
													HX_STACK_LINE(286)
													if (((bool((ret != null())) && bool(ret->zpp_disp)))){
														HX_STACK_LINE(286)
														hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
													}
													HX_STACK_LINE(286)
													{
														HX_STACK_LINE(286)
														::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(286)
														if ((_this->_immutable)){
															HX_STACK_LINE(286)
															hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
														}
														HX_STACK_LINE(286)
														if (((_this->_isimmutable_dyn() != null()))){
															HX_STACK_LINE(286)
															_this->_isimmutable();
														}
													}
													HX_STACK_LINE(286)
													if (((bool((x != x)) || bool((y != y))))){
														HX_STACK_LINE(286)
														hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
													}
													struct _Function_6_1{
														inline static Float Block( ::nape::geom::Vec2 &ret){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",286);
															{
																HX_STACK_LINE(286)
																if (((bool((ret != null())) && bool(ret->zpp_disp)))){
																	HX_STACK_LINE(286)
																	hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
																}
																HX_STACK_LINE(286)
																{
																	HX_STACK_LINE(286)
																	::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(286)
																	if (((_this->_validate_dyn() != null()))){
																		HX_STACK_LINE(286)
																		_this->_validate();
																	}
																}
																HX_STACK_LINE(286)
																return ret->zpp_inner->x;
															}
															return null();
														}
													};
													struct _Function_6_2{
														inline static Float Block( ::nape::geom::Vec2 &ret){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",286);
															{
																HX_STACK_LINE(286)
																if (((bool((ret != null())) && bool(ret->zpp_disp)))){
																	HX_STACK_LINE(286)
																	hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
																}
																HX_STACK_LINE(286)
																{
																	HX_STACK_LINE(286)
																	::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(286)
																	if (((_this->_validate_dyn() != null()))){
																		HX_STACK_LINE(286)
																		_this->_validate();
																	}
																}
																HX_STACK_LINE(286)
																return ret->zpp_inner->y;
															}
															return null();
														}
													};
													HX_STACK_LINE(286)
													if ((!(((bool((_Function_6_1::Block(ret) == x)) && bool((_Function_6_2::Block(ret) == y))))))){
														HX_STACK_LINE(286)
														{
															HX_STACK_LINE(286)
															ret->zpp_inner->x = x;
															HX_STACK_LINE(286)
															ret->zpp_inner->y = y;
															HX_STACK_LINE(286)
															{
															}
															HX_STACK_LINE(286)
															{
															}
														}
														HX_STACK_LINE(286)
														{
															HX_STACK_LINE(286)
															::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(286)
															if (((_this->_invalidate_dyn() != null()))){
																HX_STACK_LINE(286)
																_this->_invalidate(_this);
															}
														}
													}
													HX_STACK_LINE(286)
													ret;
												}
												HX_STACK_LINE(286)
												ret->zpp_inner->weak = weak;
												HX_STACK_LINE(286)
												return ret;
											}
											return null();
										}
									};
									HX_STACK_LINE(286)
									body->zpp_inner->wrap_localCOM = _Function_4_1::Block(body);
									HX_STACK_LINE(286)
									body->zpp_inner->wrap_localCOM->zpp_inner->_inuse = true;
									HX_STACK_LINE(286)
									body->zpp_inner->wrap_localCOM->zpp_inner->_immutable = true;
									HX_STACK_LINE(286)
									body->zpp_inner->wrap_localCOM->zpp_inner->_validate = body->zpp_inner->getlocalCOM_dyn();
								}
								HX_STACK_LINE(286)
								return body->zpp_inner->wrap_localCOM;
							}
							return null();
						}
					};
					HX_STACK_LINE(286)
					::nape::geom::Vec2 _this = _Function_2_1::Block(body);		HX_STACK_VAR(_this,"_this");
					bool weak = false;		HX_STACK_VAR(weak,"weak");
					HX_STACK_LINE(286)
					if (((bool((_this != null())) && bool(_this->zpp_disp)))){
						HX_STACK_LINE(286)
						hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
					}
					struct _Function_2_2{
						inline static ::nape::geom::Vec2 Block( ::nape::geom::Vec2 &_this,bool &weak){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",286);
							{
								struct _Function_3_1{
									inline static Float Block( ::nape::geom::Vec2 &_this){
										HX_STACK_PUSH("*::closure","PhysicsData.hx",286);
										{
											HX_STACK_LINE(286)
											if ((_this->zpp_disp)){
												HX_STACK_LINE(286)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(286)
											{
												HX_STACK_LINE(286)
												::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
												HX_STACK_LINE(286)
												if (((_this1->_validate_dyn() != null()))){
													HX_STACK_LINE(286)
													_this1->_validate();
												}
											}
											HX_STACK_LINE(286)
											return _this->zpp_inner->x;
										}
										return null();
									}
								};
								struct _Function_3_2{
									inline static Float Block( ::nape::geom::Vec2 &_this){
										HX_STACK_PUSH("*::closure","PhysicsData.hx",286);
										{
											HX_STACK_LINE(286)
											if ((_this->zpp_disp)){
												HX_STACK_LINE(286)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(286)
											{
												HX_STACK_LINE(286)
												::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
												HX_STACK_LINE(286)
												if (((_this1->_validate_dyn() != null()))){
													HX_STACK_LINE(286)
													_this1->_validate();
												}
											}
											HX_STACK_LINE(286)
											return _this->zpp_inner->y;
										}
										return null();
									}
								};
								HX_STACK_LINE(286)
								Float x = _Function_3_1::Block(_this);		HX_STACK_VAR(x,"x");
								Float y = _Function_3_2::Block(_this);		HX_STACK_VAR(y,"y");
								HX_STACK_LINE(286)
								if (((bool((x != x)) || bool((y != y))))){
									HX_STACK_LINE(286)
									hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
								}
								HX_STACK_LINE(286)
								::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(286)
								if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
									HX_STACK_LINE(286)
									ret = ::nape::geom::Vec2_obj::__new(null(),null());
								}
								else{
									HX_STACK_LINE(286)
									ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
									HX_STACK_LINE(286)
									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
									HX_STACK_LINE(286)
									ret->zpp_pool = null();
									HX_STACK_LINE(286)
									ret->zpp_disp = false;
									HX_STACK_LINE(286)
									if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
										HX_STACK_LINE(286)
										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
									}
								}
								HX_STACK_LINE(286)
								if (((ret->zpp_inner == null()))){
									struct _Function_4_1{
										inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",286);
											{
												HX_STACK_LINE(286)
												bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
												HX_STACK_LINE(286)
												::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(286)
												{
													HX_STACK_LINE(286)
													if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
														HX_STACK_LINE(286)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
													}
													else{
														HX_STACK_LINE(286)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
														HX_STACK_LINE(286)
														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(286)
														ret1->next = null();
													}
													HX_STACK_LINE(286)
													ret1->weak = false;
												}
												HX_STACK_LINE(286)
												ret1->_immutable = immutable;
												HX_STACK_LINE(286)
												{
													HX_STACK_LINE(286)
													ret1->x = x;
													HX_STACK_LINE(286)
													ret1->y = y;
													HX_STACK_LINE(286)
													{
													}
													HX_STACK_LINE(286)
													{
													}
												}
												HX_STACK_LINE(286)
												return ret1;
											}
											return null();
										}
									};
									HX_STACK_LINE(286)
									ret->zpp_inner = _Function_4_1::Block(x,y);
									HX_STACK_LINE(286)
									ret->zpp_inner->outer = ret;
								}
								else{
									HX_STACK_LINE(286)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(286)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(286)
									{
										HX_STACK_LINE(286)
										::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
										HX_STACK_LINE(286)
										if ((_this1->_immutable)){
											HX_STACK_LINE(286)
											hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
										}
										HX_STACK_LINE(286)
										if (((_this1->_isimmutable_dyn() != null()))){
											HX_STACK_LINE(286)
											_this1->_isimmutable();
										}
									}
									HX_STACK_LINE(286)
									if (((bool((x != x)) || bool((y != y))))){
										HX_STACK_LINE(286)
										hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
									}
									struct _Function_4_1{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",286);
											{
												HX_STACK_LINE(286)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(286)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(286)
												{
													HX_STACK_LINE(286)
													::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(286)
													if (((_this1->_validate_dyn() != null()))){
														HX_STACK_LINE(286)
														_this1->_validate();
													}
												}
												HX_STACK_LINE(286)
												return ret->zpp_inner->x;
											}
											return null();
										}
									};
									struct _Function_4_2{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",286);
											{
												HX_STACK_LINE(286)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(286)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(286)
												{
													HX_STACK_LINE(286)
													::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(286)
													if (((_this1->_validate_dyn() != null()))){
														HX_STACK_LINE(286)
														_this1->_validate();
													}
												}
												HX_STACK_LINE(286)
												return ret->zpp_inner->y;
											}
											return null();
										}
									};
									HX_STACK_LINE(286)
									if ((!(((bool((_Function_4_1::Block(ret) == x)) && bool((_Function_4_2::Block(ret) == y))))))){
										HX_STACK_LINE(286)
										{
											HX_STACK_LINE(286)
											ret->zpp_inner->x = x;
											HX_STACK_LINE(286)
											ret->zpp_inner->y = y;
											HX_STACK_LINE(286)
											{
											}
											HX_STACK_LINE(286)
											{
											}
										}
										HX_STACK_LINE(286)
										{
											HX_STACK_LINE(286)
											::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
											HX_STACK_LINE(286)
											if (((_this1->_invalidate_dyn() != null()))){
												HX_STACK_LINE(286)
												_this1->_invalidate(_this1);
											}
										}
									}
									HX_STACK_LINE(286)
									ret;
								}
								HX_STACK_LINE(286)
								ret->zpp_inner->weak = weak;
								HX_STACK_LINE(286)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(286)
					return _Function_2_2::Block(_this,weak);
				}
				return null();
			}
		};
		HX_STACK_LINE(286)
		::nape::geom::Vec2 anchor = _Function_1_38::Block(body);		HX_STACK_VAR(anchor,"anchor");
		struct _Function_1_39{
			inline static ::nape::geom::Vec2 Block( ::nape::geom::Vec2 &anchor){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",287);
				{
					struct _Function_2_1{
						inline static Float Block( ::nape::geom::Vec2 &anchor){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",287);
							{
								HX_STACK_LINE(287)
								if (((bool((anchor != null())) && bool(anchor->zpp_disp)))){
									HX_STACK_LINE(287)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(287)
								{
									HX_STACK_LINE(287)
									::zpp_nape::geom::ZPP_Vec2 _this = anchor->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(287)
									if (((_this->_validate_dyn() != null()))){
										HX_STACK_LINE(287)
										_this->_validate();
									}
								}
								HX_STACK_LINE(287)
								return anchor->zpp_inner->x;
							}
							return null();
						}
					};
					struct _Function_2_2{
						inline static Float Block( ::nape::geom::Vec2 &anchor){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",287);
							{
								HX_STACK_LINE(287)
								if (((bool((anchor != null())) && bool(anchor->zpp_disp)))){
									HX_STACK_LINE(287)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(287)
								{
									HX_STACK_LINE(287)
									::zpp_nape::geom::ZPP_Vec2 _this = anchor->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(287)
									if (((_this->_validate_dyn() != null()))){
										HX_STACK_LINE(287)
										_this->_validate();
									}
								}
								HX_STACK_LINE(287)
								return anchor->zpp_inner->y;
							}
							return null();
						}
					};
					HX_STACK_LINE(287)
					Float x = -(_Function_2_1::Block(anchor));		HX_STACK_VAR(x,"x");
					Float y = -(_Function_2_2::Block(anchor));		HX_STACK_VAR(y,"y");
					struct _Function_2_3{
						inline static ::nape::geom::Vec2 Block( Float &x,Float &y){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",287);
							{
								HX_STACK_LINE(287)
								if (((bool((x != x)) || bool((y != y))))){
									HX_STACK_LINE(287)
									hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
								}
								HX_STACK_LINE(287)
								::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(287)
								if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
									HX_STACK_LINE(287)
									ret = ::nape::geom::Vec2_obj::__new(null(),null());
								}
								else{
									HX_STACK_LINE(287)
									ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
									HX_STACK_LINE(287)
									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
									HX_STACK_LINE(287)
									ret->zpp_pool = null();
									HX_STACK_LINE(287)
									ret->zpp_disp = false;
									HX_STACK_LINE(287)
									if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
										HX_STACK_LINE(287)
										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
									}
								}
								HX_STACK_LINE(287)
								if (((ret->zpp_inner == null()))){
									struct _Function_4_1{
										inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",287);
											{
												HX_STACK_LINE(287)
												bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
												HX_STACK_LINE(287)
												::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(287)
												{
													HX_STACK_LINE(287)
													if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
														HX_STACK_LINE(287)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
													}
													else{
														HX_STACK_LINE(287)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
														HX_STACK_LINE(287)
														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(287)
														ret1->next = null();
													}
													HX_STACK_LINE(287)
													ret1->weak = false;
												}
												HX_STACK_LINE(287)
												ret1->_immutable = immutable;
												HX_STACK_LINE(287)
												{
													HX_STACK_LINE(287)
													ret1->x = x;
													HX_STACK_LINE(287)
													ret1->y = y;
													HX_STACK_LINE(287)
													{
													}
													HX_STACK_LINE(287)
													{
													}
												}
												HX_STACK_LINE(287)
												return ret1;
											}
											return null();
										}
									};
									HX_STACK_LINE(287)
									ret->zpp_inner = _Function_4_1::Block(x,y);
									HX_STACK_LINE(287)
									ret->zpp_inner->outer = ret;
								}
								else{
									HX_STACK_LINE(287)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(287)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(287)
									{
										HX_STACK_LINE(287)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(287)
										if ((_this->_immutable)){
											HX_STACK_LINE(287)
											hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
										}
										HX_STACK_LINE(287)
										if (((_this->_isimmutable_dyn() != null()))){
											HX_STACK_LINE(287)
											_this->_isimmutable();
										}
									}
									HX_STACK_LINE(287)
									if (((bool((x != x)) || bool((y != y))))){
										HX_STACK_LINE(287)
										hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
									}
									struct _Function_4_1{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",287);
											{
												HX_STACK_LINE(287)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(287)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(287)
												{
													HX_STACK_LINE(287)
													::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(287)
													if (((_this->_validate_dyn() != null()))){
														HX_STACK_LINE(287)
														_this->_validate();
													}
												}
												HX_STACK_LINE(287)
												return ret->zpp_inner->x;
											}
											return null();
										}
									};
									struct _Function_4_2{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",287);
											{
												HX_STACK_LINE(287)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(287)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(287)
												{
													HX_STACK_LINE(287)
													::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(287)
													if (((_this->_validate_dyn() != null()))){
														HX_STACK_LINE(287)
														_this->_validate();
													}
												}
												HX_STACK_LINE(287)
												return ret->zpp_inner->y;
											}
											return null();
										}
									};
									HX_STACK_LINE(287)
									if ((!(((bool((_Function_4_1::Block(ret) == x)) && bool((_Function_4_2::Block(ret) == y))))))){
										HX_STACK_LINE(287)
										{
											HX_STACK_LINE(287)
											ret->zpp_inner->x = x;
											HX_STACK_LINE(287)
											ret->zpp_inner->y = y;
											HX_STACK_LINE(287)
											{
											}
											HX_STACK_LINE(287)
											{
											}
										}
										HX_STACK_LINE(287)
										{
											HX_STACK_LINE(287)
											::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(287)
											if (((_this->_invalidate_dyn() != null()))){
												HX_STACK_LINE(287)
												_this->_invalidate(_this);
											}
										}
									}
									HX_STACK_LINE(287)
									ret;
								}
								HX_STACK_LINE(287)
								ret->zpp_inner->weak = true;
								HX_STACK_LINE(287)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(287)
					return _Function_2_3::Block(x,y);
				}
				return null();
			}
		};
		HX_STACK_LINE(287)
		body->translateShapes(_Function_1_39::Block(anchor));
		HX_STACK_LINE(288)
		{
			struct _Function_2_1{
				inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",288);
					{
						HX_STACK_LINE(288)
						if (((body->zpp_inner->wrap_pos == null()))){
							HX_STACK_LINE(288)
							body->zpp_inner->setupPosition();
						}
						HX_STACK_LINE(288)
						return body->zpp_inner->wrap_pos;
					}
					return null();
				}
			};
			HX_STACK_LINE(288)
			::nape::geom::Vec2 _this = _Function_2_1::Block(body);		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(288)
			if (((bool((_this != null())) && bool(_this->zpp_disp)))){
				HX_STACK_LINE(288)
				hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
			}
			HX_STACK_LINE(288)
			{
				HX_STACK_LINE(288)
				::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
				HX_STACK_LINE(288)
				if ((_this1->_immutable)){
					HX_STACK_LINE(288)
					hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
				}
				HX_STACK_LINE(288)
				if (((_this1->_isimmutable_dyn() != null()))){
					HX_STACK_LINE(288)
					_this1->_isimmutable();
				}
			}
			HX_STACK_LINE(288)
			{
			}
			struct _Function_2_2{
				inline static Float Block( ::nape::geom::Vec2 &_this){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",288);
					{
						HX_STACK_LINE(288)
						if (((bool((_this != null())) && bool(_this->zpp_disp)))){
							HX_STACK_LINE(288)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(288)
						{
							HX_STACK_LINE(288)
							::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(288)
							if (((_this1->_validate_dyn() != null()))){
								HX_STACK_LINE(288)
								_this1->_validate();
							}
						}
						HX_STACK_LINE(288)
						return _this->zpp_inner->x;
					}
					return null();
				}
			};
			struct _Function_2_3{
				inline static Float Block( ::nape::geom::Vec2 &_this){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",288);
					{
						HX_STACK_LINE(288)
						if (((bool((_this != null())) && bool(_this->zpp_disp)))){
							HX_STACK_LINE(288)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(288)
						{
							HX_STACK_LINE(288)
							::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(288)
							if (((_this1->_validate_dyn() != null()))){
								HX_STACK_LINE(288)
								_this1->_validate();
							}
						}
						HX_STACK_LINE(288)
						return _this->zpp_inner->y;
					}
					return null();
				}
			};
			HX_STACK_LINE(288)
			if ((!(((bool((_Function_2_2::Block(_this) == (int)0)) && bool((_Function_2_3::Block(_this) == (int)0))))))){
				HX_STACK_LINE(288)
				{
					HX_STACK_LINE(288)
					_this->zpp_inner->x = (int)0;
					HX_STACK_LINE(288)
					_this->zpp_inner->y = (int)0;
					HX_STACK_LINE(288)
					{
					}
					HX_STACK_LINE(288)
					{
					}
				}
				HX_STACK_LINE(288)
				{
					HX_STACK_LINE(288)
					::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
					HX_STACK_LINE(288)
					if (((_this1->_invalidate_dyn() != null()))){
						HX_STACK_LINE(288)
						_this1->_invalidate(_this1);
					}
				}
			}
			HX_STACK_LINE(288)
			_this;
		}
		struct _Function_1_40{
			inline static Dynamic Block( ::nape::phys::Body &body,::nape::geom::Vec2 &anchor){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",290);
				{
					hx::Anon __result = hx::Anon_obj::Create();
					__result->Add(HX_CSTRING("body") , body,false);
					__result->Add(HX_CSTRING("anchor") , anchor,false);
					return __result;
				}
				return null();
			}
		};
		HX_STACK_LINE(290)
		::PhysicsData_obj::bodies->set(HX_CSTRING("rugby"),_Function_1_40::Block(body,anchor));
		HX_STACK_LINE(292)
		::nape::phys::Body body1 = ::nape::phys::Body_obj::__new(null(),null());		HX_STACK_VAR(body1,"body1");
		HX_STACK_LINE(293)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::phys::Body &body1){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",293);
					{
						HX_STACK_LINE(293)
						if (((body1->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(293)
							body1->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(293)
						return body1->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(293)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(body1);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(293)
			{
				HX_STACK_LINE(293)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(293)
				while(((_g < _g1->length))){
					HX_STACK_LINE(293)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(293)
					++(_g);
					HX_STACK_LINE(293)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(293)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(293)
						continue;
					}
					HX_STACK_LINE(293)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(293)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(293)
					{
						HX_STACK_LINE(293)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(293)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(293)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(293)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		HX_STACK_LINE(296)
		::nape::phys::Material mat2 = ::nape::phys::Material_obj::__new(null(),null(),null(),null(),null());		HX_STACK_VAR(mat2,"mat2");
		HX_STACK_LINE(297)
		::nape::dynamics::InteractionFilter filt2 = ::nape::dynamics::InteractionFilter_obj::__new(null(),null(),null(),null(),null(),null());		HX_STACK_VAR(filt2,"filt2");
		HX_STACK_LINE(298)
		::nape::phys::FluidProperties prop2 = ::nape::phys::FluidProperties_obj::__new(null(),null());		HX_STACK_VAR(prop2,"prop2");
		struct _Function_1_41{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",303);
				{
					HX_STACK_LINE(303)
					{
					}
					HX_STACK_LINE(303)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(303)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(303)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(303)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(303)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(303)
						ret->zpp_pool = null();
						HX_STACK_LINE(303)
						ret->zpp_disp = false;
						HX_STACK_LINE(303)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(303)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(303)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",303);
								{
									HX_STACK_LINE(303)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(303)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(303)
									{
										HX_STACK_LINE(303)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(303)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(303)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(303)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(303)
											ret1->next = null();
										}
										HX_STACK_LINE(303)
										ret1->weak = false;
									}
									HX_STACK_LINE(303)
									ret1->_immutable = immutable;
									HX_STACK_LINE(303)
									{
										HX_STACK_LINE(303)
										ret1->x = 25.2857142857143;
										HX_STACK_LINE(303)
										ret1->y = (int)25;
										HX_STACK_LINE(303)
										{
										}
										HX_STACK_LINE(303)
										{
										}
									}
									HX_STACK_LINE(303)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(303)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(303)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(303)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(303)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(303)
						{
							HX_STACK_LINE(303)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(303)
							if ((_this->_immutable)){
								HX_STACK_LINE(303)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(303)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(303)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(303)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",303);
								{
									HX_STACK_LINE(303)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(303)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(303)
									{
										HX_STACK_LINE(303)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(303)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(303)
											_this->_validate();
										}
									}
									HX_STACK_LINE(303)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",303);
								{
									HX_STACK_LINE(303)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(303)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(303)
									{
										HX_STACK_LINE(303)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(303)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(303)
											_this->_validate();
										}
									}
									HX_STACK_LINE(303)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(303)
						if ((!(((bool((_Function_3_1::Block(ret) == 25.2857142857143)) && bool((_Function_3_2::Block(ret) == (int)25))))))){
							HX_STACK_LINE(303)
							{
								HX_STACK_LINE(303)
								ret->zpp_inner->x = 25.2857142857143;
								HX_STACK_LINE(303)
								ret->zpp_inner->y = (int)25;
								HX_STACK_LINE(303)
								{
								}
								HX_STACK_LINE(303)
								{
								}
							}
							HX_STACK_LINE(303)
							{
								HX_STACK_LINE(303)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(303)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(303)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(303)
						ret;
					}
					HX_STACK_LINE(303)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(303)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(301)
		::nape::shape::Circle s6 = ::nape::shape::Circle_obj::__new((int)25,_Function_1_41::Block(),mat2,filt2);		HX_STACK_VAR(s6,"s6");
		HX_STACK_LINE(307)
		{
			HX_STACK_LINE(307)
			{
				HX_STACK_LINE(307)
				s6->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(307)
				if (((((  (((s6->zpp_inner->body != null()))) ? ::nape::phys::Body(s6->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body1))){
					HX_STACK_LINE(307)
					if (((s6->zpp_inner->body != null()))){
						HX_STACK_LINE(307)
						((  (((s6->zpp_inner->body != null()))) ? ::nape::phys::Body(s6->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s6);
					}
					HX_STACK_LINE(307)
					if (((body1 != null()))){
						HX_STACK_LINE(307)
						::nape::shape::ShapeList _this = body1->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(307)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(307)
							_this->push(s6);
						}
						else{
							HX_STACK_LINE(307)
							_this->unshift(s6);
						}
					}
				}
			}
			HX_STACK_LINE(307)
			if (((s6->zpp_inner->body != null()))){
				HX_STACK_LINE(307)
				s6->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(307)
				Dynamic();
			}
		}
		HX_STACK_LINE(308)
		{
			HX_STACK_LINE(308)
			{
				HX_STACK_LINE(308)
				s6->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(308)
				s6->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(308)
				s6->zpp_inner->wake();
			}
			HX_STACK_LINE(308)
			s6->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(309)
		{
			HX_STACK_LINE(309)
			{
				HX_STACK_LINE(309)
				s6->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(309)
				s6->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(309)
				{
				}
				HX_STACK_LINE(309)
				s6->zpp_inner->wake();
			}
			HX_STACK_LINE(309)
			s6->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(310)
		{
			HX_STACK_LINE(310)
			{
				HX_STACK_LINE(310)
				if (((prop2 == null()))){
					HX_STACK_LINE(310)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(310)
				s6->zpp_inner->setFluid(prop2->zpp_inner);
			}
			HX_STACK_LINE(310)
			{
				HX_STACK_LINE(310)
				s6->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(310)
				if (((s6->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(310)
					s6->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(310)
				s6->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(311)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Circle &s6){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",311);
					{
						HX_STACK_LINE(311)
						if (((s6->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(311)
							s6->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(311)
						return s6->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(311)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s6);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(311)
			{
				HX_STACK_LINE(311)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(311)
				while(((_g < _g1->length))){
					HX_STACK_LINE(311)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(311)
					++(_g);
					HX_STACK_LINE(311)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(311)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(311)
						continue;
					}
					HX_STACK_LINE(311)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(311)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(311)
					{
						HX_STACK_LINE(311)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(311)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(311)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(311)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		HX_STACK_LINE(314)
		::nape::phys::Material mat3 = ::nape::phys::Material_obj::__new(null(),null(),null(),null(),null());		HX_STACK_VAR(mat3,"mat3");
		HX_STACK_LINE(315)
		::nape::dynamics::InteractionFilter filt3 = ::nape::dynamics::InteractionFilter_obj::__new(null(),null(),null(),null(),null(),null());		HX_STACK_VAR(filt3,"filt3");
		HX_STACK_LINE(316)
		::nape::phys::FluidProperties prop3 = ::nape::phys::FluidProperties_obj::__new(null(),null());		HX_STACK_VAR(prop3,"prop3");
		struct _Function_1_42{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
				{
					HX_STACK_LINE(321)
					{
					}
					HX_STACK_LINE(321)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(321)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(321)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(321)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(321)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(321)
						ret->zpp_pool = null();
						HX_STACK_LINE(321)
						ret->zpp_disp = false;
						HX_STACK_LINE(321)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(321)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(321)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(321)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(321)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(321)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(321)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(321)
											ret1->next = null();
										}
										HX_STACK_LINE(321)
										ret1->weak = false;
									}
									HX_STACK_LINE(321)
									ret1->_immutable = immutable;
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										ret1->x = 1.5;
										HX_STACK_LINE(321)
										ret1->y = (int)13;
										HX_STACK_LINE(321)
										{
										}
										HX_STACK_LINE(321)
										{
										}
									}
									HX_STACK_LINE(321)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(321)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(321)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(321)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(321)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(321)
						{
							HX_STACK_LINE(321)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(321)
							if ((_this->_immutable)){
								HX_STACK_LINE(321)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(321)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(321)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(321)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(321)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(321)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(321)
											_this->_validate();
										}
									}
									HX_STACK_LINE(321)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(321)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(321)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(321)
											_this->_validate();
										}
									}
									HX_STACK_LINE(321)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(321)
						if ((!(((bool((_Function_3_1::Block(ret) == 1.5)) && bool((_Function_3_2::Block(ret) == (int)13))))))){
							HX_STACK_LINE(321)
							{
								HX_STACK_LINE(321)
								ret->zpp_inner->x = 1.5;
								HX_STACK_LINE(321)
								ret->zpp_inner->y = (int)13;
								HX_STACK_LINE(321)
								{
								}
								HX_STACK_LINE(321)
								{
								}
							}
							HX_STACK_LINE(321)
							{
								HX_STACK_LINE(321)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(321)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(321)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(321)
						ret;
					}
					HX_STACK_LINE(321)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(321)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_43{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
				{
					HX_STACK_LINE(321)
					{
					}
					HX_STACK_LINE(321)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(321)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(321)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(321)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(321)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(321)
						ret->zpp_pool = null();
						HX_STACK_LINE(321)
						ret->zpp_disp = false;
						HX_STACK_LINE(321)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(321)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(321)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(321)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(321)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(321)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(321)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(321)
											ret1->next = null();
										}
										HX_STACK_LINE(321)
										ret1->weak = false;
									}
									HX_STACK_LINE(321)
									ret1->_immutable = immutable;
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										ret1->x = 0.5;
										HX_STACK_LINE(321)
										ret1->y = (int)33;
										HX_STACK_LINE(321)
										{
										}
										HX_STACK_LINE(321)
										{
										}
									}
									HX_STACK_LINE(321)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(321)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(321)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(321)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(321)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(321)
						{
							HX_STACK_LINE(321)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(321)
							if ((_this->_immutable)){
								HX_STACK_LINE(321)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(321)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(321)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(321)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(321)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(321)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(321)
											_this->_validate();
										}
									}
									HX_STACK_LINE(321)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(321)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(321)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(321)
											_this->_validate();
										}
									}
									HX_STACK_LINE(321)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(321)
						if ((!(((bool((_Function_3_1::Block(ret) == 0.5)) && bool((_Function_3_2::Block(ret) == (int)33))))))){
							HX_STACK_LINE(321)
							{
								HX_STACK_LINE(321)
								ret->zpp_inner->x = 0.5;
								HX_STACK_LINE(321)
								ret->zpp_inner->y = (int)33;
								HX_STACK_LINE(321)
								{
								}
								HX_STACK_LINE(321)
								{
								}
							}
							HX_STACK_LINE(321)
							{
								HX_STACK_LINE(321)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(321)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(321)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(321)
						ret;
					}
					HX_STACK_LINE(321)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(321)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_44{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
				{
					HX_STACK_LINE(321)
					{
					}
					HX_STACK_LINE(321)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(321)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(321)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(321)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(321)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(321)
						ret->zpp_pool = null();
						HX_STACK_LINE(321)
						ret->zpp_disp = false;
						HX_STACK_LINE(321)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(321)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(321)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(321)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(321)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(321)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(321)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(321)
											ret1->next = null();
										}
										HX_STACK_LINE(321)
										ret1->weak = false;
									}
									HX_STACK_LINE(321)
									ret1->_immutable = immutable;
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										ret1->x = 10.5;
										HX_STACK_LINE(321)
										ret1->y = (int)46;
										HX_STACK_LINE(321)
										{
										}
										HX_STACK_LINE(321)
										{
										}
									}
									HX_STACK_LINE(321)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(321)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(321)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(321)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(321)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(321)
						{
							HX_STACK_LINE(321)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(321)
							if ((_this->_immutable)){
								HX_STACK_LINE(321)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(321)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(321)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(321)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(321)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(321)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(321)
											_this->_validate();
										}
									}
									HX_STACK_LINE(321)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(321)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(321)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(321)
											_this->_validate();
										}
									}
									HX_STACK_LINE(321)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(321)
						if ((!(((bool((_Function_3_1::Block(ret) == 10.5)) && bool((_Function_3_2::Block(ret) == (int)46))))))){
							HX_STACK_LINE(321)
							{
								HX_STACK_LINE(321)
								ret->zpp_inner->x = 10.5;
								HX_STACK_LINE(321)
								ret->zpp_inner->y = (int)46;
								HX_STACK_LINE(321)
								{
								}
								HX_STACK_LINE(321)
								{
								}
							}
							HX_STACK_LINE(321)
							{
								HX_STACK_LINE(321)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(321)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(321)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(321)
						ret;
					}
					HX_STACK_LINE(321)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(321)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_45{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
				{
					HX_STACK_LINE(321)
					{
					}
					HX_STACK_LINE(321)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(321)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(321)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(321)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(321)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(321)
						ret->zpp_pool = null();
						HX_STACK_LINE(321)
						ret->zpp_disp = false;
						HX_STACK_LINE(321)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(321)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(321)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(321)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(321)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(321)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(321)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(321)
											ret1->next = null();
										}
										HX_STACK_LINE(321)
										ret1->weak = false;
									}
									HX_STACK_LINE(321)
									ret1->_immutable = immutable;
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										ret1->x = 48.5;
										HX_STACK_LINE(321)
										ret1->y = (int)17;
										HX_STACK_LINE(321)
										{
										}
										HX_STACK_LINE(321)
										{
										}
									}
									HX_STACK_LINE(321)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(321)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(321)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(321)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(321)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(321)
						{
							HX_STACK_LINE(321)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(321)
							if ((_this->_immutable)){
								HX_STACK_LINE(321)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(321)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(321)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(321)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(321)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(321)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(321)
											_this->_validate();
										}
									}
									HX_STACK_LINE(321)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(321)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(321)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(321)
											_this->_validate();
										}
									}
									HX_STACK_LINE(321)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(321)
						if ((!(((bool((_Function_3_1::Block(ret) == 48.5)) && bool((_Function_3_2::Block(ret) == (int)17))))))){
							HX_STACK_LINE(321)
							{
								HX_STACK_LINE(321)
								ret->zpp_inner->x = 48.5;
								HX_STACK_LINE(321)
								ret->zpp_inner->y = (int)17;
								HX_STACK_LINE(321)
								{
								}
								HX_STACK_LINE(321)
								{
								}
							}
							HX_STACK_LINE(321)
							{
								HX_STACK_LINE(321)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(321)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(321)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(321)
						ret;
					}
					HX_STACK_LINE(321)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(321)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_46{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
				{
					HX_STACK_LINE(321)
					{
					}
					HX_STACK_LINE(321)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(321)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(321)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(321)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(321)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(321)
						ret->zpp_pool = null();
						HX_STACK_LINE(321)
						ret->zpp_disp = false;
						HX_STACK_LINE(321)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(321)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(321)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(321)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(321)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(321)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(321)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(321)
											ret1->next = null();
										}
										HX_STACK_LINE(321)
										ret1->weak = false;
									}
									HX_STACK_LINE(321)
									ret1->_immutable = immutable;
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										ret1->x = 39.5;
										HX_STACK_LINE(321)
										ret1->y = (int)4;
										HX_STACK_LINE(321)
										{
										}
										HX_STACK_LINE(321)
										{
										}
									}
									HX_STACK_LINE(321)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(321)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(321)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(321)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(321)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(321)
						{
							HX_STACK_LINE(321)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(321)
							if ((_this->_immutable)){
								HX_STACK_LINE(321)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(321)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(321)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(321)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(321)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(321)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(321)
											_this->_validate();
										}
									}
									HX_STACK_LINE(321)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(321)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(321)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(321)
											_this->_validate();
										}
									}
									HX_STACK_LINE(321)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(321)
						if ((!(((bool((_Function_3_1::Block(ret) == 39.5)) && bool((_Function_3_2::Block(ret) == (int)4))))))){
							HX_STACK_LINE(321)
							{
								HX_STACK_LINE(321)
								ret->zpp_inner->x = 39.5;
								HX_STACK_LINE(321)
								ret->zpp_inner->y = (int)4;
								HX_STACK_LINE(321)
								{
								}
								HX_STACK_LINE(321)
								{
								}
							}
							HX_STACK_LINE(321)
							{
								HX_STACK_LINE(321)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(321)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(321)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(321)
						ret;
					}
					HX_STACK_LINE(321)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(321)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_47{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
				{
					HX_STACK_LINE(321)
					{
					}
					HX_STACK_LINE(321)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(321)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(321)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(321)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(321)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(321)
						ret->zpp_pool = null();
						HX_STACK_LINE(321)
						ret->zpp_disp = false;
						HX_STACK_LINE(321)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(321)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(321)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(321)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(321)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(321)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(321)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(321)
											ret1->next = null();
										}
										HX_STACK_LINE(321)
										ret1->weak = false;
									}
									HX_STACK_LINE(321)
									ret1->_immutable = immutable;
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										ret1->x = (int)20;
										HX_STACK_LINE(321)
										ret1->y = -0.5;
										HX_STACK_LINE(321)
										{
										}
										HX_STACK_LINE(321)
										{
										}
									}
									HX_STACK_LINE(321)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(321)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(321)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(321)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(321)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(321)
						{
							HX_STACK_LINE(321)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(321)
							if ((_this->_immutable)){
								HX_STACK_LINE(321)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(321)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(321)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(321)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(321)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(321)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(321)
											_this->_validate();
										}
									}
									HX_STACK_LINE(321)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(321)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(321)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(321)
											_this->_validate();
										}
									}
									HX_STACK_LINE(321)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(321)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)20)) && bool((_Function_3_2::Block(ret) == -0.5))))))){
							HX_STACK_LINE(321)
							{
								HX_STACK_LINE(321)
								ret->zpp_inner->x = (int)20;
								HX_STACK_LINE(321)
								ret->zpp_inner->y = -0.5;
								HX_STACK_LINE(321)
								{
								}
								HX_STACK_LINE(321)
								{
								}
							}
							HX_STACK_LINE(321)
							{
								HX_STACK_LINE(321)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(321)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(321)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(321)
						ret;
					}
					HX_STACK_LINE(321)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(321)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_48{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
				{
					HX_STACK_LINE(321)
					{
					}
					HX_STACK_LINE(321)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(321)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(321)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(321)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(321)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(321)
						ret->zpp_pool = null();
						HX_STACK_LINE(321)
						ret->zpp_disp = false;
						HX_STACK_LINE(321)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(321)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(321)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(321)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(321)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(321)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(321)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(321)
											ret1->next = null();
										}
										HX_STACK_LINE(321)
										ret1->weak = false;
									}
									HX_STACK_LINE(321)
									ret1->_immutable = immutable;
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										ret1->x = (int)19;
										HX_STACK_LINE(321)
										ret1->y = -0.5;
										HX_STACK_LINE(321)
										{
										}
										HX_STACK_LINE(321)
										{
										}
									}
									HX_STACK_LINE(321)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(321)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(321)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(321)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(321)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(321)
						{
							HX_STACK_LINE(321)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(321)
							if ((_this->_immutable)){
								HX_STACK_LINE(321)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(321)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(321)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(321)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(321)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(321)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(321)
											_this->_validate();
										}
									}
									HX_STACK_LINE(321)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",321);
								{
									HX_STACK_LINE(321)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(321)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(321)
									{
										HX_STACK_LINE(321)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(321)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(321)
											_this->_validate();
										}
									}
									HX_STACK_LINE(321)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(321)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)19)) && bool((_Function_3_2::Block(ret) == -0.5))))))){
							HX_STACK_LINE(321)
							{
								HX_STACK_LINE(321)
								ret->zpp_inner->x = (int)19;
								HX_STACK_LINE(321)
								ret->zpp_inner->y = -0.5;
								HX_STACK_LINE(321)
								{
								}
								HX_STACK_LINE(321)
								{
								}
							}
							HX_STACK_LINE(321)
							{
								HX_STACK_LINE(321)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(321)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(321)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(321)
						ret;
					}
					HX_STACK_LINE(321)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(321)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(320)
		::nape::shape::Polygon s7 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_42::Block()).Add(_Function_1_43::Block()).Add(_Function_1_44::Block()).Add(_Function_1_45::Block()).Add(_Function_1_46::Block()).Add(_Function_1_47::Block()).Add(_Function_1_48::Block())),mat3,filt3);		HX_STACK_VAR(s7,"s7");
		HX_STACK_LINE(325)
		{
			HX_STACK_LINE(325)
			{
				HX_STACK_LINE(325)
				s7->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(325)
				if (((((  (((s7->zpp_inner->body != null()))) ? ::nape::phys::Body(s7->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body1))){
					HX_STACK_LINE(325)
					if (((s7->zpp_inner->body != null()))){
						HX_STACK_LINE(325)
						((  (((s7->zpp_inner->body != null()))) ? ::nape::phys::Body(s7->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s7);
					}
					HX_STACK_LINE(325)
					if (((body1 != null()))){
						HX_STACK_LINE(325)
						::nape::shape::ShapeList _this = body1->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(325)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(325)
							_this->push(s7);
						}
						else{
							HX_STACK_LINE(325)
							_this->unshift(s7);
						}
					}
				}
			}
			HX_STACK_LINE(325)
			if (((s7->zpp_inner->body != null()))){
				HX_STACK_LINE(325)
				s7->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(325)
				Dynamic();
			}
		}
		HX_STACK_LINE(326)
		{
			HX_STACK_LINE(326)
			{
				HX_STACK_LINE(326)
				s7->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(326)
				s7->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(326)
				s7->zpp_inner->wake();
			}
			HX_STACK_LINE(326)
			s7->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(327)
		{
			HX_STACK_LINE(327)
			{
				HX_STACK_LINE(327)
				s7->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(327)
				s7->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(327)
				{
				}
				HX_STACK_LINE(327)
				s7->zpp_inner->wake();
			}
			HX_STACK_LINE(327)
			s7->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(328)
		{
			HX_STACK_LINE(328)
			{
				HX_STACK_LINE(328)
				if (((prop3 == null()))){
					HX_STACK_LINE(328)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(328)
				s7->zpp_inner->setFluid(prop3->zpp_inner);
			}
			HX_STACK_LINE(328)
			{
				HX_STACK_LINE(328)
				s7->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(328)
				if (((s7->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(328)
					s7->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(328)
				s7->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(329)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s7){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",329);
					{
						HX_STACK_LINE(329)
						if (((s7->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(329)
							s7->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(329)
						return s7->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(329)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s7);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(329)
			{
				HX_STACK_LINE(329)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(329)
				while(((_g < _g1->length))){
					HX_STACK_LINE(329)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(329)
					++(_g);
					HX_STACK_LINE(329)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(329)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(329)
						continue;
					}
					HX_STACK_LINE(329)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(329)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(329)
					{
						HX_STACK_LINE(329)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(329)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(329)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(329)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_49{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",332);
				{
					HX_STACK_LINE(332)
					{
					}
					HX_STACK_LINE(332)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(332)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(332)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(332)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(332)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(332)
						ret->zpp_pool = null();
						HX_STACK_LINE(332)
						ret->zpp_disp = false;
						HX_STACK_LINE(332)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(332)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(332)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",332);
								{
									HX_STACK_LINE(332)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(332)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(332)
									{
										HX_STACK_LINE(332)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(332)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(332)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(332)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(332)
											ret1->next = null();
										}
										HX_STACK_LINE(332)
										ret1->weak = false;
									}
									HX_STACK_LINE(332)
									ret1->_immutable = immutable;
									HX_STACK_LINE(332)
									{
										HX_STACK_LINE(332)
										ret1->x = 46.5;
										HX_STACK_LINE(332)
										ret1->y = (int)37;
										HX_STACK_LINE(332)
										{
										}
										HX_STACK_LINE(332)
										{
										}
									}
									HX_STACK_LINE(332)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(332)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(332)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(332)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(332)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(332)
						{
							HX_STACK_LINE(332)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(332)
							if ((_this->_immutable)){
								HX_STACK_LINE(332)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(332)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(332)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(332)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",332);
								{
									HX_STACK_LINE(332)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(332)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(332)
									{
										HX_STACK_LINE(332)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(332)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(332)
											_this->_validate();
										}
									}
									HX_STACK_LINE(332)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",332);
								{
									HX_STACK_LINE(332)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(332)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(332)
									{
										HX_STACK_LINE(332)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(332)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(332)
											_this->_validate();
										}
									}
									HX_STACK_LINE(332)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(332)
						if ((!(((bool((_Function_3_1::Block(ret) == 46.5)) && bool((_Function_3_2::Block(ret) == (int)37))))))){
							HX_STACK_LINE(332)
							{
								HX_STACK_LINE(332)
								ret->zpp_inner->x = 46.5;
								HX_STACK_LINE(332)
								ret->zpp_inner->y = (int)37;
								HX_STACK_LINE(332)
								{
								}
								HX_STACK_LINE(332)
								{
								}
							}
							HX_STACK_LINE(332)
							{
								HX_STACK_LINE(332)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(332)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(332)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(332)
						ret;
					}
					HX_STACK_LINE(332)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(332)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_50{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",332);
				{
					HX_STACK_LINE(332)
					{
					}
					HX_STACK_LINE(332)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(332)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(332)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(332)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(332)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(332)
						ret->zpp_pool = null();
						HX_STACK_LINE(332)
						ret->zpp_disp = false;
						HX_STACK_LINE(332)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(332)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(332)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",332);
								{
									HX_STACK_LINE(332)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(332)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(332)
									{
										HX_STACK_LINE(332)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(332)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(332)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(332)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(332)
											ret1->next = null();
										}
										HX_STACK_LINE(332)
										ret1->weak = false;
									}
									HX_STACK_LINE(332)
									ret1->_immutable = immutable;
									HX_STACK_LINE(332)
									{
										HX_STACK_LINE(332)
										ret1->x = 48.5;
										HX_STACK_LINE(332)
										ret1->y = (int)17;
										HX_STACK_LINE(332)
										{
										}
										HX_STACK_LINE(332)
										{
										}
									}
									HX_STACK_LINE(332)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(332)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(332)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(332)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(332)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(332)
						{
							HX_STACK_LINE(332)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(332)
							if ((_this->_immutable)){
								HX_STACK_LINE(332)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(332)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(332)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(332)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",332);
								{
									HX_STACK_LINE(332)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(332)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(332)
									{
										HX_STACK_LINE(332)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(332)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(332)
											_this->_validate();
										}
									}
									HX_STACK_LINE(332)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",332);
								{
									HX_STACK_LINE(332)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(332)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(332)
									{
										HX_STACK_LINE(332)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(332)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(332)
											_this->_validate();
										}
									}
									HX_STACK_LINE(332)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(332)
						if ((!(((bool((_Function_3_1::Block(ret) == 48.5)) && bool((_Function_3_2::Block(ret) == (int)17))))))){
							HX_STACK_LINE(332)
							{
								HX_STACK_LINE(332)
								ret->zpp_inner->x = 48.5;
								HX_STACK_LINE(332)
								ret->zpp_inner->y = (int)17;
								HX_STACK_LINE(332)
								{
								}
								HX_STACK_LINE(332)
								{
								}
							}
							HX_STACK_LINE(332)
							{
								HX_STACK_LINE(332)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(332)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(332)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(332)
						ret;
					}
					HX_STACK_LINE(332)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(332)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_51{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",332);
				{
					HX_STACK_LINE(332)
					{
					}
					HX_STACK_LINE(332)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(332)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(332)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(332)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(332)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(332)
						ret->zpp_pool = null();
						HX_STACK_LINE(332)
						ret->zpp_disp = false;
						HX_STACK_LINE(332)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(332)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(332)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",332);
								{
									HX_STACK_LINE(332)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(332)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(332)
									{
										HX_STACK_LINE(332)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(332)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(332)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(332)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(332)
											ret1->next = null();
										}
										HX_STACK_LINE(332)
										ret1->weak = false;
									}
									HX_STACK_LINE(332)
									ret1->_immutable = immutable;
									HX_STACK_LINE(332)
									{
										HX_STACK_LINE(332)
										ret1->x = 10.5;
										HX_STACK_LINE(332)
										ret1->y = (int)46;
										HX_STACK_LINE(332)
										{
										}
										HX_STACK_LINE(332)
										{
										}
									}
									HX_STACK_LINE(332)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(332)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(332)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(332)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(332)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(332)
						{
							HX_STACK_LINE(332)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(332)
							if ((_this->_immutable)){
								HX_STACK_LINE(332)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(332)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(332)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(332)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",332);
								{
									HX_STACK_LINE(332)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(332)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(332)
									{
										HX_STACK_LINE(332)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(332)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(332)
											_this->_validate();
										}
									}
									HX_STACK_LINE(332)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",332);
								{
									HX_STACK_LINE(332)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(332)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(332)
									{
										HX_STACK_LINE(332)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(332)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(332)
											_this->_validate();
										}
									}
									HX_STACK_LINE(332)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(332)
						if ((!(((bool((_Function_3_1::Block(ret) == 10.5)) && bool((_Function_3_2::Block(ret) == (int)46))))))){
							HX_STACK_LINE(332)
							{
								HX_STACK_LINE(332)
								ret->zpp_inner->x = 10.5;
								HX_STACK_LINE(332)
								ret->zpp_inner->y = (int)46;
								HX_STACK_LINE(332)
								{
								}
								HX_STACK_LINE(332)
								{
								}
							}
							HX_STACK_LINE(332)
							{
								HX_STACK_LINE(332)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(332)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(332)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(332)
						ret;
					}
					HX_STACK_LINE(332)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(332)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_52{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",332);
				{
					HX_STACK_LINE(332)
					{
					}
					HX_STACK_LINE(332)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(332)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(332)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(332)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(332)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(332)
						ret->zpp_pool = null();
						HX_STACK_LINE(332)
						ret->zpp_disp = false;
						HX_STACK_LINE(332)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(332)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(332)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",332);
								{
									HX_STACK_LINE(332)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(332)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(332)
									{
										HX_STACK_LINE(332)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(332)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(332)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(332)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(332)
											ret1->next = null();
										}
										HX_STACK_LINE(332)
										ret1->weak = false;
									}
									HX_STACK_LINE(332)
									ret1->_immutable = immutable;
									HX_STACK_LINE(332)
									{
										HX_STACK_LINE(332)
										ret1->x = (int)30;
										HX_STACK_LINE(332)
										ret1->y = 49.5;
										HX_STACK_LINE(332)
										{
										}
										HX_STACK_LINE(332)
										{
										}
									}
									HX_STACK_LINE(332)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(332)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(332)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(332)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(332)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(332)
						{
							HX_STACK_LINE(332)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(332)
							if ((_this->_immutable)){
								HX_STACK_LINE(332)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(332)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(332)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(332)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",332);
								{
									HX_STACK_LINE(332)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(332)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(332)
									{
										HX_STACK_LINE(332)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(332)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(332)
											_this->_validate();
										}
									}
									HX_STACK_LINE(332)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",332);
								{
									HX_STACK_LINE(332)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(332)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(332)
									{
										HX_STACK_LINE(332)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(332)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(332)
											_this->_validate();
										}
									}
									HX_STACK_LINE(332)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(332)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)30)) && bool((_Function_3_2::Block(ret) == 49.5))))))){
							HX_STACK_LINE(332)
							{
								HX_STACK_LINE(332)
								ret->zpp_inner->x = (int)30;
								HX_STACK_LINE(332)
								ret->zpp_inner->y = 49.5;
								HX_STACK_LINE(332)
								{
								}
								HX_STACK_LINE(332)
								{
								}
							}
							HX_STACK_LINE(332)
							{
								HX_STACK_LINE(332)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(332)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(332)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(332)
						ret;
					}
					HX_STACK_LINE(332)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(332)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(331)
		::nape::shape::Polygon s8 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_49::Block()).Add(_Function_1_50::Block()).Add(_Function_1_51::Block()).Add(_Function_1_52::Block())),mat3,filt3);		HX_STACK_VAR(s8,"s8");
		HX_STACK_LINE(336)
		{
			HX_STACK_LINE(336)
			{
				HX_STACK_LINE(336)
				s8->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(336)
				if (((((  (((s8->zpp_inner->body != null()))) ? ::nape::phys::Body(s8->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body1))){
					HX_STACK_LINE(336)
					if (((s8->zpp_inner->body != null()))){
						HX_STACK_LINE(336)
						((  (((s8->zpp_inner->body != null()))) ? ::nape::phys::Body(s8->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s8);
					}
					HX_STACK_LINE(336)
					if (((body1 != null()))){
						HX_STACK_LINE(336)
						::nape::shape::ShapeList _this = body1->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(336)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(336)
							_this->push(s8);
						}
						else{
							HX_STACK_LINE(336)
							_this->unshift(s8);
						}
					}
				}
			}
			HX_STACK_LINE(336)
			if (((s8->zpp_inner->body != null()))){
				HX_STACK_LINE(336)
				s8->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(336)
				Dynamic();
			}
		}
		HX_STACK_LINE(337)
		{
			HX_STACK_LINE(337)
			{
				HX_STACK_LINE(337)
				s8->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(337)
				s8->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(337)
				s8->zpp_inner->wake();
			}
			HX_STACK_LINE(337)
			s8->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(338)
		{
			HX_STACK_LINE(338)
			{
				HX_STACK_LINE(338)
				s8->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(338)
				s8->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(338)
				{
				}
				HX_STACK_LINE(338)
				s8->zpp_inner->wake();
			}
			HX_STACK_LINE(338)
			s8->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(339)
		{
			HX_STACK_LINE(339)
			{
				HX_STACK_LINE(339)
				if (((prop3 == null()))){
					HX_STACK_LINE(339)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(339)
				s8->zpp_inner->setFluid(prop3->zpp_inner);
			}
			HX_STACK_LINE(339)
			{
				HX_STACK_LINE(339)
				s8->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(339)
				if (((s8->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(339)
					s8->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(339)
				s8->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(340)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s8){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",340);
					{
						HX_STACK_LINE(340)
						if (((s8->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(340)
							s8->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(340)
						return s8->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(340)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s8);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(340)
			{
				HX_STACK_LINE(340)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(340)
				while(((_g < _g1->length))){
					HX_STACK_LINE(340)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(340)
					++(_g);
					HX_STACK_LINE(340)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(340)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(340)
						continue;
					}
					HX_STACK_LINE(340)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(340)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(340)
					{
						HX_STACK_LINE(340)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(340)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(340)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(340)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_53{
			inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body1){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",345);
				{
					struct _Function_2_1{
						inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body1){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",345);
							{
								HX_STACK_LINE(345)
								if ((body1->zpp_inner->world)){
									HX_STACK_LINE(345)
									hx::Throw ((HX_CSTRING("Error: Space::world has no ") + HX_CSTRING("localCOM")));
								}
								HX_STACK_LINE(345)
								if (((body1->zpp_inner->wrap_localCOM == null()))){
									struct _Function_4_1{
										inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body1){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",345);
											{
												HX_STACK_LINE(345)
												Float x = body1->zpp_inner->localCOMx;		HX_STACK_VAR(x,"x");
												Float y = body1->zpp_inner->localCOMy;		HX_STACK_VAR(y,"y");
												bool weak = false;		HX_STACK_VAR(weak,"weak");
												HX_STACK_LINE(345)
												if (((bool((x != x)) || bool((y != y))))){
													HX_STACK_LINE(345)
													hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
												}
												HX_STACK_LINE(345)
												::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
												HX_STACK_LINE(345)
												if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
													HX_STACK_LINE(345)
													ret = ::nape::geom::Vec2_obj::__new(null(),null());
												}
												else{
													HX_STACK_LINE(345)
													ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
													HX_STACK_LINE(345)
													::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
													HX_STACK_LINE(345)
													ret->zpp_pool = null();
													HX_STACK_LINE(345)
													ret->zpp_disp = false;
													HX_STACK_LINE(345)
													if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
														HX_STACK_LINE(345)
														::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
													}
												}
												HX_STACK_LINE(345)
												if (((ret->zpp_inner == null()))){
													struct _Function_6_1{
														inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",345);
															{
																HX_STACK_LINE(345)
																bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
																HX_STACK_LINE(345)
																::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(345)
																{
																	HX_STACK_LINE(345)
																	if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
																		HX_STACK_LINE(345)
																		ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
																	}
																	else{
																		HX_STACK_LINE(345)
																		ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
																		HX_STACK_LINE(345)
																		::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
																		HX_STACK_LINE(345)
																		ret1->next = null();
																	}
																	HX_STACK_LINE(345)
																	ret1->weak = false;
																}
																HX_STACK_LINE(345)
																ret1->_immutable = immutable;
																HX_STACK_LINE(345)
																{
																	HX_STACK_LINE(345)
																	ret1->x = x;
																	HX_STACK_LINE(345)
																	ret1->y = y;
																	HX_STACK_LINE(345)
																	{
																	}
																	HX_STACK_LINE(345)
																	{
																	}
																}
																HX_STACK_LINE(345)
																return ret1;
															}
															return null();
														}
													};
													HX_STACK_LINE(345)
													ret->zpp_inner = _Function_6_1::Block(x,y);
													HX_STACK_LINE(345)
													ret->zpp_inner->outer = ret;
												}
												else{
													HX_STACK_LINE(345)
													if (((bool((ret != null())) && bool(ret->zpp_disp)))){
														HX_STACK_LINE(345)
														hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
													}
													HX_STACK_LINE(345)
													{
														HX_STACK_LINE(345)
														::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(345)
														if ((_this->_immutable)){
															HX_STACK_LINE(345)
															hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
														}
														HX_STACK_LINE(345)
														if (((_this->_isimmutable_dyn() != null()))){
															HX_STACK_LINE(345)
															_this->_isimmutable();
														}
													}
													HX_STACK_LINE(345)
													if (((bool((x != x)) || bool((y != y))))){
														HX_STACK_LINE(345)
														hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
													}
													struct _Function_6_1{
														inline static Float Block( ::nape::geom::Vec2 &ret){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",345);
															{
																HX_STACK_LINE(345)
																if (((bool((ret != null())) && bool(ret->zpp_disp)))){
																	HX_STACK_LINE(345)
																	hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
																}
																HX_STACK_LINE(345)
																{
																	HX_STACK_LINE(345)
																	::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(345)
																	if (((_this->_validate_dyn() != null()))){
																		HX_STACK_LINE(345)
																		_this->_validate();
																	}
																}
																HX_STACK_LINE(345)
																return ret->zpp_inner->x;
															}
															return null();
														}
													};
													struct _Function_6_2{
														inline static Float Block( ::nape::geom::Vec2 &ret){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",345);
															{
																HX_STACK_LINE(345)
																if (((bool((ret != null())) && bool(ret->zpp_disp)))){
																	HX_STACK_LINE(345)
																	hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
																}
																HX_STACK_LINE(345)
																{
																	HX_STACK_LINE(345)
																	::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(345)
																	if (((_this->_validate_dyn() != null()))){
																		HX_STACK_LINE(345)
																		_this->_validate();
																	}
																}
																HX_STACK_LINE(345)
																return ret->zpp_inner->y;
															}
															return null();
														}
													};
													HX_STACK_LINE(345)
													if ((!(((bool((_Function_6_1::Block(ret) == x)) && bool((_Function_6_2::Block(ret) == y))))))){
														HX_STACK_LINE(345)
														{
															HX_STACK_LINE(345)
															ret->zpp_inner->x = x;
															HX_STACK_LINE(345)
															ret->zpp_inner->y = y;
															HX_STACK_LINE(345)
															{
															}
															HX_STACK_LINE(345)
															{
															}
														}
														HX_STACK_LINE(345)
														{
															HX_STACK_LINE(345)
															::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(345)
															if (((_this->_invalidate_dyn() != null()))){
																HX_STACK_LINE(345)
																_this->_invalidate(_this);
															}
														}
													}
													HX_STACK_LINE(345)
													ret;
												}
												HX_STACK_LINE(345)
												ret->zpp_inner->weak = weak;
												HX_STACK_LINE(345)
												return ret;
											}
											return null();
										}
									};
									HX_STACK_LINE(345)
									body1->zpp_inner->wrap_localCOM = _Function_4_1::Block(body1);
									HX_STACK_LINE(345)
									body1->zpp_inner->wrap_localCOM->zpp_inner->_inuse = true;
									HX_STACK_LINE(345)
									body1->zpp_inner->wrap_localCOM->zpp_inner->_immutable = true;
									HX_STACK_LINE(345)
									body1->zpp_inner->wrap_localCOM->zpp_inner->_validate = body1->zpp_inner->getlocalCOM_dyn();
								}
								HX_STACK_LINE(345)
								return body1->zpp_inner->wrap_localCOM;
							}
							return null();
						}
					};
					HX_STACK_LINE(345)
					::nape::geom::Vec2 _this = _Function_2_1::Block(body1);		HX_STACK_VAR(_this,"_this");
					bool weak = false;		HX_STACK_VAR(weak,"weak");
					HX_STACK_LINE(345)
					if (((bool((_this != null())) && bool(_this->zpp_disp)))){
						HX_STACK_LINE(345)
						hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
					}
					struct _Function_2_2{
						inline static ::nape::geom::Vec2 Block( ::nape::geom::Vec2 &_this,bool &weak){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",345);
							{
								struct _Function_3_1{
									inline static Float Block( ::nape::geom::Vec2 &_this){
										HX_STACK_PUSH("*::closure","PhysicsData.hx",345);
										{
											HX_STACK_LINE(345)
											if ((_this->zpp_disp)){
												HX_STACK_LINE(345)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(345)
											{
												HX_STACK_LINE(345)
												::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
												HX_STACK_LINE(345)
												if (((_this1->_validate_dyn() != null()))){
													HX_STACK_LINE(345)
													_this1->_validate();
												}
											}
											HX_STACK_LINE(345)
											return _this->zpp_inner->x;
										}
										return null();
									}
								};
								struct _Function_3_2{
									inline static Float Block( ::nape::geom::Vec2 &_this){
										HX_STACK_PUSH("*::closure","PhysicsData.hx",345);
										{
											HX_STACK_LINE(345)
											if ((_this->zpp_disp)){
												HX_STACK_LINE(345)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(345)
											{
												HX_STACK_LINE(345)
												::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
												HX_STACK_LINE(345)
												if (((_this1->_validate_dyn() != null()))){
													HX_STACK_LINE(345)
													_this1->_validate();
												}
											}
											HX_STACK_LINE(345)
											return _this->zpp_inner->y;
										}
										return null();
									}
								};
								HX_STACK_LINE(345)
								Float x = _Function_3_1::Block(_this);		HX_STACK_VAR(x,"x");
								Float y = _Function_3_2::Block(_this);		HX_STACK_VAR(y,"y");
								HX_STACK_LINE(345)
								if (((bool((x != x)) || bool((y != y))))){
									HX_STACK_LINE(345)
									hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
								}
								HX_STACK_LINE(345)
								::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(345)
								if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
									HX_STACK_LINE(345)
									ret = ::nape::geom::Vec2_obj::__new(null(),null());
								}
								else{
									HX_STACK_LINE(345)
									ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
									HX_STACK_LINE(345)
									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
									HX_STACK_LINE(345)
									ret->zpp_pool = null();
									HX_STACK_LINE(345)
									ret->zpp_disp = false;
									HX_STACK_LINE(345)
									if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
										HX_STACK_LINE(345)
										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
									}
								}
								HX_STACK_LINE(345)
								if (((ret->zpp_inner == null()))){
									struct _Function_4_1{
										inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",345);
											{
												HX_STACK_LINE(345)
												bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
												HX_STACK_LINE(345)
												::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(345)
												{
													HX_STACK_LINE(345)
													if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
														HX_STACK_LINE(345)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
													}
													else{
														HX_STACK_LINE(345)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
														HX_STACK_LINE(345)
														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(345)
														ret1->next = null();
													}
													HX_STACK_LINE(345)
													ret1->weak = false;
												}
												HX_STACK_LINE(345)
												ret1->_immutable = immutable;
												HX_STACK_LINE(345)
												{
													HX_STACK_LINE(345)
													ret1->x = x;
													HX_STACK_LINE(345)
													ret1->y = y;
													HX_STACK_LINE(345)
													{
													}
													HX_STACK_LINE(345)
													{
													}
												}
												HX_STACK_LINE(345)
												return ret1;
											}
											return null();
										}
									};
									HX_STACK_LINE(345)
									ret->zpp_inner = _Function_4_1::Block(x,y);
									HX_STACK_LINE(345)
									ret->zpp_inner->outer = ret;
								}
								else{
									HX_STACK_LINE(345)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(345)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(345)
									{
										HX_STACK_LINE(345)
										::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
										HX_STACK_LINE(345)
										if ((_this1->_immutable)){
											HX_STACK_LINE(345)
											hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
										}
										HX_STACK_LINE(345)
										if (((_this1->_isimmutable_dyn() != null()))){
											HX_STACK_LINE(345)
											_this1->_isimmutable();
										}
									}
									HX_STACK_LINE(345)
									if (((bool((x != x)) || bool((y != y))))){
										HX_STACK_LINE(345)
										hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
									}
									struct _Function_4_1{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",345);
											{
												HX_STACK_LINE(345)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(345)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(345)
												{
													HX_STACK_LINE(345)
													::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(345)
													if (((_this1->_validate_dyn() != null()))){
														HX_STACK_LINE(345)
														_this1->_validate();
													}
												}
												HX_STACK_LINE(345)
												return ret->zpp_inner->x;
											}
											return null();
										}
									};
									struct _Function_4_2{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",345);
											{
												HX_STACK_LINE(345)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(345)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(345)
												{
													HX_STACK_LINE(345)
													::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(345)
													if (((_this1->_validate_dyn() != null()))){
														HX_STACK_LINE(345)
														_this1->_validate();
													}
												}
												HX_STACK_LINE(345)
												return ret->zpp_inner->y;
											}
											return null();
										}
									};
									HX_STACK_LINE(345)
									if ((!(((bool((_Function_4_1::Block(ret) == x)) && bool((_Function_4_2::Block(ret) == y))))))){
										HX_STACK_LINE(345)
										{
											HX_STACK_LINE(345)
											ret->zpp_inner->x = x;
											HX_STACK_LINE(345)
											ret->zpp_inner->y = y;
											HX_STACK_LINE(345)
											{
											}
											HX_STACK_LINE(345)
											{
											}
										}
										HX_STACK_LINE(345)
										{
											HX_STACK_LINE(345)
											::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
											HX_STACK_LINE(345)
											if (((_this1->_invalidate_dyn() != null()))){
												HX_STACK_LINE(345)
												_this1->_invalidate(_this1);
											}
										}
									}
									HX_STACK_LINE(345)
									ret;
								}
								HX_STACK_LINE(345)
								ret->zpp_inner->weak = weak;
								HX_STACK_LINE(345)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(345)
					return _Function_2_2::Block(_this,weak);
				}
				return null();
			}
		};
		HX_STACK_LINE(345)
		::nape::geom::Vec2 anchor1 = _Function_1_53::Block(body1);		HX_STACK_VAR(anchor1,"anchor1");
		struct _Function_1_54{
			inline static ::nape::geom::Vec2 Block( ::nape::geom::Vec2 &anchor1){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",346);
				{
					struct _Function_2_1{
						inline static Float Block( ::nape::geom::Vec2 &anchor1){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",346);
							{
								HX_STACK_LINE(346)
								if (((bool((anchor1 != null())) && bool(anchor1->zpp_disp)))){
									HX_STACK_LINE(346)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(346)
								{
									HX_STACK_LINE(346)
									::zpp_nape::geom::ZPP_Vec2 _this = anchor1->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(346)
									if (((_this->_validate_dyn() != null()))){
										HX_STACK_LINE(346)
										_this->_validate();
									}
								}
								HX_STACK_LINE(346)
								return anchor1->zpp_inner->x;
							}
							return null();
						}
					};
					struct _Function_2_2{
						inline static Float Block( ::nape::geom::Vec2 &anchor1){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",346);
							{
								HX_STACK_LINE(346)
								if (((bool((anchor1 != null())) && bool(anchor1->zpp_disp)))){
									HX_STACK_LINE(346)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(346)
								{
									HX_STACK_LINE(346)
									::zpp_nape::geom::ZPP_Vec2 _this = anchor1->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(346)
									if (((_this->_validate_dyn() != null()))){
										HX_STACK_LINE(346)
										_this->_validate();
									}
								}
								HX_STACK_LINE(346)
								return anchor1->zpp_inner->y;
							}
							return null();
						}
					};
					HX_STACK_LINE(346)
					Float x = -(_Function_2_1::Block(anchor1));		HX_STACK_VAR(x,"x");
					Float y = -(_Function_2_2::Block(anchor1));		HX_STACK_VAR(y,"y");
					struct _Function_2_3{
						inline static ::nape::geom::Vec2 Block( Float &x,Float &y){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",346);
							{
								HX_STACK_LINE(346)
								if (((bool((x != x)) || bool((y != y))))){
									HX_STACK_LINE(346)
									hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
								}
								HX_STACK_LINE(346)
								::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(346)
								if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
									HX_STACK_LINE(346)
									ret = ::nape::geom::Vec2_obj::__new(null(),null());
								}
								else{
									HX_STACK_LINE(346)
									ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
									HX_STACK_LINE(346)
									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
									HX_STACK_LINE(346)
									ret->zpp_pool = null();
									HX_STACK_LINE(346)
									ret->zpp_disp = false;
									HX_STACK_LINE(346)
									if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
										HX_STACK_LINE(346)
										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
									}
								}
								HX_STACK_LINE(346)
								if (((ret->zpp_inner == null()))){
									struct _Function_4_1{
										inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",346);
											{
												HX_STACK_LINE(346)
												bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
												HX_STACK_LINE(346)
												::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(346)
												{
													HX_STACK_LINE(346)
													if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
														HX_STACK_LINE(346)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
													}
													else{
														HX_STACK_LINE(346)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
														HX_STACK_LINE(346)
														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(346)
														ret1->next = null();
													}
													HX_STACK_LINE(346)
													ret1->weak = false;
												}
												HX_STACK_LINE(346)
												ret1->_immutable = immutable;
												HX_STACK_LINE(346)
												{
													HX_STACK_LINE(346)
													ret1->x = x;
													HX_STACK_LINE(346)
													ret1->y = y;
													HX_STACK_LINE(346)
													{
													}
													HX_STACK_LINE(346)
													{
													}
												}
												HX_STACK_LINE(346)
												return ret1;
											}
											return null();
										}
									};
									HX_STACK_LINE(346)
									ret->zpp_inner = _Function_4_1::Block(x,y);
									HX_STACK_LINE(346)
									ret->zpp_inner->outer = ret;
								}
								else{
									HX_STACK_LINE(346)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(346)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(346)
									{
										HX_STACK_LINE(346)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(346)
										if ((_this->_immutable)){
											HX_STACK_LINE(346)
											hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
										}
										HX_STACK_LINE(346)
										if (((_this->_isimmutable_dyn() != null()))){
											HX_STACK_LINE(346)
											_this->_isimmutable();
										}
									}
									HX_STACK_LINE(346)
									if (((bool((x != x)) || bool((y != y))))){
										HX_STACK_LINE(346)
										hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
									}
									struct _Function_4_1{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",346);
											{
												HX_STACK_LINE(346)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(346)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(346)
												{
													HX_STACK_LINE(346)
													::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(346)
													if (((_this->_validate_dyn() != null()))){
														HX_STACK_LINE(346)
														_this->_validate();
													}
												}
												HX_STACK_LINE(346)
												return ret->zpp_inner->x;
											}
											return null();
										}
									};
									struct _Function_4_2{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",346);
											{
												HX_STACK_LINE(346)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(346)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(346)
												{
													HX_STACK_LINE(346)
													::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(346)
													if (((_this->_validate_dyn() != null()))){
														HX_STACK_LINE(346)
														_this->_validate();
													}
												}
												HX_STACK_LINE(346)
												return ret->zpp_inner->y;
											}
											return null();
										}
									};
									HX_STACK_LINE(346)
									if ((!(((bool((_Function_4_1::Block(ret) == x)) && bool((_Function_4_2::Block(ret) == y))))))){
										HX_STACK_LINE(346)
										{
											HX_STACK_LINE(346)
											ret->zpp_inner->x = x;
											HX_STACK_LINE(346)
											ret->zpp_inner->y = y;
											HX_STACK_LINE(346)
											{
											}
											HX_STACK_LINE(346)
											{
											}
										}
										HX_STACK_LINE(346)
										{
											HX_STACK_LINE(346)
											::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(346)
											if (((_this->_invalidate_dyn() != null()))){
												HX_STACK_LINE(346)
												_this->_invalidate(_this);
											}
										}
									}
									HX_STACK_LINE(346)
									ret;
								}
								HX_STACK_LINE(346)
								ret->zpp_inner->weak = true;
								HX_STACK_LINE(346)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(346)
					return _Function_2_3::Block(x,y);
				}
				return null();
			}
		};
		HX_STACK_LINE(346)
		body1->translateShapes(_Function_1_54::Block(anchor1));
		HX_STACK_LINE(347)
		{
			struct _Function_2_1{
				inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body1){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",347);
					{
						HX_STACK_LINE(347)
						if (((body1->zpp_inner->wrap_pos == null()))){
							HX_STACK_LINE(347)
							body1->zpp_inner->setupPosition();
						}
						HX_STACK_LINE(347)
						return body1->zpp_inner->wrap_pos;
					}
					return null();
				}
			};
			HX_STACK_LINE(347)
			::nape::geom::Vec2 _this = _Function_2_1::Block(body1);		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(347)
			if (((bool((_this != null())) && bool(_this->zpp_disp)))){
				HX_STACK_LINE(347)
				hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
			}
			HX_STACK_LINE(347)
			{
				HX_STACK_LINE(347)
				::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
				HX_STACK_LINE(347)
				if ((_this1->_immutable)){
					HX_STACK_LINE(347)
					hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
				}
				HX_STACK_LINE(347)
				if (((_this1->_isimmutable_dyn() != null()))){
					HX_STACK_LINE(347)
					_this1->_isimmutable();
				}
			}
			HX_STACK_LINE(347)
			{
			}
			struct _Function_2_2{
				inline static Float Block( ::nape::geom::Vec2 &_this){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",347);
					{
						HX_STACK_LINE(347)
						if (((bool((_this != null())) && bool(_this->zpp_disp)))){
							HX_STACK_LINE(347)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(347)
						{
							HX_STACK_LINE(347)
							::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(347)
							if (((_this1->_validate_dyn() != null()))){
								HX_STACK_LINE(347)
								_this1->_validate();
							}
						}
						HX_STACK_LINE(347)
						return _this->zpp_inner->x;
					}
					return null();
				}
			};
			struct _Function_2_3{
				inline static Float Block( ::nape::geom::Vec2 &_this){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",347);
					{
						HX_STACK_LINE(347)
						if (((bool((_this != null())) && bool(_this->zpp_disp)))){
							HX_STACK_LINE(347)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(347)
						{
							HX_STACK_LINE(347)
							::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(347)
							if (((_this1->_validate_dyn() != null()))){
								HX_STACK_LINE(347)
								_this1->_validate();
							}
						}
						HX_STACK_LINE(347)
						return _this->zpp_inner->y;
					}
					return null();
				}
			};
			HX_STACK_LINE(347)
			if ((!(((bool((_Function_2_2::Block(_this) == (int)0)) && bool((_Function_2_3::Block(_this) == (int)0))))))){
				HX_STACK_LINE(347)
				{
					HX_STACK_LINE(347)
					_this->zpp_inner->x = (int)0;
					HX_STACK_LINE(347)
					_this->zpp_inner->y = (int)0;
					HX_STACK_LINE(347)
					{
					}
					HX_STACK_LINE(347)
					{
					}
				}
				HX_STACK_LINE(347)
				{
					HX_STACK_LINE(347)
					::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
					HX_STACK_LINE(347)
					if (((_this1->_invalidate_dyn() != null()))){
						HX_STACK_LINE(347)
						_this1->_invalidate(_this1);
					}
				}
			}
			HX_STACK_LINE(347)
			_this;
		}
		struct _Function_1_55{
			inline static Dynamic Block( ::nape::phys::Body &body1,::nape::geom::Vec2 &anchor1){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",349);
				{
					hx::Anon __result = hx::Anon_obj::Create();
					__result->Add(HX_CSTRING("body") , body1,false);
					__result->Add(HX_CSTRING("anchor") , anchor1,false);
					return __result;
				}
				return null();
			}
		};
		HX_STACK_LINE(349)
		::PhysicsData_obj::bodies->set(HX_CSTRING("8ball"),_Function_1_55::Block(body1,anchor1));
		HX_STACK_LINE(351)
		::nape::phys::Body body2 = ::nape::phys::Body_obj::__new(null(),null());		HX_STACK_VAR(body2,"body2");
		HX_STACK_LINE(352)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::phys::Body &body2){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",352);
					{
						HX_STACK_LINE(352)
						if (((body2->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(352)
							body2->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(352)
						return body2->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(352)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(body2);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(352)
			{
				HX_STACK_LINE(352)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(352)
				while(((_g < _g1->length))){
					HX_STACK_LINE(352)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(352)
					++(_g);
					HX_STACK_LINE(352)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(352)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(352)
						continue;
					}
					HX_STACK_LINE(352)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(352)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(352)
					{
						HX_STACK_LINE(352)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(352)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(352)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(352)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		HX_STACK_LINE(355)
		::nape::phys::Material mat4 = ::nape::phys::Material_obj::__new(null(),null(),null(),null(),null());		HX_STACK_VAR(mat4,"mat4");
		HX_STACK_LINE(356)
		::nape::dynamics::InteractionFilter filt4 = ::nape::dynamics::InteractionFilter_obj::__new(null(),null(),null(),null(),null(),null());		HX_STACK_VAR(filt4,"filt4");
		HX_STACK_LINE(357)
		::nape::phys::FluidProperties prop4 = ::nape::phys::FluidProperties_obj::__new(null(),null());		HX_STACK_VAR(prop4,"prop4");
		struct _Function_1_56{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
				{
					HX_STACK_LINE(362)
					{
					}
					HX_STACK_LINE(362)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(362)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(362)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(362)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(362)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(362)
						ret->zpp_pool = null();
						HX_STACK_LINE(362)
						ret->zpp_disp = false;
						HX_STACK_LINE(362)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(362)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(362)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
								{
									HX_STACK_LINE(362)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(362)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(362)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(362)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(362)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(362)
											ret1->next = null();
										}
										HX_STACK_LINE(362)
										ret1->weak = false;
									}
									HX_STACK_LINE(362)
									ret1->_immutable = immutable;
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										ret1->x = (int)137;
										HX_STACK_LINE(362)
										ret1->y = 126.5;
										HX_STACK_LINE(362)
										{
										}
										HX_STACK_LINE(362)
										{
										}
									}
									HX_STACK_LINE(362)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(362)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(362)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(362)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(362)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(362)
						{
							HX_STACK_LINE(362)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(362)
							if ((_this->_immutable)){
								HX_STACK_LINE(362)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(362)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(362)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(362)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
								{
									HX_STACK_LINE(362)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(362)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(362)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(362)
											_this->_validate();
										}
									}
									HX_STACK_LINE(362)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
								{
									HX_STACK_LINE(362)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(362)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(362)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(362)
											_this->_validate();
										}
									}
									HX_STACK_LINE(362)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(362)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)137)) && bool((_Function_3_2::Block(ret) == 126.5))))))){
							HX_STACK_LINE(362)
							{
								HX_STACK_LINE(362)
								ret->zpp_inner->x = (int)137;
								HX_STACK_LINE(362)
								ret->zpp_inner->y = 126.5;
								HX_STACK_LINE(362)
								{
								}
								HX_STACK_LINE(362)
								{
								}
							}
							HX_STACK_LINE(362)
							{
								HX_STACK_LINE(362)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(362)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(362)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(362)
						ret;
					}
					HX_STACK_LINE(362)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(362)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_57{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
				{
					HX_STACK_LINE(362)
					{
					}
					HX_STACK_LINE(362)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(362)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(362)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(362)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(362)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(362)
						ret->zpp_pool = null();
						HX_STACK_LINE(362)
						ret->zpp_disp = false;
						HX_STACK_LINE(362)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(362)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(362)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
								{
									HX_STACK_LINE(362)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(362)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(362)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(362)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(362)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(362)
											ret1->next = null();
										}
										HX_STACK_LINE(362)
										ret1->weak = false;
									}
									HX_STACK_LINE(362)
									ret1->_immutable = immutable;
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										ret1->x = (int)142;
										HX_STACK_LINE(362)
										ret1->y = 111.5;
										HX_STACK_LINE(362)
										{
										}
										HX_STACK_LINE(362)
										{
										}
									}
									HX_STACK_LINE(362)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(362)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(362)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(362)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(362)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(362)
						{
							HX_STACK_LINE(362)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(362)
							if ((_this->_immutable)){
								HX_STACK_LINE(362)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(362)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(362)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(362)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
								{
									HX_STACK_LINE(362)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(362)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(362)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(362)
											_this->_validate();
										}
									}
									HX_STACK_LINE(362)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
								{
									HX_STACK_LINE(362)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(362)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(362)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(362)
											_this->_validate();
										}
									}
									HX_STACK_LINE(362)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(362)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)142)) && bool((_Function_3_2::Block(ret) == 111.5))))))){
							HX_STACK_LINE(362)
							{
								HX_STACK_LINE(362)
								ret->zpp_inner->x = (int)142;
								HX_STACK_LINE(362)
								ret->zpp_inner->y = 111.5;
								HX_STACK_LINE(362)
								{
								}
								HX_STACK_LINE(362)
								{
								}
							}
							HX_STACK_LINE(362)
							{
								HX_STACK_LINE(362)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(362)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(362)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(362)
						ret;
					}
					HX_STACK_LINE(362)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(362)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_58{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
				{
					HX_STACK_LINE(362)
					{
					}
					HX_STACK_LINE(362)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(362)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(362)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(362)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(362)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(362)
						ret->zpp_pool = null();
						HX_STACK_LINE(362)
						ret->zpp_disp = false;
						HX_STACK_LINE(362)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(362)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(362)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
								{
									HX_STACK_LINE(362)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(362)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(362)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(362)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(362)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(362)
											ret1->next = null();
										}
										HX_STACK_LINE(362)
										ret1->weak = false;
									}
									HX_STACK_LINE(362)
									ret1->_immutable = immutable;
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										ret1->x = 133.5;
										HX_STACK_LINE(362)
										ret1->y = (int)84;
										HX_STACK_LINE(362)
										{
										}
										HX_STACK_LINE(362)
										{
										}
									}
									HX_STACK_LINE(362)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(362)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(362)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(362)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(362)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(362)
						{
							HX_STACK_LINE(362)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(362)
							if ((_this->_immutable)){
								HX_STACK_LINE(362)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(362)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(362)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(362)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
								{
									HX_STACK_LINE(362)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(362)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(362)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(362)
											_this->_validate();
										}
									}
									HX_STACK_LINE(362)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
								{
									HX_STACK_LINE(362)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(362)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(362)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(362)
											_this->_validate();
										}
									}
									HX_STACK_LINE(362)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(362)
						if ((!(((bool((_Function_3_1::Block(ret) == 133.5)) && bool((_Function_3_2::Block(ret) == (int)84))))))){
							HX_STACK_LINE(362)
							{
								HX_STACK_LINE(362)
								ret->zpp_inner->x = 133.5;
								HX_STACK_LINE(362)
								ret->zpp_inner->y = (int)84;
								HX_STACK_LINE(362)
								{
								}
								HX_STACK_LINE(362)
								{
								}
							}
							HX_STACK_LINE(362)
							{
								HX_STACK_LINE(362)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(362)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(362)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(362)
						ret;
					}
					HX_STACK_LINE(362)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(362)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_59{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
				{
					HX_STACK_LINE(362)
					{
					}
					HX_STACK_LINE(362)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(362)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(362)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(362)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(362)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(362)
						ret->zpp_pool = null();
						HX_STACK_LINE(362)
						ret->zpp_disp = false;
						HX_STACK_LINE(362)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(362)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(362)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
								{
									HX_STACK_LINE(362)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(362)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(362)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(362)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(362)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(362)
											ret1->next = null();
										}
										HX_STACK_LINE(362)
										ret1->weak = false;
									}
									HX_STACK_LINE(362)
									ret1->_immutable = immutable;
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										ret1->x = (int)118;
										HX_STACK_LINE(362)
										ret1->y = 63.5;
										HX_STACK_LINE(362)
										{
										}
										HX_STACK_LINE(362)
										{
										}
									}
									HX_STACK_LINE(362)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(362)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(362)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(362)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(362)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(362)
						{
							HX_STACK_LINE(362)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(362)
							if ((_this->_immutable)){
								HX_STACK_LINE(362)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(362)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(362)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(362)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
								{
									HX_STACK_LINE(362)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(362)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(362)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(362)
											_this->_validate();
										}
									}
									HX_STACK_LINE(362)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
								{
									HX_STACK_LINE(362)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(362)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(362)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(362)
											_this->_validate();
										}
									}
									HX_STACK_LINE(362)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(362)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)118)) && bool((_Function_3_2::Block(ret) == 63.5))))))){
							HX_STACK_LINE(362)
							{
								HX_STACK_LINE(362)
								ret->zpp_inner->x = (int)118;
								HX_STACK_LINE(362)
								ret->zpp_inner->y = 63.5;
								HX_STACK_LINE(362)
								{
								}
								HX_STACK_LINE(362)
								{
								}
							}
							HX_STACK_LINE(362)
							{
								HX_STACK_LINE(362)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(362)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(362)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(362)
						ret;
					}
					HX_STACK_LINE(362)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(362)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_60{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
				{
					HX_STACK_LINE(362)
					{
					}
					HX_STACK_LINE(362)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(362)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(362)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(362)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(362)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(362)
						ret->zpp_pool = null();
						HX_STACK_LINE(362)
						ret->zpp_disp = false;
						HX_STACK_LINE(362)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(362)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(362)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
								{
									HX_STACK_LINE(362)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(362)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(362)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(362)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(362)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(362)
											ret1->next = null();
										}
										HX_STACK_LINE(362)
										ret1->weak = false;
									}
									HX_STACK_LINE(362)
									ret1->_immutable = immutable;
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										ret1->x = 122.5;
										HX_STACK_LINE(362)
										ret1->y = (int)92;
										HX_STACK_LINE(362)
										{
										}
										HX_STACK_LINE(362)
										{
										}
									}
									HX_STACK_LINE(362)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(362)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(362)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(362)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(362)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(362)
						{
							HX_STACK_LINE(362)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(362)
							if ((_this->_immutable)){
								HX_STACK_LINE(362)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(362)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(362)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(362)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
								{
									HX_STACK_LINE(362)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(362)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(362)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(362)
											_this->_validate();
										}
									}
									HX_STACK_LINE(362)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
								{
									HX_STACK_LINE(362)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(362)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(362)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(362)
											_this->_validate();
										}
									}
									HX_STACK_LINE(362)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(362)
						if ((!(((bool((_Function_3_1::Block(ret) == 122.5)) && bool((_Function_3_2::Block(ret) == (int)92))))))){
							HX_STACK_LINE(362)
							{
								HX_STACK_LINE(362)
								ret->zpp_inner->x = 122.5;
								HX_STACK_LINE(362)
								ret->zpp_inner->y = (int)92;
								HX_STACK_LINE(362)
								{
								}
								HX_STACK_LINE(362)
								{
								}
							}
							HX_STACK_LINE(362)
							{
								HX_STACK_LINE(362)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(362)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(362)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(362)
						ret;
					}
					HX_STACK_LINE(362)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(362)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_61{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
				{
					HX_STACK_LINE(362)
					{
					}
					HX_STACK_LINE(362)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(362)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(362)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(362)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(362)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(362)
						ret->zpp_pool = null();
						HX_STACK_LINE(362)
						ret->zpp_disp = false;
						HX_STACK_LINE(362)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(362)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(362)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
								{
									HX_STACK_LINE(362)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(362)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(362)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(362)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(362)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(362)
											ret1->next = null();
										}
										HX_STACK_LINE(362)
										ret1->weak = false;
									}
									HX_STACK_LINE(362)
									ret1->_immutable = immutable;
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										ret1->x = 128.5;
										HX_STACK_LINE(362)
										ret1->y = (int)122;
										HX_STACK_LINE(362)
										{
										}
										HX_STACK_LINE(362)
										{
										}
									}
									HX_STACK_LINE(362)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(362)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(362)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(362)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(362)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(362)
						{
							HX_STACK_LINE(362)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(362)
							if ((_this->_immutable)){
								HX_STACK_LINE(362)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(362)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(362)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(362)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
								{
									HX_STACK_LINE(362)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(362)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(362)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(362)
											_this->_validate();
										}
									}
									HX_STACK_LINE(362)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",362);
								{
									HX_STACK_LINE(362)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(362)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(362)
									{
										HX_STACK_LINE(362)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(362)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(362)
											_this->_validate();
										}
									}
									HX_STACK_LINE(362)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(362)
						if ((!(((bool((_Function_3_1::Block(ret) == 128.5)) && bool((_Function_3_2::Block(ret) == (int)122))))))){
							HX_STACK_LINE(362)
							{
								HX_STACK_LINE(362)
								ret->zpp_inner->x = 128.5;
								HX_STACK_LINE(362)
								ret->zpp_inner->y = (int)122;
								HX_STACK_LINE(362)
								{
								}
								HX_STACK_LINE(362)
								{
								}
							}
							HX_STACK_LINE(362)
							{
								HX_STACK_LINE(362)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(362)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(362)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(362)
						ret;
					}
					HX_STACK_LINE(362)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(362)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(361)
		::nape::shape::Polygon s9 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_56::Block()).Add(_Function_1_57::Block()).Add(_Function_1_58::Block()).Add(_Function_1_59::Block()).Add(_Function_1_60::Block()).Add(_Function_1_61::Block())),mat4,filt4);		HX_STACK_VAR(s9,"s9");
		HX_STACK_LINE(366)
		{
			HX_STACK_LINE(366)
			{
				HX_STACK_LINE(366)
				s9->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(366)
				if (((((  (((s9->zpp_inner->body != null()))) ? ::nape::phys::Body(s9->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body2))){
					HX_STACK_LINE(366)
					if (((s9->zpp_inner->body != null()))){
						HX_STACK_LINE(366)
						((  (((s9->zpp_inner->body != null()))) ? ::nape::phys::Body(s9->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s9);
					}
					HX_STACK_LINE(366)
					if (((body2 != null()))){
						HX_STACK_LINE(366)
						::nape::shape::ShapeList _this = body2->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(366)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(366)
							_this->push(s9);
						}
						else{
							HX_STACK_LINE(366)
							_this->unshift(s9);
						}
					}
				}
			}
			HX_STACK_LINE(366)
			if (((s9->zpp_inner->body != null()))){
				HX_STACK_LINE(366)
				s9->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(366)
				Dynamic();
			}
		}
		HX_STACK_LINE(367)
		{
			HX_STACK_LINE(367)
			{
				HX_STACK_LINE(367)
				s9->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(367)
				s9->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(367)
				s9->zpp_inner->wake();
			}
			HX_STACK_LINE(367)
			s9->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(368)
		{
			HX_STACK_LINE(368)
			{
				HX_STACK_LINE(368)
				s9->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(368)
				s9->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(368)
				{
				}
				HX_STACK_LINE(368)
				s9->zpp_inner->wake();
			}
			HX_STACK_LINE(368)
			s9->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(369)
		{
			HX_STACK_LINE(369)
			{
				HX_STACK_LINE(369)
				if (((prop4 == null()))){
					HX_STACK_LINE(369)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(369)
				s9->zpp_inner->setFluid(prop4->zpp_inner);
			}
			HX_STACK_LINE(369)
			{
				HX_STACK_LINE(369)
				s9->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(369)
				if (((s9->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(369)
					s9->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(369)
				s9->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(370)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s9){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",370);
					{
						HX_STACK_LINE(370)
						if (((s9->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(370)
							s9->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(370)
						return s9->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(370)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s9);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(370)
			{
				HX_STACK_LINE(370)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(370)
				while(((_g < _g1->length))){
					HX_STACK_LINE(370)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(370)
					++(_g);
					HX_STACK_LINE(370)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(370)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(370)
						continue;
					}
					HX_STACK_LINE(370)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(370)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(370)
					{
						HX_STACK_LINE(370)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(370)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(370)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(370)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_62{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",373);
				{
					HX_STACK_LINE(373)
					{
					}
					HX_STACK_LINE(373)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(373)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(373)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(373)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(373)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(373)
						ret->zpp_pool = null();
						HX_STACK_LINE(373)
						ret->zpp_disp = false;
						HX_STACK_LINE(373)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(373)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(373)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",373);
								{
									HX_STACK_LINE(373)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(373)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(373)
									{
										HX_STACK_LINE(373)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(373)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(373)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(373)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(373)
											ret1->next = null();
										}
										HX_STACK_LINE(373)
										ret1->weak = false;
									}
									HX_STACK_LINE(373)
									ret1->_immutable = immutable;
									HX_STACK_LINE(373)
									{
										HX_STACK_LINE(373)
										ret1->x = (int)74;
										HX_STACK_LINE(373)
										ret1->y = 131.5;
										HX_STACK_LINE(373)
										{
										}
										HX_STACK_LINE(373)
										{
										}
									}
									HX_STACK_LINE(373)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(373)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(373)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(373)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(373)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(373)
						{
							HX_STACK_LINE(373)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(373)
							if ((_this->_immutable)){
								HX_STACK_LINE(373)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(373)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(373)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(373)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",373);
								{
									HX_STACK_LINE(373)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(373)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(373)
									{
										HX_STACK_LINE(373)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(373)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(373)
											_this->_validate();
										}
									}
									HX_STACK_LINE(373)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",373);
								{
									HX_STACK_LINE(373)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(373)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(373)
									{
										HX_STACK_LINE(373)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(373)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(373)
											_this->_validate();
										}
									}
									HX_STACK_LINE(373)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(373)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)74)) && bool((_Function_3_2::Block(ret) == 131.5))))))){
							HX_STACK_LINE(373)
							{
								HX_STACK_LINE(373)
								ret->zpp_inner->x = (int)74;
								HX_STACK_LINE(373)
								ret->zpp_inner->y = 131.5;
								HX_STACK_LINE(373)
								{
								}
								HX_STACK_LINE(373)
								{
								}
							}
							HX_STACK_LINE(373)
							{
								HX_STACK_LINE(373)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(373)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(373)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(373)
						ret;
					}
					HX_STACK_LINE(373)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(373)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_63{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",373);
				{
					HX_STACK_LINE(373)
					{
					}
					HX_STACK_LINE(373)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(373)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(373)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(373)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(373)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(373)
						ret->zpp_pool = null();
						HX_STACK_LINE(373)
						ret->zpp_disp = false;
						HX_STACK_LINE(373)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(373)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(373)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",373);
								{
									HX_STACK_LINE(373)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(373)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(373)
									{
										HX_STACK_LINE(373)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(373)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(373)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(373)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(373)
											ret1->next = null();
										}
										HX_STACK_LINE(373)
										ret1->weak = false;
									}
									HX_STACK_LINE(373)
									ret1->_immutable = immutable;
									HX_STACK_LINE(373)
									{
										HX_STACK_LINE(373)
										ret1->x = (int)78;
										HX_STACK_LINE(373)
										ret1->y = 112.5;
										HX_STACK_LINE(373)
										{
										}
										HX_STACK_LINE(373)
										{
										}
									}
									HX_STACK_LINE(373)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(373)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(373)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(373)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(373)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(373)
						{
							HX_STACK_LINE(373)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(373)
							if ((_this->_immutable)){
								HX_STACK_LINE(373)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(373)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(373)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(373)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",373);
								{
									HX_STACK_LINE(373)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(373)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(373)
									{
										HX_STACK_LINE(373)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(373)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(373)
											_this->_validate();
										}
									}
									HX_STACK_LINE(373)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",373);
								{
									HX_STACK_LINE(373)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(373)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(373)
									{
										HX_STACK_LINE(373)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(373)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(373)
											_this->_validate();
										}
									}
									HX_STACK_LINE(373)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(373)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)78)) && bool((_Function_3_2::Block(ret) == 112.5))))))){
							HX_STACK_LINE(373)
							{
								HX_STACK_LINE(373)
								ret->zpp_inner->x = (int)78;
								HX_STACK_LINE(373)
								ret->zpp_inner->y = 112.5;
								HX_STACK_LINE(373)
								{
								}
								HX_STACK_LINE(373)
								{
								}
							}
							HX_STACK_LINE(373)
							{
								HX_STACK_LINE(373)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(373)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(373)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(373)
						ret;
					}
					HX_STACK_LINE(373)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(373)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_64{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",373);
				{
					HX_STACK_LINE(373)
					{
					}
					HX_STACK_LINE(373)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(373)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(373)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(373)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(373)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(373)
						ret->zpp_pool = null();
						HX_STACK_LINE(373)
						ret->zpp_disp = false;
						HX_STACK_LINE(373)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(373)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(373)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",373);
								{
									HX_STACK_LINE(373)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(373)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(373)
									{
										HX_STACK_LINE(373)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(373)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(373)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(373)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(373)
											ret1->next = null();
										}
										HX_STACK_LINE(373)
										ret1->weak = false;
									}
									HX_STACK_LINE(373)
									ret1->_immutable = immutable;
									HX_STACK_LINE(373)
									{
										HX_STACK_LINE(373)
										ret1->x = (int)59;
										HX_STACK_LINE(373)
										ret1->y = 90.5;
										HX_STACK_LINE(373)
										{
										}
										HX_STACK_LINE(373)
										{
										}
									}
									HX_STACK_LINE(373)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(373)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(373)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(373)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(373)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(373)
						{
							HX_STACK_LINE(373)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(373)
							if ((_this->_immutable)){
								HX_STACK_LINE(373)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(373)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(373)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(373)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",373);
								{
									HX_STACK_LINE(373)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(373)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(373)
									{
										HX_STACK_LINE(373)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(373)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(373)
											_this->_validate();
										}
									}
									HX_STACK_LINE(373)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",373);
								{
									HX_STACK_LINE(373)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(373)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(373)
									{
										HX_STACK_LINE(373)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(373)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(373)
											_this->_validate();
										}
									}
									HX_STACK_LINE(373)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(373)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)59)) && bool((_Function_3_2::Block(ret) == 90.5))))))){
							HX_STACK_LINE(373)
							{
								HX_STACK_LINE(373)
								ret->zpp_inner->x = (int)59;
								HX_STACK_LINE(373)
								ret->zpp_inner->y = 90.5;
								HX_STACK_LINE(373)
								{
								}
								HX_STACK_LINE(373)
								{
								}
							}
							HX_STACK_LINE(373)
							{
								HX_STACK_LINE(373)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(373)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(373)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(373)
						ret;
					}
					HX_STACK_LINE(373)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(373)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_65{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",373);
				{
					HX_STACK_LINE(373)
					{
					}
					HX_STACK_LINE(373)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(373)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(373)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(373)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(373)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(373)
						ret->zpp_pool = null();
						HX_STACK_LINE(373)
						ret->zpp_disp = false;
						HX_STACK_LINE(373)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(373)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(373)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",373);
								{
									HX_STACK_LINE(373)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(373)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(373)
									{
										HX_STACK_LINE(373)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(373)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(373)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(373)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(373)
											ret1->next = null();
										}
										HX_STACK_LINE(373)
										ret1->weak = false;
									}
									HX_STACK_LINE(373)
									ret1->_immutable = immutable;
									HX_STACK_LINE(373)
									{
										HX_STACK_LINE(373)
										ret1->x = (int)69;
										HX_STACK_LINE(373)
										ret1->y = 122.5;
										HX_STACK_LINE(373)
										{
										}
										HX_STACK_LINE(373)
										{
										}
									}
									HX_STACK_LINE(373)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(373)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(373)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(373)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(373)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(373)
						{
							HX_STACK_LINE(373)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(373)
							if ((_this->_immutable)){
								HX_STACK_LINE(373)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(373)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(373)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(373)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",373);
								{
									HX_STACK_LINE(373)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(373)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(373)
									{
										HX_STACK_LINE(373)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(373)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(373)
											_this->_validate();
										}
									}
									HX_STACK_LINE(373)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",373);
								{
									HX_STACK_LINE(373)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(373)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(373)
									{
										HX_STACK_LINE(373)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(373)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(373)
											_this->_validate();
										}
									}
									HX_STACK_LINE(373)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(373)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)69)) && bool((_Function_3_2::Block(ret) == 122.5))))))){
							HX_STACK_LINE(373)
							{
								HX_STACK_LINE(373)
								ret->zpp_inner->x = (int)69;
								HX_STACK_LINE(373)
								ret->zpp_inner->y = 122.5;
								HX_STACK_LINE(373)
								{
								}
								HX_STACK_LINE(373)
								{
								}
							}
							HX_STACK_LINE(373)
							{
								HX_STACK_LINE(373)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(373)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(373)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(373)
						ret;
					}
					HX_STACK_LINE(373)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(373)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(372)
		::nape::shape::Polygon s10 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_62::Block()).Add(_Function_1_63::Block()).Add(_Function_1_64::Block()).Add(_Function_1_65::Block())),mat4,filt4);		HX_STACK_VAR(s10,"s10");
		HX_STACK_LINE(377)
		{
			HX_STACK_LINE(377)
			{
				HX_STACK_LINE(377)
				s10->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(377)
				if (((((  (((s10->zpp_inner->body != null()))) ? ::nape::phys::Body(s10->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body2))){
					HX_STACK_LINE(377)
					if (((s10->zpp_inner->body != null()))){
						HX_STACK_LINE(377)
						((  (((s10->zpp_inner->body != null()))) ? ::nape::phys::Body(s10->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s10);
					}
					HX_STACK_LINE(377)
					if (((body2 != null()))){
						HX_STACK_LINE(377)
						::nape::shape::ShapeList _this = body2->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(377)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(377)
							_this->push(s10);
						}
						else{
							HX_STACK_LINE(377)
							_this->unshift(s10);
						}
					}
				}
			}
			HX_STACK_LINE(377)
			if (((s10->zpp_inner->body != null()))){
				HX_STACK_LINE(377)
				s10->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(377)
				Dynamic();
			}
		}
		HX_STACK_LINE(378)
		{
			HX_STACK_LINE(378)
			{
				HX_STACK_LINE(378)
				s10->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(378)
				s10->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(378)
				s10->zpp_inner->wake();
			}
			HX_STACK_LINE(378)
			s10->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(379)
		{
			HX_STACK_LINE(379)
			{
				HX_STACK_LINE(379)
				s10->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(379)
				s10->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(379)
				{
				}
				HX_STACK_LINE(379)
				s10->zpp_inner->wake();
			}
			HX_STACK_LINE(379)
			s10->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(380)
		{
			HX_STACK_LINE(380)
			{
				HX_STACK_LINE(380)
				if (((prop4 == null()))){
					HX_STACK_LINE(380)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(380)
				s10->zpp_inner->setFluid(prop4->zpp_inner);
			}
			HX_STACK_LINE(380)
			{
				HX_STACK_LINE(380)
				s10->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(380)
				if (((s10->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(380)
					s10->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(380)
				s10->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(381)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s10){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",381);
					{
						HX_STACK_LINE(381)
						if (((s10->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(381)
							s10->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(381)
						return s10->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(381)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s10);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(381)
			{
				HX_STACK_LINE(381)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(381)
				while(((_g < _g1->length))){
					HX_STACK_LINE(381)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(381)
					++(_g);
					HX_STACK_LINE(381)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(381)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(381)
						continue;
					}
					HX_STACK_LINE(381)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(381)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(381)
					{
						HX_STACK_LINE(381)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(381)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(381)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(381)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_66{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
				{
					HX_STACK_LINE(384)
					{
					}
					HX_STACK_LINE(384)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(384)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(384)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(384)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(384)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(384)
						ret->zpp_pool = null();
						HX_STACK_LINE(384)
						ret->zpp_disp = false;
						HX_STACK_LINE(384)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(384)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(384)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
								{
									HX_STACK_LINE(384)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(384)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(384)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(384)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(384)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(384)
											ret1->next = null();
										}
										HX_STACK_LINE(384)
										ret1->weak = false;
									}
									HX_STACK_LINE(384)
									ret1->_immutable = immutable;
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										ret1->x = 34.5;
										HX_STACK_LINE(384)
										ret1->y = (int)26;
										HX_STACK_LINE(384)
										{
										}
										HX_STACK_LINE(384)
										{
										}
									}
									HX_STACK_LINE(384)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(384)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(384)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(384)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(384)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(384)
						{
							HX_STACK_LINE(384)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(384)
							if ((_this->_immutable)){
								HX_STACK_LINE(384)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(384)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(384)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(384)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
								{
									HX_STACK_LINE(384)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(384)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(384)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(384)
											_this->_validate();
										}
									}
									HX_STACK_LINE(384)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
								{
									HX_STACK_LINE(384)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(384)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(384)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(384)
											_this->_validate();
										}
									}
									HX_STACK_LINE(384)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(384)
						if ((!(((bool((_Function_3_1::Block(ret) == 34.5)) && bool((_Function_3_2::Block(ret) == (int)26))))))){
							HX_STACK_LINE(384)
							{
								HX_STACK_LINE(384)
								ret->zpp_inner->x = 34.5;
								HX_STACK_LINE(384)
								ret->zpp_inner->y = (int)26;
								HX_STACK_LINE(384)
								{
								}
								HX_STACK_LINE(384)
								{
								}
							}
							HX_STACK_LINE(384)
							{
								HX_STACK_LINE(384)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(384)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(384)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(384)
						ret;
					}
					HX_STACK_LINE(384)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(384)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_67{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
				{
					HX_STACK_LINE(384)
					{
					}
					HX_STACK_LINE(384)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(384)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(384)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(384)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(384)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(384)
						ret->zpp_pool = null();
						HX_STACK_LINE(384)
						ret->zpp_disp = false;
						HX_STACK_LINE(384)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(384)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(384)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
								{
									HX_STACK_LINE(384)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(384)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(384)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(384)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(384)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(384)
											ret1->next = null();
										}
										HX_STACK_LINE(384)
										ret1->weak = false;
									}
									HX_STACK_LINE(384)
									ret1->_immutable = immutable;
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										ret1->x = 25.5;
										HX_STACK_LINE(384)
										ret1->y = (int)38;
										HX_STACK_LINE(384)
										{
										}
										HX_STACK_LINE(384)
										{
										}
									}
									HX_STACK_LINE(384)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(384)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(384)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(384)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(384)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(384)
						{
							HX_STACK_LINE(384)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(384)
							if ((_this->_immutable)){
								HX_STACK_LINE(384)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(384)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(384)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(384)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
								{
									HX_STACK_LINE(384)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(384)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(384)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(384)
											_this->_validate();
										}
									}
									HX_STACK_LINE(384)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
								{
									HX_STACK_LINE(384)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(384)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(384)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(384)
											_this->_validate();
										}
									}
									HX_STACK_LINE(384)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(384)
						if ((!(((bool((_Function_3_1::Block(ret) == 25.5)) && bool((_Function_3_2::Block(ret) == (int)38))))))){
							HX_STACK_LINE(384)
							{
								HX_STACK_LINE(384)
								ret->zpp_inner->x = 25.5;
								HX_STACK_LINE(384)
								ret->zpp_inner->y = (int)38;
								HX_STACK_LINE(384)
								{
								}
								HX_STACK_LINE(384)
								{
								}
							}
							HX_STACK_LINE(384)
							{
								HX_STACK_LINE(384)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(384)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(384)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(384)
						ret;
					}
					HX_STACK_LINE(384)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(384)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_68{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
				{
					HX_STACK_LINE(384)
					{
					}
					HX_STACK_LINE(384)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(384)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(384)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(384)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(384)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(384)
						ret->zpp_pool = null();
						HX_STACK_LINE(384)
						ret->zpp_disp = false;
						HX_STACK_LINE(384)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(384)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(384)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
								{
									HX_STACK_LINE(384)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(384)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(384)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(384)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(384)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(384)
											ret1->next = null();
										}
										HX_STACK_LINE(384)
										ret1->weak = false;
									}
									HX_STACK_LINE(384)
									ret1->_immutable = immutable;
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										ret1->x = 62.5;
										HX_STACK_LINE(384)
										ret1->y = (int)81;
										HX_STACK_LINE(384)
										{
										}
										HX_STACK_LINE(384)
										{
										}
									}
									HX_STACK_LINE(384)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(384)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(384)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(384)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(384)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(384)
						{
							HX_STACK_LINE(384)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(384)
							if ((_this->_immutable)){
								HX_STACK_LINE(384)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(384)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(384)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(384)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
								{
									HX_STACK_LINE(384)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(384)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(384)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(384)
											_this->_validate();
										}
									}
									HX_STACK_LINE(384)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
								{
									HX_STACK_LINE(384)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(384)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(384)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(384)
											_this->_validate();
										}
									}
									HX_STACK_LINE(384)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(384)
						if ((!(((bool((_Function_3_1::Block(ret) == 62.5)) && bool((_Function_3_2::Block(ret) == (int)81))))))){
							HX_STACK_LINE(384)
							{
								HX_STACK_LINE(384)
								ret->zpp_inner->x = 62.5;
								HX_STACK_LINE(384)
								ret->zpp_inner->y = (int)81;
								HX_STACK_LINE(384)
								{
								}
								HX_STACK_LINE(384)
								{
								}
							}
							HX_STACK_LINE(384)
							{
								HX_STACK_LINE(384)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(384)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(384)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(384)
						ret;
					}
					HX_STACK_LINE(384)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(384)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_69{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
				{
					HX_STACK_LINE(384)
					{
					}
					HX_STACK_LINE(384)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(384)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(384)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(384)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(384)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(384)
						ret->zpp_pool = null();
						HX_STACK_LINE(384)
						ret->zpp_disp = false;
						HX_STACK_LINE(384)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(384)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(384)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
								{
									HX_STACK_LINE(384)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(384)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(384)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(384)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(384)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(384)
											ret1->next = null();
										}
										HX_STACK_LINE(384)
										ret1->weak = false;
									}
									HX_STACK_LINE(384)
									ret1->_immutable = immutable;
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										ret1->x = 76.5;
										HX_STACK_LINE(384)
										ret1->y = (int)67;
										HX_STACK_LINE(384)
										{
										}
										HX_STACK_LINE(384)
										{
										}
									}
									HX_STACK_LINE(384)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(384)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(384)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(384)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(384)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(384)
						{
							HX_STACK_LINE(384)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(384)
							if ((_this->_immutable)){
								HX_STACK_LINE(384)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(384)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(384)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(384)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
								{
									HX_STACK_LINE(384)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(384)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(384)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(384)
											_this->_validate();
										}
									}
									HX_STACK_LINE(384)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
								{
									HX_STACK_LINE(384)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(384)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(384)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(384)
											_this->_validate();
										}
									}
									HX_STACK_LINE(384)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(384)
						if ((!(((bool((_Function_3_1::Block(ret) == 76.5)) && bool((_Function_3_2::Block(ret) == (int)67))))))){
							HX_STACK_LINE(384)
							{
								HX_STACK_LINE(384)
								ret->zpp_inner->x = 76.5;
								HX_STACK_LINE(384)
								ret->zpp_inner->y = (int)67;
								HX_STACK_LINE(384)
								{
								}
								HX_STACK_LINE(384)
								{
								}
							}
							HX_STACK_LINE(384)
							{
								HX_STACK_LINE(384)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(384)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(384)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(384)
						ret;
					}
					HX_STACK_LINE(384)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(384)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_70{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
				{
					HX_STACK_LINE(384)
					{
					}
					HX_STACK_LINE(384)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(384)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(384)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(384)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(384)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(384)
						ret->zpp_pool = null();
						HX_STACK_LINE(384)
						ret->zpp_disp = false;
						HX_STACK_LINE(384)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(384)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(384)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
								{
									HX_STACK_LINE(384)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(384)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(384)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(384)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(384)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(384)
											ret1->next = null();
										}
										HX_STACK_LINE(384)
										ret1->weak = false;
									}
									HX_STACK_LINE(384)
									ret1->_immutable = immutable;
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										ret1->x = 58.5;
										HX_STACK_LINE(384)
										ret1->y = (int)36;
										HX_STACK_LINE(384)
										{
										}
										HX_STACK_LINE(384)
										{
										}
									}
									HX_STACK_LINE(384)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(384)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(384)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(384)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(384)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(384)
						{
							HX_STACK_LINE(384)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(384)
							if ((_this->_immutable)){
								HX_STACK_LINE(384)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(384)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(384)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(384)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
								{
									HX_STACK_LINE(384)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(384)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(384)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(384)
											_this->_validate();
										}
									}
									HX_STACK_LINE(384)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",384);
								{
									HX_STACK_LINE(384)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(384)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(384)
									{
										HX_STACK_LINE(384)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(384)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(384)
											_this->_validate();
										}
									}
									HX_STACK_LINE(384)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(384)
						if ((!(((bool((_Function_3_1::Block(ret) == 58.5)) && bool((_Function_3_2::Block(ret) == (int)36))))))){
							HX_STACK_LINE(384)
							{
								HX_STACK_LINE(384)
								ret->zpp_inner->x = 58.5;
								HX_STACK_LINE(384)
								ret->zpp_inner->y = (int)36;
								HX_STACK_LINE(384)
								{
								}
								HX_STACK_LINE(384)
								{
								}
							}
							HX_STACK_LINE(384)
							{
								HX_STACK_LINE(384)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(384)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(384)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(384)
						ret;
					}
					HX_STACK_LINE(384)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(384)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(383)
		::nape::shape::Polygon s11 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_66::Block()).Add(_Function_1_67::Block()).Add(_Function_1_68::Block()).Add(_Function_1_69::Block()).Add(_Function_1_70::Block())),mat4,filt4);		HX_STACK_VAR(s11,"s11");
		HX_STACK_LINE(388)
		{
			HX_STACK_LINE(388)
			{
				HX_STACK_LINE(388)
				s11->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(388)
				if (((((  (((s11->zpp_inner->body != null()))) ? ::nape::phys::Body(s11->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body2))){
					HX_STACK_LINE(388)
					if (((s11->zpp_inner->body != null()))){
						HX_STACK_LINE(388)
						((  (((s11->zpp_inner->body != null()))) ? ::nape::phys::Body(s11->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s11);
					}
					HX_STACK_LINE(388)
					if (((body2 != null()))){
						HX_STACK_LINE(388)
						::nape::shape::ShapeList _this = body2->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(388)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(388)
							_this->push(s11);
						}
						else{
							HX_STACK_LINE(388)
							_this->unshift(s11);
						}
					}
				}
			}
			HX_STACK_LINE(388)
			if (((s11->zpp_inner->body != null()))){
				HX_STACK_LINE(388)
				s11->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(388)
				Dynamic();
			}
		}
		HX_STACK_LINE(389)
		{
			HX_STACK_LINE(389)
			{
				HX_STACK_LINE(389)
				s11->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(389)
				s11->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(389)
				s11->zpp_inner->wake();
			}
			HX_STACK_LINE(389)
			s11->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(390)
		{
			HX_STACK_LINE(390)
			{
				HX_STACK_LINE(390)
				s11->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(390)
				s11->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(390)
				{
				}
				HX_STACK_LINE(390)
				s11->zpp_inner->wake();
			}
			HX_STACK_LINE(390)
			s11->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(391)
		{
			HX_STACK_LINE(391)
			{
				HX_STACK_LINE(391)
				if (((prop4 == null()))){
					HX_STACK_LINE(391)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(391)
				s11->zpp_inner->setFluid(prop4->zpp_inner);
			}
			HX_STACK_LINE(391)
			{
				HX_STACK_LINE(391)
				s11->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(391)
				if (((s11->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(391)
					s11->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(391)
				s11->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(392)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s11){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",392);
					{
						HX_STACK_LINE(392)
						if (((s11->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(392)
							s11->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(392)
						return s11->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(392)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s11);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(392)
			{
				HX_STACK_LINE(392)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(392)
				while(((_g < _g1->length))){
					HX_STACK_LINE(392)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(392)
					++(_g);
					HX_STACK_LINE(392)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(392)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(392)
						continue;
					}
					HX_STACK_LINE(392)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(392)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(392)
					{
						HX_STACK_LINE(392)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(392)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(392)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(392)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_71{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
				{
					HX_STACK_LINE(395)
					{
					}
					HX_STACK_LINE(395)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(395)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(395)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(395)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(395)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(395)
						ret->zpp_pool = null();
						HX_STACK_LINE(395)
						ret->zpp_disp = false;
						HX_STACK_LINE(395)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(395)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(395)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
								{
									HX_STACK_LINE(395)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(395)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(395)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(395)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(395)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(395)
											ret1->next = null();
										}
										HX_STACK_LINE(395)
										ret1->weak = false;
									}
									HX_STACK_LINE(395)
									ret1->_immutable = immutable;
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										ret1->x = (int)118;
										HX_STACK_LINE(395)
										ret1->y = 63.5;
										HX_STACK_LINE(395)
										{
										}
										HX_STACK_LINE(395)
										{
										}
									}
									HX_STACK_LINE(395)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(395)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(395)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(395)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(395)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(395)
						{
							HX_STACK_LINE(395)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(395)
							if ((_this->_immutable)){
								HX_STACK_LINE(395)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(395)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(395)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(395)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
								{
									HX_STACK_LINE(395)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(395)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(395)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(395)
											_this->_validate();
										}
									}
									HX_STACK_LINE(395)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
								{
									HX_STACK_LINE(395)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(395)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(395)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(395)
											_this->_validate();
										}
									}
									HX_STACK_LINE(395)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(395)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)118)) && bool((_Function_3_2::Block(ret) == 63.5))))))){
							HX_STACK_LINE(395)
							{
								HX_STACK_LINE(395)
								ret->zpp_inner->x = (int)118;
								HX_STACK_LINE(395)
								ret->zpp_inner->y = 63.5;
								HX_STACK_LINE(395)
								{
								}
								HX_STACK_LINE(395)
								{
								}
							}
							HX_STACK_LINE(395)
							{
								HX_STACK_LINE(395)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(395)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(395)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(395)
						ret;
					}
					HX_STACK_LINE(395)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(395)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_72{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
				{
					HX_STACK_LINE(395)
					{
					}
					HX_STACK_LINE(395)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(395)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(395)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(395)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(395)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(395)
						ret->zpp_pool = null();
						HX_STACK_LINE(395)
						ret->zpp_disp = false;
						HX_STACK_LINE(395)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(395)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(395)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
								{
									HX_STACK_LINE(395)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(395)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(395)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(395)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(395)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(395)
											ret1->next = null();
										}
										HX_STACK_LINE(395)
										ret1->weak = false;
									}
									HX_STACK_LINE(395)
									ret1->_immutable = immutable;
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										ret1->x = 102.5;
										HX_STACK_LINE(395)
										ret1->y = (int)63;
										HX_STACK_LINE(395)
										{
										}
										HX_STACK_LINE(395)
										{
										}
									}
									HX_STACK_LINE(395)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(395)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(395)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(395)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(395)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(395)
						{
							HX_STACK_LINE(395)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(395)
							if ((_this->_immutable)){
								HX_STACK_LINE(395)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(395)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(395)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(395)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
								{
									HX_STACK_LINE(395)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(395)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(395)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(395)
											_this->_validate();
										}
									}
									HX_STACK_LINE(395)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
								{
									HX_STACK_LINE(395)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(395)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(395)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(395)
											_this->_validate();
										}
									}
									HX_STACK_LINE(395)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(395)
						if ((!(((bool((_Function_3_1::Block(ret) == 102.5)) && bool((_Function_3_2::Block(ret) == (int)63))))))){
							HX_STACK_LINE(395)
							{
								HX_STACK_LINE(395)
								ret->zpp_inner->x = 102.5;
								HX_STACK_LINE(395)
								ret->zpp_inner->y = (int)63;
								HX_STACK_LINE(395)
								{
								}
								HX_STACK_LINE(395)
								{
								}
							}
							HX_STACK_LINE(395)
							{
								HX_STACK_LINE(395)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(395)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(395)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(395)
						ret;
					}
					HX_STACK_LINE(395)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(395)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_73{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
				{
					HX_STACK_LINE(395)
					{
					}
					HX_STACK_LINE(395)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(395)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(395)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(395)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(395)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(395)
						ret->zpp_pool = null();
						HX_STACK_LINE(395)
						ret->zpp_disp = false;
						HX_STACK_LINE(395)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(395)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(395)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
								{
									HX_STACK_LINE(395)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(395)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(395)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(395)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(395)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(395)
											ret1->next = null();
										}
										HX_STACK_LINE(395)
										ret1->weak = false;
									}
									HX_STACK_LINE(395)
									ret1->_immutable = immutable;
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										ret1->x = 100.5;
										HX_STACK_LINE(395)
										ret1->y = (int)91;
										HX_STACK_LINE(395)
										{
										}
										HX_STACK_LINE(395)
										{
										}
									}
									HX_STACK_LINE(395)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(395)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(395)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(395)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(395)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(395)
						{
							HX_STACK_LINE(395)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(395)
							if ((_this->_immutable)){
								HX_STACK_LINE(395)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(395)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(395)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(395)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
								{
									HX_STACK_LINE(395)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(395)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(395)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(395)
											_this->_validate();
										}
									}
									HX_STACK_LINE(395)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
								{
									HX_STACK_LINE(395)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(395)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(395)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(395)
											_this->_validate();
										}
									}
									HX_STACK_LINE(395)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(395)
						if ((!(((bool((_Function_3_1::Block(ret) == 100.5)) && bool((_Function_3_2::Block(ret) == (int)91))))))){
							HX_STACK_LINE(395)
							{
								HX_STACK_LINE(395)
								ret->zpp_inner->x = 100.5;
								HX_STACK_LINE(395)
								ret->zpp_inner->y = (int)91;
								HX_STACK_LINE(395)
								{
								}
								HX_STACK_LINE(395)
								{
								}
							}
							HX_STACK_LINE(395)
							{
								HX_STACK_LINE(395)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(395)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(395)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(395)
						ret;
					}
					HX_STACK_LINE(395)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(395)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_74{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
				{
					HX_STACK_LINE(395)
					{
					}
					HX_STACK_LINE(395)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(395)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(395)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(395)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(395)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(395)
						ret->zpp_pool = null();
						HX_STACK_LINE(395)
						ret->zpp_disp = false;
						HX_STACK_LINE(395)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(395)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(395)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
								{
									HX_STACK_LINE(395)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(395)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(395)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(395)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(395)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(395)
											ret1->next = null();
										}
										HX_STACK_LINE(395)
										ret1->weak = false;
									}
									HX_STACK_LINE(395)
									ret1->_immutable = immutable;
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										ret1->x = 108.5;
										HX_STACK_LINE(395)
										ret1->y = (int)119;
										HX_STACK_LINE(395)
										{
										}
										HX_STACK_LINE(395)
										{
										}
									}
									HX_STACK_LINE(395)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(395)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(395)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(395)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(395)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(395)
						{
							HX_STACK_LINE(395)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(395)
							if ((_this->_immutable)){
								HX_STACK_LINE(395)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(395)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(395)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(395)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
								{
									HX_STACK_LINE(395)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(395)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(395)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(395)
											_this->_validate();
										}
									}
									HX_STACK_LINE(395)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
								{
									HX_STACK_LINE(395)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(395)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(395)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(395)
											_this->_validate();
										}
									}
									HX_STACK_LINE(395)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(395)
						if ((!(((bool((_Function_3_1::Block(ret) == 108.5)) && bool((_Function_3_2::Block(ret) == (int)119))))))){
							HX_STACK_LINE(395)
							{
								HX_STACK_LINE(395)
								ret->zpp_inner->x = 108.5;
								HX_STACK_LINE(395)
								ret->zpp_inner->y = (int)119;
								HX_STACK_LINE(395)
								{
								}
								HX_STACK_LINE(395)
								{
								}
							}
							HX_STACK_LINE(395)
							{
								HX_STACK_LINE(395)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(395)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(395)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(395)
						ret;
					}
					HX_STACK_LINE(395)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(395)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_75{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
				{
					HX_STACK_LINE(395)
					{
					}
					HX_STACK_LINE(395)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(395)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(395)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(395)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(395)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(395)
						ret->zpp_pool = null();
						HX_STACK_LINE(395)
						ret->zpp_disp = false;
						HX_STACK_LINE(395)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(395)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(395)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
								{
									HX_STACK_LINE(395)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(395)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(395)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(395)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(395)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(395)
											ret1->next = null();
										}
										HX_STACK_LINE(395)
										ret1->weak = false;
									}
									HX_STACK_LINE(395)
									ret1->_immutable = immutable;
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										ret1->x = 122.5;
										HX_STACK_LINE(395)
										ret1->y = (int)92;
										HX_STACK_LINE(395)
										{
										}
										HX_STACK_LINE(395)
										{
										}
									}
									HX_STACK_LINE(395)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(395)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(395)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(395)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(395)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(395)
						{
							HX_STACK_LINE(395)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(395)
							if ((_this->_immutable)){
								HX_STACK_LINE(395)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(395)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(395)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(395)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
								{
									HX_STACK_LINE(395)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(395)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(395)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(395)
											_this->_validate();
										}
									}
									HX_STACK_LINE(395)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",395);
								{
									HX_STACK_LINE(395)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(395)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(395)
									{
										HX_STACK_LINE(395)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(395)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(395)
											_this->_validate();
										}
									}
									HX_STACK_LINE(395)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(395)
						if ((!(((bool((_Function_3_1::Block(ret) == 122.5)) && bool((_Function_3_2::Block(ret) == (int)92))))))){
							HX_STACK_LINE(395)
							{
								HX_STACK_LINE(395)
								ret->zpp_inner->x = 122.5;
								HX_STACK_LINE(395)
								ret->zpp_inner->y = (int)92;
								HX_STACK_LINE(395)
								{
								}
								HX_STACK_LINE(395)
								{
								}
							}
							HX_STACK_LINE(395)
							{
								HX_STACK_LINE(395)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(395)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(395)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(395)
						ret;
					}
					HX_STACK_LINE(395)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(395)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(394)
		::nape::shape::Polygon s12 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_71::Block()).Add(_Function_1_72::Block()).Add(_Function_1_73::Block()).Add(_Function_1_74::Block()).Add(_Function_1_75::Block())),mat4,filt4);		HX_STACK_VAR(s12,"s12");
		HX_STACK_LINE(399)
		{
			HX_STACK_LINE(399)
			{
				HX_STACK_LINE(399)
				s12->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(399)
				if (((((  (((s12->zpp_inner->body != null()))) ? ::nape::phys::Body(s12->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body2))){
					HX_STACK_LINE(399)
					if (((s12->zpp_inner->body != null()))){
						HX_STACK_LINE(399)
						((  (((s12->zpp_inner->body != null()))) ? ::nape::phys::Body(s12->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s12);
					}
					HX_STACK_LINE(399)
					if (((body2 != null()))){
						HX_STACK_LINE(399)
						::nape::shape::ShapeList _this = body2->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(399)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(399)
							_this->push(s12);
						}
						else{
							HX_STACK_LINE(399)
							_this->unshift(s12);
						}
					}
				}
			}
			HX_STACK_LINE(399)
			if (((s12->zpp_inner->body != null()))){
				HX_STACK_LINE(399)
				s12->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(399)
				Dynamic();
			}
		}
		HX_STACK_LINE(400)
		{
			HX_STACK_LINE(400)
			{
				HX_STACK_LINE(400)
				s12->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(400)
				s12->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(400)
				s12->zpp_inner->wake();
			}
			HX_STACK_LINE(400)
			s12->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(401)
		{
			HX_STACK_LINE(401)
			{
				HX_STACK_LINE(401)
				s12->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(401)
				s12->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(401)
				{
				}
				HX_STACK_LINE(401)
				s12->zpp_inner->wake();
			}
			HX_STACK_LINE(401)
			s12->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(402)
		{
			HX_STACK_LINE(402)
			{
				HX_STACK_LINE(402)
				if (((prop4 == null()))){
					HX_STACK_LINE(402)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(402)
				s12->zpp_inner->setFluid(prop4->zpp_inner);
			}
			HX_STACK_LINE(402)
			{
				HX_STACK_LINE(402)
				s12->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(402)
				if (((s12->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(402)
					s12->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(402)
				s12->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(403)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s12){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",403);
					{
						HX_STACK_LINE(403)
						if (((s12->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(403)
							s12->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(403)
						return s12->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(403)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s12);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(403)
			{
				HX_STACK_LINE(403)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(403)
				while(((_g < _g1->length))){
					HX_STACK_LINE(403)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(403)
					++(_g);
					HX_STACK_LINE(403)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(403)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(403)
						continue;
					}
					HX_STACK_LINE(403)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(403)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(403)
					{
						HX_STACK_LINE(403)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(403)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(403)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(403)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_76{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",406);
				{
					HX_STACK_LINE(406)
					{
					}
					HX_STACK_LINE(406)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(406)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(406)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(406)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(406)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(406)
						ret->zpp_pool = null();
						HX_STACK_LINE(406)
						ret->zpp_disp = false;
						HX_STACK_LINE(406)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(406)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(406)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",406);
								{
									HX_STACK_LINE(406)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(406)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(406)
									{
										HX_STACK_LINE(406)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(406)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(406)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(406)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(406)
											ret1->next = null();
										}
										HX_STACK_LINE(406)
										ret1->weak = false;
									}
									HX_STACK_LINE(406)
									ret1->_immutable = immutable;
									HX_STACK_LINE(406)
									{
										HX_STACK_LINE(406)
										ret1->x = (int)88;
										HX_STACK_LINE(406)
										ret1->y = 135.5;
										HX_STACK_LINE(406)
										{
										}
										HX_STACK_LINE(406)
										{
										}
									}
									HX_STACK_LINE(406)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(406)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(406)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(406)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(406)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(406)
						{
							HX_STACK_LINE(406)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(406)
							if ((_this->_immutable)){
								HX_STACK_LINE(406)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(406)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(406)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(406)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",406);
								{
									HX_STACK_LINE(406)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(406)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(406)
									{
										HX_STACK_LINE(406)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(406)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(406)
											_this->_validate();
										}
									}
									HX_STACK_LINE(406)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",406);
								{
									HX_STACK_LINE(406)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(406)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(406)
									{
										HX_STACK_LINE(406)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(406)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(406)
											_this->_validate();
										}
									}
									HX_STACK_LINE(406)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(406)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)88)) && bool((_Function_3_2::Block(ret) == 135.5))))))){
							HX_STACK_LINE(406)
							{
								HX_STACK_LINE(406)
								ret->zpp_inner->x = (int)88;
								HX_STACK_LINE(406)
								ret->zpp_inner->y = 135.5;
								HX_STACK_LINE(406)
								{
								}
								HX_STACK_LINE(406)
								{
								}
							}
							HX_STACK_LINE(406)
							{
								HX_STACK_LINE(406)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(406)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(406)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(406)
						ret;
					}
					HX_STACK_LINE(406)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(406)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_77{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",406);
				{
					HX_STACK_LINE(406)
					{
					}
					HX_STACK_LINE(406)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(406)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(406)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(406)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(406)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(406)
						ret->zpp_pool = null();
						HX_STACK_LINE(406)
						ret->zpp_disp = false;
						HX_STACK_LINE(406)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(406)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(406)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",406);
								{
									HX_STACK_LINE(406)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(406)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(406)
									{
										HX_STACK_LINE(406)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(406)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(406)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(406)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(406)
											ret1->next = null();
										}
										HX_STACK_LINE(406)
										ret1->weak = false;
									}
									HX_STACK_LINE(406)
									ret1->_immutable = immutable;
									HX_STACK_LINE(406)
									{
										HX_STACK_LINE(406)
										ret1->x = 108.5;
										HX_STACK_LINE(406)
										ret1->y = (int)119;
										HX_STACK_LINE(406)
										{
										}
										HX_STACK_LINE(406)
										{
										}
									}
									HX_STACK_LINE(406)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(406)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(406)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(406)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(406)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(406)
						{
							HX_STACK_LINE(406)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(406)
							if ((_this->_immutable)){
								HX_STACK_LINE(406)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(406)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(406)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(406)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",406);
								{
									HX_STACK_LINE(406)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(406)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(406)
									{
										HX_STACK_LINE(406)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(406)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(406)
											_this->_validate();
										}
									}
									HX_STACK_LINE(406)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",406);
								{
									HX_STACK_LINE(406)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(406)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(406)
									{
										HX_STACK_LINE(406)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(406)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(406)
											_this->_validate();
										}
									}
									HX_STACK_LINE(406)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(406)
						if ((!(((bool((_Function_3_1::Block(ret) == 108.5)) && bool((_Function_3_2::Block(ret) == (int)119))))))){
							HX_STACK_LINE(406)
							{
								HX_STACK_LINE(406)
								ret->zpp_inner->x = 108.5;
								HX_STACK_LINE(406)
								ret->zpp_inner->y = (int)119;
								HX_STACK_LINE(406)
								{
								}
								HX_STACK_LINE(406)
								{
								}
							}
							HX_STACK_LINE(406)
							{
								HX_STACK_LINE(406)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(406)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(406)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(406)
						ret;
					}
					HX_STACK_LINE(406)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(406)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_78{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",406);
				{
					HX_STACK_LINE(406)
					{
					}
					HX_STACK_LINE(406)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(406)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(406)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(406)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(406)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(406)
						ret->zpp_pool = null();
						HX_STACK_LINE(406)
						ret->zpp_disp = false;
						HX_STACK_LINE(406)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(406)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(406)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",406);
								{
									HX_STACK_LINE(406)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(406)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(406)
									{
										HX_STACK_LINE(406)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(406)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(406)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(406)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(406)
											ret1->next = null();
										}
										HX_STACK_LINE(406)
										ret1->weak = false;
									}
									HX_STACK_LINE(406)
									ret1->_immutable = immutable;
									HX_STACK_LINE(406)
									{
										HX_STACK_LINE(406)
										ret1->x = 100.5;
										HX_STACK_LINE(406)
										ret1->y = (int)91;
										HX_STACK_LINE(406)
										{
										}
										HX_STACK_LINE(406)
										{
										}
									}
									HX_STACK_LINE(406)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(406)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(406)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(406)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(406)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(406)
						{
							HX_STACK_LINE(406)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(406)
							if ((_this->_immutable)){
								HX_STACK_LINE(406)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(406)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(406)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(406)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",406);
								{
									HX_STACK_LINE(406)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(406)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(406)
									{
										HX_STACK_LINE(406)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(406)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(406)
											_this->_validate();
										}
									}
									HX_STACK_LINE(406)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",406);
								{
									HX_STACK_LINE(406)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(406)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(406)
									{
										HX_STACK_LINE(406)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(406)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(406)
											_this->_validate();
										}
									}
									HX_STACK_LINE(406)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(406)
						if ((!(((bool((_Function_3_1::Block(ret) == 100.5)) && bool((_Function_3_2::Block(ret) == (int)91))))))){
							HX_STACK_LINE(406)
							{
								HX_STACK_LINE(406)
								ret->zpp_inner->x = 100.5;
								HX_STACK_LINE(406)
								ret->zpp_inner->y = (int)91;
								HX_STACK_LINE(406)
								{
								}
								HX_STACK_LINE(406)
								{
								}
							}
							HX_STACK_LINE(406)
							{
								HX_STACK_LINE(406)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(406)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(406)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(406)
						ret;
					}
					HX_STACK_LINE(406)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(406)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_79{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",406);
				{
					HX_STACK_LINE(406)
					{
					}
					HX_STACK_LINE(406)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(406)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(406)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(406)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(406)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(406)
						ret->zpp_pool = null();
						HX_STACK_LINE(406)
						ret->zpp_disp = false;
						HX_STACK_LINE(406)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(406)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(406)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",406);
								{
									HX_STACK_LINE(406)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(406)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(406)
									{
										HX_STACK_LINE(406)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(406)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(406)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(406)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(406)
											ret1->next = null();
										}
										HX_STACK_LINE(406)
										ret1->weak = false;
									}
									HX_STACK_LINE(406)
									ret1->_immutable = immutable;
									HX_STACK_LINE(406)
									{
										HX_STACK_LINE(406)
										ret1->x = 84.5;
										HX_STACK_LINE(406)
										ret1->y = (int)128;
										HX_STACK_LINE(406)
										{
										}
										HX_STACK_LINE(406)
										{
										}
									}
									HX_STACK_LINE(406)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(406)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(406)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(406)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(406)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(406)
						{
							HX_STACK_LINE(406)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(406)
							if ((_this->_immutable)){
								HX_STACK_LINE(406)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(406)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(406)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(406)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",406);
								{
									HX_STACK_LINE(406)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(406)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(406)
									{
										HX_STACK_LINE(406)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(406)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(406)
											_this->_validate();
										}
									}
									HX_STACK_LINE(406)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",406);
								{
									HX_STACK_LINE(406)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(406)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(406)
									{
										HX_STACK_LINE(406)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(406)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(406)
											_this->_validate();
										}
									}
									HX_STACK_LINE(406)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(406)
						if ((!(((bool((_Function_3_1::Block(ret) == 84.5)) && bool((_Function_3_2::Block(ret) == (int)128))))))){
							HX_STACK_LINE(406)
							{
								HX_STACK_LINE(406)
								ret->zpp_inner->x = 84.5;
								HX_STACK_LINE(406)
								ret->zpp_inner->y = (int)128;
								HX_STACK_LINE(406)
								{
								}
								HX_STACK_LINE(406)
								{
								}
							}
							HX_STACK_LINE(406)
							{
								HX_STACK_LINE(406)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(406)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(406)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(406)
						ret;
					}
					HX_STACK_LINE(406)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(406)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(405)
		::nape::shape::Polygon s13 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_76::Block()).Add(_Function_1_77::Block()).Add(_Function_1_78::Block()).Add(_Function_1_79::Block())),mat4,filt4);		HX_STACK_VAR(s13,"s13");
		HX_STACK_LINE(410)
		{
			HX_STACK_LINE(410)
			{
				HX_STACK_LINE(410)
				s13->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(410)
				if (((((  (((s13->zpp_inner->body != null()))) ? ::nape::phys::Body(s13->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body2))){
					HX_STACK_LINE(410)
					if (((s13->zpp_inner->body != null()))){
						HX_STACK_LINE(410)
						((  (((s13->zpp_inner->body != null()))) ? ::nape::phys::Body(s13->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s13);
					}
					HX_STACK_LINE(410)
					if (((body2 != null()))){
						HX_STACK_LINE(410)
						::nape::shape::ShapeList _this = body2->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(410)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(410)
							_this->push(s13);
						}
						else{
							HX_STACK_LINE(410)
							_this->unshift(s13);
						}
					}
				}
			}
			HX_STACK_LINE(410)
			if (((s13->zpp_inner->body != null()))){
				HX_STACK_LINE(410)
				s13->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(410)
				Dynamic();
			}
		}
		HX_STACK_LINE(411)
		{
			HX_STACK_LINE(411)
			{
				HX_STACK_LINE(411)
				s13->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(411)
				s13->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(411)
				s13->zpp_inner->wake();
			}
			HX_STACK_LINE(411)
			s13->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(412)
		{
			HX_STACK_LINE(412)
			{
				HX_STACK_LINE(412)
				s13->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(412)
				s13->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(412)
				{
				}
				HX_STACK_LINE(412)
				s13->zpp_inner->wake();
			}
			HX_STACK_LINE(412)
			s13->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(413)
		{
			HX_STACK_LINE(413)
			{
				HX_STACK_LINE(413)
				if (((prop4 == null()))){
					HX_STACK_LINE(413)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(413)
				s13->zpp_inner->setFluid(prop4->zpp_inner);
			}
			HX_STACK_LINE(413)
			{
				HX_STACK_LINE(413)
				s13->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(413)
				if (((s13->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(413)
					s13->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(413)
				s13->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(414)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s13){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",414);
					{
						HX_STACK_LINE(414)
						if (((s13->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(414)
							s13->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(414)
						return s13->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(414)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s13);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(414)
			{
				HX_STACK_LINE(414)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(414)
				while(((_g < _g1->length))){
					HX_STACK_LINE(414)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(414)
					++(_g);
					HX_STACK_LINE(414)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(414)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(414)
						continue;
					}
					HX_STACK_LINE(414)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(414)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(414)
					{
						HX_STACK_LINE(414)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(414)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(414)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(414)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_80{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",417);
				{
					HX_STACK_LINE(417)
					{
					}
					HX_STACK_LINE(417)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(417)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(417)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(417)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(417)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(417)
						ret->zpp_pool = null();
						HX_STACK_LINE(417)
						ret->zpp_disp = false;
						HX_STACK_LINE(417)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(417)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(417)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",417);
								{
									HX_STACK_LINE(417)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(417)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(417)
									{
										HX_STACK_LINE(417)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(417)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(417)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(417)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(417)
											ret1->next = null();
										}
										HX_STACK_LINE(417)
										ret1->weak = false;
									}
									HX_STACK_LINE(417)
									ret1->_immutable = immutable;
									HX_STACK_LINE(417)
									{
										HX_STACK_LINE(417)
										ret1->x = (int)10;
										HX_STACK_LINE(417)
										ret1->y = 94.5;
										HX_STACK_LINE(417)
										{
										}
										HX_STACK_LINE(417)
										{
										}
									}
									HX_STACK_LINE(417)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(417)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(417)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(417)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(417)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(417)
						{
							HX_STACK_LINE(417)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(417)
							if ((_this->_immutable)){
								HX_STACK_LINE(417)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(417)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(417)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(417)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",417);
								{
									HX_STACK_LINE(417)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(417)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(417)
									{
										HX_STACK_LINE(417)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(417)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(417)
											_this->_validate();
										}
									}
									HX_STACK_LINE(417)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",417);
								{
									HX_STACK_LINE(417)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(417)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(417)
									{
										HX_STACK_LINE(417)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(417)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(417)
											_this->_validate();
										}
									}
									HX_STACK_LINE(417)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(417)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)10)) && bool((_Function_3_2::Block(ret) == 94.5))))))){
							HX_STACK_LINE(417)
							{
								HX_STACK_LINE(417)
								ret->zpp_inner->x = (int)10;
								HX_STACK_LINE(417)
								ret->zpp_inner->y = 94.5;
								HX_STACK_LINE(417)
								{
								}
								HX_STACK_LINE(417)
								{
								}
							}
							HX_STACK_LINE(417)
							{
								HX_STACK_LINE(417)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(417)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(417)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(417)
						ret;
					}
					HX_STACK_LINE(417)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(417)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_81{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",417);
				{
					HX_STACK_LINE(417)
					{
					}
					HX_STACK_LINE(417)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(417)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(417)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(417)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(417)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(417)
						ret->zpp_pool = null();
						HX_STACK_LINE(417)
						ret->zpp_disp = false;
						HX_STACK_LINE(417)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(417)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(417)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",417);
								{
									HX_STACK_LINE(417)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(417)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(417)
									{
										HX_STACK_LINE(417)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(417)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(417)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(417)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(417)
											ret1->next = null();
										}
										HX_STACK_LINE(417)
										ret1->weak = false;
									}
									HX_STACK_LINE(417)
									ret1->_immutable = immutable;
									HX_STACK_LINE(417)
									{
										HX_STACK_LINE(417)
										ret1->x = (int)4;
										HX_STACK_LINE(417)
										ret1->y = 102.5;
										HX_STACK_LINE(417)
										{
										}
										HX_STACK_LINE(417)
										{
										}
									}
									HX_STACK_LINE(417)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(417)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(417)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(417)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(417)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(417)
						{
							HX_STACK_LINE(417)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(417)
							if ((_this->_immutable)){
								HX_STACK_LINE(417)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(417)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(417)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(417)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",417);
								{
									HX_STACK_LINE(417)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(417)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(417)
									{
										HX_STACK_LINE(417)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(417)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(417)
											_this->_validate();
										}
									}
									HX_STACK_LINE(417)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",417);
								{
									HX_STACK_LINE(417)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(417)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(417)
									{
										HX_STACK_LINE(417)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(417)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(417)
											_this->_validate();
										}
									}
									HX_STACK_LINE(417)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(417)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)4)) && bool((_Function_3_2::Block(ret) == 102.5))))))){
							HX_STACK_LINE(417)
							{
								HX_STACK_LINE(417)
								ret->zpp_inner->x = (int)4;
								HX_STACK_LINE(417)
								ret->zpp_inner->y = 102.5;
								HX_STACK_LINE(417)
								{
								}
								HX_STACK_LINE(417)
								{
								}
							}
							HX_STACK_LINE(417)
							{
								HX_STACK_LINE(417)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(417)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(417)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(417)
						ret;
					}
					HX_STACK_LINE(417)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(417)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_82{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",417);
				{
					HX_STACK_LINE(417)
					{
					}
					HX_STACK_LINE(417)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(417)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(417)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(417)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(417)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(417)
						ret->zpp_pool = null();
						HX_STACK_LINE(417)
						ret->zpp_disp = false;
						HX_STACK_LINE(417)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(417)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(417)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",417);
								{
									HX_STACK_LINE(417)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(417)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(417)
									{
										HX_STACK_LINE(417)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(417)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(417)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(417)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(417)
											ret1->next = null();
										}
										HX_STACK_LINE(417)
										ret1->weak = false;
									}
									HX_STACK_LINE(417)
									ret1->_immutable = immutable;
									HX_STACK_LINE(417)
									{
										HX_STACK_LINE(417)
										ret1->x = (int)44;
										HX_STACK_LINE(417)
										ret1->y = 122.5;
										HX_STACK_LINE(417)
										{
										}
										HX_STACK_LINE(417)
										{
										}
									}
									HX_STACK_LINE(417)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(417)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(417)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(417)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(417)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(417)
						{
							HX_STACK_LINE(417)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(417)
							if ((_this->_immutable)){
								HX_STACK_LINE(417)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(417)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(417)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(417)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",417);
								{
									HX_STACK_LINE(417)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(417)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(417)
									{
										HX_STACK_LINE(417)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(417)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(417)
											_this->_validate();
										}
									}
									HX_STACK_LINE(417)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",417);
								{
									HX_STACK_LINE(417)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(417)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(417)
									{
										HX_STACK_LINE(417)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(417)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(417)
											_this->_validate();
										}
									}
									HX_STACK_LINE(417)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(417)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)44)) && bool((_Function_3_2::Block(ret) == 122.5))))))){
							HX_STACK_LINE(417)
							{
								HX_STACK_LINE(417)
								ret->zpp_inner->x = (int)44;
								HX_STACK_LINE(417)
								ret->zpp_inner->y = 122.5;
								HX_STACK_LINE(417)
								{
								}
								HX_STACK_LINE(417)
								{
								}
							}
							HX_STACK_LINE(417)
							{
								HX_STACK_LINE(417)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(417)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(417)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(417)
						ret;
					}
					HX_STACK_LINE(417)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(417)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_83{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",417);
				{
					HX_STACK_LINE(417)
					{
					}
					HX_STACK_LINE(417)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(417)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(417)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(417)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(417)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(417)
						ret->zpp_pool = null();
						HX_STACK_LINE(417)
						ret->zpp_disp = false;
						HX_STACK_LINE(417)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(417)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(417)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",417);
								{
									HX_STACK_LINE(417)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(417)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(417)
									{
										HX_STACK_LINE(417)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(417)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(417)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(417)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(417)
											ret1->next = null();
										}
										HX_STACK_LINE(417)
										ret1->weak = false;
									}
									HX_STACK_LINE(417)
									ret1->_immutable = immutable;
									HX_STACK_LINE(417)
									{
										HX_STACK_LINE(417)
										ret1->x = (int)35;
										HX_STACK_LINE(417)
										ret1->y = 100.5;
										HX_STACK_LINE(417)
										{
										}
										HX_STACK_LINE(417)
										{
										}
									}
									HX_STACK_LINE(417)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(417)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(417)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(417)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(417)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(417)
						{
							HX_STACK_LINE(417)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(417)
							if ((_this->_immutable)){
								HX_STACK_LINE(417)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(417)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(417)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(417)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",417);
								{
									HX_STACK_LINE(417)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(417)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(417)
									{
										HX_STACK_LINE(417)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(417)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(417)
											_this->_validate();
										}
									}
									HX_STACK_LINE(417)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",417);
								{
									HX_STACK_LINE(417)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(417)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(417)
									{
										HX_STACK_LINE(417)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(417)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(417)
											_this->_validate();
										}
									}
									HX_STACK_LINE(417)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(417)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)35)) && bool((_Function_3_2::Block(ret) == 100.5))))))){
							HX_STACK_LINE(417)
							{
								HX_STACK_LINE(417)
								ret->zpp_inner->x = (int)35;
								HX_STACK_LINE(417)
								ret->zpp_inner->y = 100.5;
								HX_STACK_LINE(417)
								{
								}
								HX_STACK_LINE(417)
								{
								}
							}
							HX_STACK_LINE(417)
							{
								HX_STACK_LINE(417)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(417)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(417)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(417)
						ret;
					}
					HX_STACK_LINE(417)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(417)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(416)
		::nape::shape::Polygon s14 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_80::Block()).Add(_Function_1_81::Block()).Add(_Function_1_82::Block()).Add(_Function_1_83::Block())),mat4,filt4);		HX_STACK_VAR(s14,"s14");
		HX_STACK_LINE(421)
		{
			HX_STACK_LINE(421)
			{
				HX_STACK_LINE(421)
				s14->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(421)
				if (((((  (((s14->zpp_inner->body != null()))) ? ::nape::phys::Body(s14->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body2))){
					HX_STACK_LINE(421)
					if (((s14->zpp_inner->body != null()))){
						HX_STACK_LINE(421)
						((  (((s14->zpp_inner->body != null()))) ? ::nape::phys::Body(s14->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s14);
					}
					HX_STACK_LINE(421)
					if (((body2 != null()))){
						HX_STACK_LINE(421)
						::nape::shape::ShapeList _this = body2->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(421)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(421)
							_this->push(s14);
						}
						else{
							HX_STACK_LINE(421)
							_this->unshift(s14);
						}
					}
				}
			}
			HX_STACK_LINE(421)
			if (((s14->zpp_inner->body != null()))){
				HX_STACK_LINE(421)
				s14->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(421)
				Dynamic();
			}
		}
		HX_STACK_LINE(422)
		{
			HX_STACK_LINE(422)
			{
				HX_STACK_LINE(422)
				s14->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(422)
				s14->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(422)
				s14->zpp_inner->wake();
			}
			HX_STACK_LINE(422)
			s14->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(423)
		{
			HX_STACK_LINE(423)
			{
				HX_STACK_LINE(423)
				s14->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(423)
				s14->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(423)
				{
				}
				HX_STACK_LINE(423)
				s14->zpp_inner->wake();
			}
			HX_STACK_LINE(423)
			s14->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(424)
		{
			HX_STACK_LINE(424)
			{
				HX_STACK_LINE(424)
				if (((prop4 == null()))){
					HX_STACK_LINE(424)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(424)
				s14->zpp_inner->setFluid(prop4->zpp_inner);
			}
			HX_STACK_LINE(424)
			{
				HX_STACK_LINE(424)
				s14->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(424)
				if (((s14->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(424)
					s14->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(424)
				s14->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(425)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s14){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",425);
					{
						HX_STACK_LINE(425)
						if (((s14->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(425)
							s14->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(425)
						return s14->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(425)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s14);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(425)
			{
				HX_STACK_LINE(425)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(425)
				while(((_g < _g1->length))){
					HX_STACK_LINE(425)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(425)
					++(_g);
					HX_STACK_LINE(425)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(425)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(425)
						continue;
					}
					HX_STACK_LINE(425)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(425)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(425)
					{
						HX_STACK_LINE(425)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(425)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(425)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(425)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_84{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",428);
				{
					HX_STACK_LINE(428)
					{
					}
					HX_STACK_LINE(428)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(428)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(428)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(428)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(428)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(428)
						ret->zpp_pool = null();
						HX_STACK_LINE(428)
						ret->zpp_disp = false;
						HX_STACK_LINE(428)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(428)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(428)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",428);
								{
									HX_STACK_LINE(428)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(428)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(428)
									{
										HX_STACK_LINE(428)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(428)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(428)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(428)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(428)
											ret1->next = null();
										}
										HX_STACK_LINE(428)
										ret1->weak = false;
									}
									HX_STACK_LINE(428)
									ret1->_immutable = immutable;
									HX_STACK_LINE(428)
									{
										HX_STACK_LINE(428)
										ret1->x = (int)35;
										HX_STACK_LINE(428)
										ret1->y = 100.5;
										HX_STACK_LINE(428)
										{
										}
										HX_STACK_LINE(428)
										{
										}
									}
									HX_STACK_LINE(428)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(428)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(428)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(428)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(428)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(428)
						{
							HX_STACK_LINE(428)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(428)
							if ((_this->_immutable)){
								HX_STACK_LINE(428)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(428)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(428)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(428)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",428);
								{
									HX_STACK_LINE(428)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(428)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(428)
									{
										HX_STACK_LINE(428)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(428)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(428)
											_this->_validate();
										}
									}
									HX_STACK_LINE(428)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",428);
								{
									HX_STACK_LINE(428)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(428)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(428)
									{
										HX_STACK_LINE(428)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(428)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(428)
											_this->_validate();
										}
									}
									HX_STACK_LINE(428)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(428)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)35)) && bool((_Function_3_2::Block(ret) == 100.5))))))){
							HX_STACK_LINE(428)
							{
								HX_STACK_LINE(428)
								ret->zpp_inner->x = (int)35;
								HX_STACK_LINE(428)
								ret->zpp_inner->y = 100.5;
								HX_STACK_LINE(428)
								{
								}
								HX_STACK_LINE(428)
								{
								}
							}
							HX_STACK_LINE(428)
							{
								HX_STACK_LINE(428)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(428)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(428)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(428)
						ret;
					}
					HX_STACK_LINE(428)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(428)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_85{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",428);
				{
					HX_STACK_LINE(428)
					{
					}
					HX_STACK_LINE(428)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(428)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(428)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(428)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(428)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(428)
						ret->zpp_pool = null();
						HX_STACK_LINE(428)
						ret->zpp_disp = false;
						HX_STACK_LINE(428)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(428)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(428)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",428);
								{
									HX_STACK_LINE(428)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(428)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(428)
									{
										HX_STACK_LINE(428)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(428)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(428)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(428)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(428)
											ret1->next = null();
										}
										HX_STACK_LINE(428)
										ret1->weak = false;
									}
									HX_STACK_LINE(428)
									ret1->_immutable = immutable;
									HX_STACK_LINE(428)
									{
										HX_STACK_LINE(428)
										ret1->x = (int)44;
										HX_STACK_LINE(428)
										ret1->y = 122.5;
										HX_STACK_LINE(428)
										{
										}
										HX_STACK_LINE(428)
										{
										}
									}
									HX_STACK_LINE(428)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(428)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(428)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(428)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(428)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(428)
						{
							HX_STACK_LINE(428)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(428)
							if ((_this->_immutable)){
								HX_STACK_LINE(428)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(428)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(428)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(428)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",428);
								{
									HX_STACK_LINE(428)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(428)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(428)
									{
										HX_STACK_LINE(428)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(428)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(428)
											_this->_validate();
										}
									}
									HX_STACK_LINE(428)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",428);
								{
									HX_STACK_LINE(428)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(428)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(428)
									{
										HX_STACK_LINE(428)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(428)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(428)
											_this->_validate();
										}
									}
									HX_STACK_LINE(428)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(428)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)44)) && bool((_Function_3_2::Block(ret) == 122.5))))))){
							HX_STACK_LINE(428)
							{
								HX_STACK_LINE(428)
								ret->zpp_inner->x = (int)44;
								HX_STACK_LINE(428)
								ret->zpp_inner->y = 122.5;
								HX_STACK_LINE(428)
								{
								}
								HX_STACK_LINE(428)
								{
								}
							}
							HX_STACK_LINE(428)
							{
								HX_STACK_LINE(428)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(428)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(428)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(428)
						ret;
					}
					HX_STACK_LINE(428)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(428)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_86{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",428);
				{
					HX_STACK_LINE(428)
					{
					}
					HX_STACK_LINE(428)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(428)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(428)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(428)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(428)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(428)
						ret->zpp_pool = null();
						HX_STACK_LINE(428)
						ret->zpp_disp = false;
						HX_STACK_LINE(428)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(428)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(428)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",428);
								{
									HX_STACK_LINE(428)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(428)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(428)
									{
										HX_STACK_LINE(428)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(428)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(428)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(428)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(428)
											ret1->next = null();
										}
										HX_STACK_LINE(428)
										ret1->weak = false;
									}
									HX_STACK_LINE(428)
									ret1->_immutable = immutable;
									HX_STACK_LINE(428)
									{
										HX_STACK_LINE(428)
										ret1->x = (int)69;
										HX_STACK_LINE(428)
										ret1->y = 122.5;
										HX_STACK_LINE(428)
										{
										}
										HX_STACK_LINE(428)
										{
										}
									}
									HX_STACK_LINE(428)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(428)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(428)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(428)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(428)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(428)
						{
							HX_STACK_LINE(428)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(428)
							if ((_this->_immutable)){
								HX_STACK_LINE(428)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(428)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(428)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(428)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",428);
								{
									HX_STACK_LINE(428)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(428)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(428)
									{
										HX_STACK_LINE(428)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(428)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(428)
											_this->_validate();
										}
									}
									HX_STACK_LINE(428)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",428);
								{
									HX_STACK_LINE(428)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(428)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(428)
									{
										HX_STACK_LINE(428)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(428)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(428)
											_this->_validate();
										}
									}
									HX_STACK_LINE(428)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(428)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)69)) && bool((_Function_3_2::Block(ret) == 122.5))))))){
							HX_STACK_LINE(428)
							{
								HX_STACK_LINE(428)
								ret->zpp_inner->x = (int)69;
								HX_STACK_LINE(428)
								ret->zpp_inner->y = 122.5;
								HX_STACK_LINE(428)
								{
								}
								HX_STACK_LINE(428)
								{
								}
							}
							HX_STACK_LINE(428)
							{
								HX_STACK_LINE(428)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(428)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(428)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(428)
						ret;
					}
					HX_STACK_LINE(428)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(428)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_87{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",428);
				{
					HX_STACK_LINE(428)
					{
					}
					HX_STACK_LINE(428)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(428)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(428)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(428)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(428)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(428)
						ret->zpp_pool = null();
						HX_STACK_LINE(428)
						ret->zpp_disp = false;
						HX_STACK_LINE(428)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(428)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(428)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",428);
								{
									HX_STACK_LINE(428)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(428)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(428)
									{
										HX_STACK_LINE(428)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(428)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(428)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(428)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(428)
											ret1->next = null();
										}
										HX_STACK_LINE(428)
										ret1->weak = false;
									}
									HX_STACK_LINE(428)
									ret1->_immutable = immutable;
									HX_STACK_LINE(428)
									{
										HX_STACK_LINE(428)
										ret1->x = (int)59;
										HX_STACK_LINE(428)
										ret1->y = 90.5;
										HX_STACK_LINE(428)
										{
										}
										HX_STACK_LINE(428)
										{
										}
									}
									HX_STACK_LINE(428)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(428)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(428)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(428)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(428)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(428)
						{
							HX_STACK_LINE(428)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(428)
							if ((_this->_immutable)){
								HX_STACK_LINE(428)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(428)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(428)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(428)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",428);
								{
									HX_STACK_LINE(428)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(428)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(428)
									{
										HX_STACK_LINE(428)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(428)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(428)
											_this->_validate();
										}
									}
									HX_STACK_LINE(428)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",428);
								{
									HX_STACK_LINE(428)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(428)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(428)
									{
										HX_STACK_LINE(428)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(428)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(428)
											_this->_validate();
										}
									}
									HX_STACK_LINE(428)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(428)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)59)) && bool((_Function_3_2::Block(ret) == 90.5))))))){
							HX_STACK_LINE(428)
							{
								HX_STACK_LINE(428)
								ret->zpp_inner->x = (int)59;
								HX_STACK_LINE(428)
								ret->zpp_inner->y = 90.5;
								HX_STACK_LINE(428)
								{
								}
								HX_STACK_LINE(428)
								{
								}
							}
							HX_STACK_LINE(428)
							{
								HX_STACK_LINE(428)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(428)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(428)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(428)
						ret;
					}
					HX_STACK_LINE(428)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(428)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(427)
		::nape::shape::Polygon s15 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_84::Block()).Add(_Function_1_85::Block()).Add(_Function_1_86::Block()).Add(_Function_1_87::Block())),mat4,filt4);		HX_STACK_VAR(s15,"s15");
		HX_STACK_LINE(432)
		{
			HX_STACK_LINE(432)
			{
				HX_STACK_LINE(432)
				s15->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(432)
				if (((((  (((s15->zpp_inner->body != null()))) ? ::nape::phys::Body(s15->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body2))){
					HX_STACK_LINE(432)
					if (((s15->zpp_inner->body != null()))){
						HX_STACK_LINE(432)
						((  (((s15->zpp_inner->body != null()))) ? ::nape::phys::Body(s15->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s15);
					}
					HX_STACK_LINE(432)
					if (((body2 != null()))){
						HX_STACK_LINE(432)
						::nape::shape::ShapeList _this = body2->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(432)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(432)
							_this->push(s15);
						}
						else{
							HX_STACK_LINE(432)
							_this->unshift(s15);
						}
					}
				}
			}
			HX_STACK_LINE(432)
			if (((s15->zpp_inner->body != null()))){
				HX_STACK_LINE(432)
				s15->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(432)
				Dynamic();
			}
		}
		HX_STACK_LINE(433)
		{
			HX_STACK_LINE(433)
			{
				HX_STACK_LINE(433)
				s15->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(433)
				s15->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(433)
				s15->zpp_inner->wake();
			}
			HX_STACK_LINE(433)
			s15->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(434)
		{
			HX_STACK_LINE(434)
			{
				HX_STACK_LINE(434)
				s15->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(434)
				s15->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(434)
				{
				}
				HX_STACK_LINE(434)
				s15->zpp_inner->wake();
			}
			HX_STACK_LINE(434)
			s15->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(435)
		{
			HX_STACK_LINE(435)
			{
				HX_STACK_LINE(435)
				if (((prop4 == null()))){
					HX_STACK_LINE(435)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(435)
				s15->zpp_inner->setFluid(prop4->zpp_inner);
			}
			HX_STACK_LINE(435)
			{
				HX_STACK_LINE(435)
				s15->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(435)
				if (((s15->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(435)
					s15->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(435)
				s15->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(436)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s15){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",436);
					{
						HX_STACK_LINE(436)
						if (((s15->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(436)
							s15->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(436)
						return s15->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(436)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s15);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(436)
			{
				HX_STACK_LINE(436)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(436)
				while(((_g < _g1->length))){
					HX_STACK_LINE(436)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(436)
					++(_g);
					HX_STACK_LINE(436)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(436)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(436)
						continue;
					}
					HX_STACK_LINE(436)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(436)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(436)
					{
						HX_STACK_LINE(436)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(436)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(436)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(436)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_88{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
				{
					HX_STACK_LINE(439)
					{
					}
					HX_STACK_LINE(439)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(439)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(439)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(439)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(439)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(439)
						ret->zpp_pool = null();
						HX_STACK_LINE(439)
						ret->zpp_disp = false;
						HX_STACK_LINE(439)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(439)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(439)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
								{
									HX_STACK_LINE(439)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(439)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(439)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(439)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(439)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(439)
											ret1->next = null();
										}
										HX_STACK_LINE(439)
										ret1->weak = false;
									}
									HX_STACK_LINE(439)
									ret1->_immutable = immutable;
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										ret1->x = (int)78;
										HX_STACK_LINE(439)
										ret1->y = 112.5;
										HX_STACK_LINE(439)
										{
										}
										HX_STACK_LINE(439)
										{
										}
									}
									HX_STACK_LINE(439)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(439)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(439)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(439)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(439)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(439)
						{
							HX_STACK_LINE(439)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(439)
							if ((_this->_immutable)){
								HX_STACK_LINE(439)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(439)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(439)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(439)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
								{
									HX_STACK_LINE(439)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(439)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(439)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(439)
											_this->_validate();
										}
									}
									HX_STACK_LINE(439)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
								{
									HX_STACK_LINE(439)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(439)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(439)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(439)
											_this->_validate();
										}
									}
									HX_STACK_LINE(439)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(439)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)78)) && bool((_Function_3_2::Block(ret) == 112.5))))))){
							HX_STACK_LINE(439)
							{
								HX_STACK_LINE(439)
								ret->zpp_inner->x = (int)78;
								HX_STACK_LINE(439)
								ret->zpp_inner->y = 112.5;
								HX_STACK_LINE(439)
								{
								}
								HX_STACK_LINE(439)
								{
								}
							}
							HX_STACK_LINE(439)
							{
								HX_STACK_LINE(439)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(439)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(439)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(439)
						ret;
					}
					HX_STACK_LINE(439)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(439)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_89{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
				{
					HX_STACK_LINE(439)
					{
					}
					HX_STACK_LINE(439)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(439)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(439)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(439)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(439)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(439)
						ret->zpp_pool = null();
						HX_STACK_LINE(439)
						ret->zpp_disp = false;
						HX_STACK_LINE(439)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(439)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(439)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
								{
									HX_STACK_LINE(439)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(439)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(439)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(439)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(439)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(439)
											ret1->next = null();
										}
										HX_STACK_LINE(439)
										ret1->weak = false;
									}
									HX_STACK_LINE(439)
									ret1->_immutable = immutable;
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										ret1->x = 100.5;
										HX_STACK_LINE(439)
										ret1->y = (int)91;
										HX_STACK_LINE(439)
										{
										}
										HX_STACK_LINE(439)
										{
										}
									}
									HX_STACK_LINE(439)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(439)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(439)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(439)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(439)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(439)
						{
							HX_STACK_LINE(439)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(439)
							if ((_this->_immutable)){
								HX_STACK_LINE(439)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(439)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(439)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(439)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
								{
									HX_STACK_LINE(439)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(439)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(439)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(439)
											_this->_validate();
										}
									}
									HX_STACK_LINE(439)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
								{
									HX_STACK_LINE(439)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(439)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(439)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(439)
											_this->_validate();
										}
									}
									HX_STACK_LINE(439)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(439)
						if ((!(((bool((_Function_3_1::Block(ret) == 100.5)) && bool((_Function_3_2::Block(ret) == (int)91))))))){
							HX_STACK_LINE(439)
							{
								HX_STACK_LINE(439)
								ret->zpp_inner->x = 100.5;
								HX_STACK_LINE(439)
								ret->zpp_inner->y = (int)91;
								HX_STACK_LINE(439)
								{
								}
								HX_STACK_LINE(439)
								{
								}
							}
							HX_STACK_LINE(439)
							{
								HX_STACK_LINE(439)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(439)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(439)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(439)
						ret;
					}
					HX_STACK_LINE(439)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(439)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_90{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
				{
					HX_STACK_LINE(439)
					{
					}
					HX_STACK_LINE(439)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(439)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(439)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(439)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(439)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(439)
						ret->zpp_pool = null();
						HX_STACK_LINE(439)
						ret->zpp_disp = false;
						HX_STACK_LINE(439)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(439)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(439)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
								{
									HX_STACK_LINE(439)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(439)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(439)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(439)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(439)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(439)
											ret1->next = null();
										}
										HX_STACK_LINE(439)
										ret1->weak = false;
									}
									HX_STACK_LINE(439)
									ret1->_immutable = immutable;
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										ret1->x = 76.5;
										HX_STACK_LINE(439)
										ret1->y = (int)67;
										HX_STACK_LINE(439)
										{
										}
										HX_STACK_LINE(439)
										{
										}
									}
									HX_STACK_LINE(439)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(439)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(439)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(439)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(439)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(439)
						{
							HX_STACK_LINE(439)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(439)
							if ((_this->_immutable)){
								HX_STACK_LINE(439)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(439)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(439)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(439)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
								{
									HX_STACK_LINE(439)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(439)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(439)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(439)
											_this->_validate();
										}
									}
									HX_STACK_LINE(439)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
								{
									HX_STACK_LINE(439)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(439)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(439)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(439)
											_this->_validate();
										}
									}
									HX_STACK_LINE(439)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(439)
						if ((!(((bool((_Function_3_1::Block(ret) == 76.5)) && bool((_Function_3_2::Block(ret) == (int)67))))))){
							HX_STACK_LINE(439)
							{
								HX_STACK_LINE(439)
								ret->zpp_inner->x = 76.5;
								HX_STACK_LINE(439)
								ret->zpp_inner->y = (int)67;
								HX_STACK_LINE(439)
								{
								}
								HX_STACK_LINE(439)
								{
								}
							}
							HX_STACK_LINE(439)
							{
								HX_STACK_LINE(439)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(439)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(439)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(439)
						ret;
					}
					HX_STACK_LINE(439)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(439)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_91{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
				{
					HX_STACK_LINE(439)
					{
					}
					HX_STACK_LINE(439)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(439)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(439)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(439)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(439)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(439)
						ret->zpp_pool = null();
						HX_STACK_LINE(439)
						ret->zpp_disp = false;
						HX_STACK_LINE(439)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(439)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(439)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
								{
									HX_STACK_LINE(439)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(439)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(439)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(439)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(439)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(439)
											ret1->next = null();
										}
										HX_STACK_LINE(439)
										ret1->weak = false;
									}
									HX_STACK_LINE(439)
									ret1->_immutable = immutable;
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										ret1->x = 62.5;
										HX_STACK_LINE(439)
										ret1->y = (int)81;
										HX_STACK_LINE(439)
										{
										}
										HX_STACK_LINE(439)
										{
										}
									}
									HX_STACK_LINE(439)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(439)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(439)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(439)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(439)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(439)
						{
							HX_STACK_LINE(439)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(439)
							if ((_this->_immutable)){
								HX_STACK_LINE(439)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(439)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(439)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(439)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
								{
									HX_STACK_LINE(439)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(439)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(439)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(439)
											_this->_validate();
										}
									}
									HX_STACK_LINE(439)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
								{
									HX_STACK_LINE(439)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(439)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(439)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(439)
											_this->_validate();
										}
									}
									HX_STACK_LINE(439)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(439)
						if ((!(((bool((_Function_3_1::Block(ret) == 62.5)) && bool((_Function_3_2::Block(ret) == (int)81))))))){
							HX_STACK_LINE(439)
							{
								HX_STACK_LINE(439)
								ret->zpp_inner->x = 62.5;
								HX_STACK_LINE(439)
								ret->zpp_inner->y = (int)81;
								HX_STACK_LINE(439)
								{
								}
								HX_STACK_LINE(439)
								{
								}
							}
							HX_STACK_LINE(439)
							{
								HX_STACK_LINE(439)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(439)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(439)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(439)
						ret;
					}
					HX_STACK_LINE(439)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(439)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_92{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
				{
					HX_STACK_LINE(439)
					{
					}
					HX_STACK_LINE(439)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(439)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(439)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(439)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(439)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(439)
						ret->zpp_pool = null();
						HX_STACK_LINE(439)
						ret->zpp_disp = false;
						HX_STACK_LINE(439)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(439)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(439)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
								{
									HX_STACK_LINE(439)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(439)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(439)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(439)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(439)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(439)
											ret1->next = null();
										}
										HX_STACK_LINE(439)
										ret1->weak = false;
									}
									HX_STACK_LINE(439)
									ret1->_immutable = immutable;
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										ret1->x = (int)59;
										HX_STACK_LINE(439)
										ret1->y = 90.5;
										HX_STACK_LINE(439)
										{
										}
										HX_STACK_LINE(439)
										{
										}
									}
									HX_STACK_LINE(439)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(439)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(439)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(439)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(439)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(439)
						{
							HX_STACK_LINE(439)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(439)
							if ((_this->_immutable)){
								HX_STACK_LINE(439)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(439)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(439)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(439)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
								{
									HX_STACK_LINE(439)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(439)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(439)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(439)
											_this->_validate();
										}
									}
									HX_STACK_LINE(439)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",439);
								{
									HX_STACK_LINE(439)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(439)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(439)
									{
										HX_STACK_LINE(439)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(439)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(439)
											_this->_validate();
										}
									}
									HX_STACK_LINE(439)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(439)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)59)) && bool((_Function_3_2::Block(ret) == 90.5))))))){
							HX_STACK_LINE(439)
							{
								HX_STACK_LINE(439)
								ret->zpp_inner->x = (int)59;
								HX_STACK_LINE(439)
								ret->zpp_inner->y = 90.5;
								HX_STACK_LINE(439)
								{
								}
								HX_STACK_LINE(439)
								{
								}
							}
							HX_STACK_LINE(439)
							{
								HX_STACK_LINE(439)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(439)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(439)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(439)
						ret;
					}
					HX_STACK_LINE(439)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(439)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(438)
		::nape::shape::Polygon s16 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_88::Block()).Add(_Function_1_89::Block()).Add(_Function_1_90::Block()).Add(_Function_1_91::Block()).Add(_Function_1_92::Block())),mat4,filt4);		HX_STACK_VAR(s16,"s16");
		HX_STACK_LINE(443)
		{
			HX_STACK_LINE(443)
			{
				HX_STACK_LINE(443)
				s16->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(443)
				if (((((  (((s16->zpp_inner->body != null()))) ? ::nape::phys::Body(s16->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body2))){
					HX_STACK_LINE(443)
					if (((s16->zpp_inner->body != null()))){
						HX_STACK_LINE(443)
						((  (((s16->zpp_inner->body != null()))) ? ::nape::phys::Body(s16->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s16);
					}
					HX_STACK_LINE(443)
					if (((body2 != null()))){
						HX_STACK_LINE(443)
						::nape::shape::ShapeList _this = body2->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(443)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(443)
							_this->push(s16);
						}
						else{
							HX_STACK_LINE(443)
							_this->unshift(s16);
						}
					}
				}
			}
			HX_STACK_LINE(443)
			if (((s16->zpp_inner->body != null()))){
				HX_STACK_LINE(443)
				s16->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(443)
				Dynamic();
			}
		}
		HX_STACK_LINE(444)
		{
			HX_STACK_LINE(444)
			{
				HX_STACK_LINE(444)
				s16->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(444)
				s16->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(444)
				s16->zpp_inner->wake();
			}
			HX_STACK_LINE(444)
			s16->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(445)
		{
			HX_STACK_LINE(445)
			{
				HX_STACK_LINE(445)
				s16->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(445)
				s16->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(445)
				{
				}
				HX_STACK_LINE(445)
				s16->zpp_inner->wake();
			}
			HX_STACK_LINE(445)
			s16->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(446)
		{
			HX_STACK_LINE(446)
			{
				HX_STACK_LINE(446)
				if (((prop4 == null()))){
					HX_STACK_LINE(446)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(446)
				s16->zpp_inner->setFluid(prop4->zpp_inner);
			}
			HX_STACK_LINE(446)
			{
				HX_STACK_LINE(446)
				s16->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(446)
				if (((s16->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(446)
					s16->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(446)
				s16->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(447)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s16){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",447);
					{
						HX_STACK_LINE(447)
						if (((s16->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(447)
							s16->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(447)
						return s16->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(447)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s16);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(447)
			{
				HX_STACK_LINE(447)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(447)
				while(((_g < _g1->length))){
					HX_STACK_LINE(447)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(447)
					++(_g);
					HX_STACK_LINE(447)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(447)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(447)
						continue;
					}
					HX_STACK_LINE(447)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(447)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(447)
					{
						HX_STACK_LINE(447)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(447)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(447)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(447)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_93{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
				{
					HX_STACK_LINE(450)
					{
					}
					HX_STACK_LINE(450)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(450)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(450)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(450)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(450)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(450)
						ret->zpp_pool = null();
						HX_STACK_LINE(450)
						ret->zpp_disp = false;
						HX_STACK_LINE(450)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(450)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(450)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(450)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(450)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(450)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(450)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(450)
											ret1->next = null();
										}
										HX_STACK_LINE(450)
										ret1->weak = false;
									}
									HX_STACK_LINE(450)
									ret1->_immutable = immutable;
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										ret1->x = 76.5;
										HX_STACK_LINE(450)
										ret1->y = (int)67;
										HX_STACK_LINE(450)
										{
										}
										HX_STACK_LINE(450)
										{
										}
									}
									HX_STACK_LINE(450)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(450)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(450)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(450)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(450)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(450)
						{
							HX_STACK_LINE(450)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(450)
							if ((_this->_immutable)){
								HX_STACK_LINE(450)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(450)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(450)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(450)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(450)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(450)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(450)
											_this->_validate();
										}
									}
									HX_STACK_LINE(450)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(450)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(450)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(450)
											_this->_validate();
										}
									}
									HX_STACK_LINE(450)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(450)
						if ((!(((bool((_Function_3_1::Block(ret) == 76.5)) && bool((_Function_3_2::Block(ret) == (int)67))))))){
							HX_STACK_LINE(450)
							{
								HX_STACK_LINE(450)
								ret->zpp_inner->x = 76.5;
								HX_STACK_LINE(450)
								ret->zpp_inner->y = (int)67;
								HX_STACK_LINE(450)
								{
								}
								HX_STACK_LINE(450)
								{
								}
							}
							HX_STACK_LINE(450)
							{
								HX_STACK_LINE(450)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(450)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(450)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(450)
						ret;
					}
					HX_STACK_LINE(450)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(450)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_94{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
				{
					HX_STACK_LINE(450)
					{
					}
					HX_STACK_LINE(450)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(450)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(450)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(450)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(450)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(450)
						ret->zpp_pool = null();
						HX_STACK_LINE(450)
						ret->zpp_disp = false;
						HX_STACK_LINE(450)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(450)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(450)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(450)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(450)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(450)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(450)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(450)
											ret1->next = null();
										}
										HX_STACK_LINE(450)
										ret1->weak = false;
									}
									HX_STACK_LINE(450)
									ret1->_immutable = immutable;
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										ret1->x = 100.5;
										HX_STACK_LINE(450)
										ret1->y = (int)91;
										HX_STACK_LINE(450)
										{
										}
										HX_STACK_LINE(450)
										{
										}
									}
									HX_STACK_LINE(450)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(450)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(450)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(450)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(450)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(450)
						{
							HX_STACK_LINE(450)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(450)
							if ((_this->_immutable)){
								HX_STACK_LINE(450)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(450)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(450)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(450)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(450)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(450)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(450)
											_this->_validate();
										}
									}
									HX_STACK_LINE(450)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(450)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(450)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(450)
											_this->_validate();
										}
									}
									HX_STACK_LINE(450)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(450)
						if ((!(((bool((_Function_3_1::Block(ret) == 100.5)) && bool((_Function_3_2::Block(ret) == (int)91))))))){
							HX_STACK_LINE(450)
							{
								HX_STACK_LINE(450)
								ret->zpp_inner->x = 100.5;
								HX_STACK_LINE(450)
								ret->zpp_inner->y = (int)91;
								HX_STACK_LINE(450)
								{
								}
								HX_STACK_LINE(450)
								{
								}
							}
							HX_STACK_LINE(450)
							{
								HX_STACK_LINE(450)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(450)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(450)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(450)
						ret;
					}
					HX_STACK_LINE(450)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(450)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_95{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
				{
					HX_STACK_LINE(450)
					{
					}
					HX_STACK_LINE(450)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(450)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(450)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(450)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(450)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(450)
						ret->zpp_pool = null();
						HX_STACK_LINE(450)
						ret->zpp_disp = false;
						HX_STACK_LINE(450)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(450)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(450)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(450)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(450)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(450)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(450)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(450)
											ret1->next = null();
										}
										HX_STACK_LINE(450)
										ret1->weak = false;
									}
									HX_STACK_LINE(450)
									ret1->_immutable = immutable;
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										ret1->x = 102.5;
										HX_STACK_LINE(450)
										ret1->y = (int)63;
										HX_STACK_LINE(450)
										{
										}
										HX_STACK_LINE(450)
										{
										}
									}
									HX_STACK_LINE(450)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(450)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(450)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(450)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(450)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(450)
						{
							HX_STACK_LINE(450)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(450)
							if ((_this->_immutable)){
								HX_STACK_LINE(450)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(450)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(450)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(450)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(450)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(450)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(450)
											_this->_validate();
										}
									}
									HX_STACK_LINE(450)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(450)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(450)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(450)
											_this->_validate();
										}
									}
									HX_STACK_LINE(450)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(450)
						if ((!(((bool((_Function_3_1::Block(ret) == 102.5)) && bool((_Function_3_2::Block(ret) == (int)63))))))){
							HX_STACK_LINE(450)
							{
								HX_STACK_LINE(450)
								ret->zpp_inner->x = 102.5;
								HX_STACK_LINE(450)
								ret->zpp_inner->y = (int)63;
								HX_STACK_LINE(450)
								{
								}
								HX_STACK_LINE(450)
								{
								}
							}
							HX_STACK_LINE(450)
							{
								HX_STACK_LINE(450)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(450)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(450)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(450)
						ret;
					}
					HX_STACK_LINE(450)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(450)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_96{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
				{
					HX_STACK_LINE(450)
					{
					}
					HX_STACK_LINE(450)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(450)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(450)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(450)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(450)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(450)
						ret->zpp_pool = null();
						HX_STACK_LINE(450)
						ret->zpp_disp = false;
						HX_STACK_LINE(450)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(450)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(450)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(450)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(450)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(450)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(450)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(450)
											ret1->next = null();
										}
										HX_STACK_LINE(450)
										ret1->weak = false;
									}
									HX_STACK_LINE(450)
									ret1->_immutable = immutable;
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										ret1->x = 98.5;
										HX_STACK_LINE(450)
										ret1->y = (int)28;
										HX_STACK_LINE(450)
										{
										}
										HX_STACK_LINE(450)
										{
										}
									}
									HX_STACK_LINE(450)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(450)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(450)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(450)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(450)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(450)
						{
							HX_STACK_LINE(450)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(450)
							if ((_this->_immutable)){
								HX_STACK_LINE(450)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(450)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(450)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(450)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(450)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(450)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(450)
											_this->_validate();
										}
									}
									HX_STACK_LINE(450)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(450)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(450)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(450)
											_this->_validate();
										}
									}
									HX_STACK_LINE(450)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(450)
						if ((!(((bool((_Function_3_1::Block(ret) == 98.5)) && bool((_Function_3_2::Block(ret) == (int)28))))))){
							HX_STACK_LINE(450)
							{
								HX_STACK_LINE(450)
								ret->zpp_inner->x = 98.5;
								HX_STACK_LINE(450)
								ret->zpp_inner->y = (int)28;
								HX_STACK_LINE(450)
								{
								}
								HX_STACK_LINE(450)
								{
								}
							}
							HX_STACK_LINE(450)
							{
								HX_STACK_LINE(450)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(450)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(450)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(450)
						ret;
					}
					HX_STACK_LINE(450)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(450)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_97{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
				{
					HX_STACK_LINE(450)
					{
					}
					HX_STACK_LINE(450)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(450)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(450)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(450)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(450)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(450)
						ret->zpp_pool = null();
						HX_STACK_LINE(450)
						ret->zpp_disp = false;
						HX_STACK_LINE(450)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(450)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(450)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(450)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(450)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(450)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(450)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(450)
											ret1->next = null();
										}
										HX_STACK_LINE(450)
										ret1->weak = false;
									}
									HX_STACK_LINE(450)
									ret1->_immutable = immutable;
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										ret1->x = (int)85;
										HX_STACK_LINE(450)
										ret1->y = 5.5;
										HX_STACK_LINE(450)
										{
										}
										HX_STACK_LINE(450)
										{
										}
									}
									HX_STACK_LINE(450)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(450)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(450)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(450)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(450)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(450)
						{
							HX_STACK_LINE(450)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(450)
							if ((_this->_immutable)){
								HX_STACK_LINE(450)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(450)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(450)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(450)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(450)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(450)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(450)
											_this->_validate();
										}
									}
									HX_STACK_LINE(450)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(450)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(450)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(450)
											_this->_validate();
										}
									}
									HX_STACK_LINE(450)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(450)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)85)) && bool((_Function_3_2::Block(ret) == 5.5))))))){
							HX_STACK_LINE(450)
							{
								HX_STACK_LINE(450)
								ret->zpp_inner->x = (int)85;
								HX_STACK_LINE(450)
								ret->zpp_inner->y = 5.5;
								HX_STACK_LINE(450)
								{
								}
								HX_STACK_LINE(450)
								{
								}
							}
							HX_STACK_LINE(450)
							{
								HX_STACK_LINE(450)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(450)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(450)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(450)
						ret;
					}
					HX_STACK_LINE(450)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(450)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_98{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
				{
					HX_STACK_LINE(450)
					{
					}
					HX_STACK_LINE(450)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(450)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(450)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(450)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(450)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(450)
						ret->zpp_pool = null();
						HX_STACK_LINE(450)
						ret->zpp_disp = false;
						HX_STACK_LINE(450)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(450)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(450)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(450)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(450)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(450)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(450)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(450)
											ret1->next = null();
										}
										HX_STACK_LINE(450)
										ret1->weak = false;
									}
									HX_STACK_LINE(450)
									ret1->_immutable = immutable;
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										ret1->x = (int)84;
										HX_STACK_LINE(450)
										ret1->y = 5.5;
										HX_STACK_LINE(450)
										{
										}
										HX_STACK_LINE(450)
										{
										}
									}
									HX_STACK_LINE(450)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(450)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(450)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(450)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(450)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(450)
						{
							HX_STACK_LINE(450)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(450)
							if ((_this->_immutable)){
								HX_STACK_LINE(450)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(450)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(450)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(450)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(450)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(450)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(450)
											_this->_validate();
										}
									}
									HX_STACK_LINE(450)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(450)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(450)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(450)
											_this->_validate();
										}
									}
									HX_STACK_LINE(450)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(450)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)84)) && bool((_Function_3_2::Block(ret) == 5.5))))))){
							HX_STACK_LINE(450)
							{
								HX_STACK_LINE(450)
								ret->zpp_inner->x = (int)84;
								HX_STACK_LINE(450)
								ret->zpp_inner->y = 5.5;
								HX_STACK_LINE(450)
								{
								}
								HX_STACK_LINE(450)
								{
								}
							}
							HX_STACK_LINE(450)
							{
								HX_STACK_LINE(450)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(450)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(450)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(450)
						ret;
					}
					HX_STACK_LINE(450)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(450)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_99{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
				{
					HX_STACK_LINE(450)
					{
					}
					HX_STACK_LINE(450)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(450)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(450)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(450)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(450)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(450)
						ret->zpp_pool = null();
						HX_STACK_LINE(450)
						ret->zpp_disp = false;
						HX_STACK_LINE(450)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(450)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(450)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(450)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(450)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(450)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(450)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(450)
											ret1->next = null();
										}
										HX_STACK_LINE(450)
										ret1->weak = false;
									}
									HX_STACK_LINE(450)
									ret1->_immutable = immutable;
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										ret1->x = 74.5;
										HX_STACK_LINE(450)
										ret1->y = (int)12;
										HX_STACK_LINE(450)
										{
										}
										HX_STACK_LINE(450)
										{
										}
									}
									HX_STACK_LINE(450)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(450)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(450)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(450)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(450)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(450)
						{
							HX_STACK_LINE(450)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(450)
							if ((_this->_immutable)){
								HX_STACK_LINE(450)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(450)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(450)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(450)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(450)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(450)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(450)
											_this->_validate();
										}
									}
									HX_STACK_LINE(450)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",450);
								{
									HX_STACK_LINE(450)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(450)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(450)
									{
										HX_STACK_LINE(450)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(450)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(450)
											_this->_validate();
										}
									}
									HX_STACK_LINE(450)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(450)
						if ((!(((bool((_Function_3_1::Block(ret) == 74.5)) && bool((_Function_3_2::Block(ret) == (int)12))))))){
							HX_STACK_LINE(450)
							{
								HX_STACK_LINE(450)
								ret->zpp_inner->x = 74.5;
								HX_STACK_LINE(450)
								ret->zpp_inner->y = (int)12;
								HX_STACK_LINE(450)
								{
								}
								HX_STACK_LINE(450)
								{
								}
							}
							HX_STACK_LINE(450)
							{
								HX_STACK_LINE(450)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(450)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(450)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(450)
						ret;
					}
					HX_STACK_LINE(450)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(450)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(449)
		::nape::shape::Polygon s17 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_93::Block()).Add(_Function_1_94::Block()).Add(_Function_1_95::Block()).Add(_Function_1_96::Block()).Add(_Function_1_97::Block()).Add(_Function_1_98::Block()).Add(_Function_1_99::Block())),mat4,filt4);		HX_STACK_VAR(s17,"s17");
		HX_STACK_LINE(454)
		{
			HX_STACK_LINE(454)
			{
				HX_STACK_LINE(454)
				s17->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(454)
				if (((((  (((s17->zpp_inner->body != null()))) ? ::nape::phys::Body(s17->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body2))){
					HX_STACK_LINE(454)
					if (((s17->zpp_inner->body != null()))){
						HX_STACK_LINE(454)
						((  (((s17->zpp_inner->body != null()))) ? ::nape::phys::Body(s17->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s17);
					}
					HX_STACK_LINE(454)
					if (((body2 != null()))){
						HX_STACK_LINE(454)
						::nape::shape::ShapeList _this = body2->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(454)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(454)
							_this->push(s17);
						}
						else{
							HX_STACK_LINE(454)
							_this->unshift(s17);
						}
					}
				}
			}
			HX_STACK_LINE(454)
			if (((s17->zpp_inner->body != null()))){
				HX_STACK_LINE(454)
				s17->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(454)
				Dynamic();
			}
		}
		HX_STACK_LINE(455)
		{
			HX_STACK_LINE(455)
			{
				HX_STACK_LINE(455)
				s17->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(455)
				s17->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(455)
				s17->zpp_inner->wake();
			}
			HX_STACK_LINE(455)
			s17->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(456)
		{
			HX_STACK_LINE(456)
			{
				HX_STACK_LINE(456)
				s17->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(456)
				s17->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(456)
				{
				}
				HX_STACK_LINE(456)
				s17->zpp_inner->wake();
			}
			HX_STACK_LINE(456)
			s17->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(457)
		{
			HX_STACK_LINE(457)
			{
				HX_STACK_LINE(457)
				if (((prop4 == null()))){
					HX_STACK_LINE(457)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(457)
				s17->zpp_inner->setFluid(prop4->zpp_inner);
			}
			HX_STACK_LINE(457)
			{
				HX_STACK_LINE(457)
				s17->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(457)
				if (((s17->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(457)
					s17->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(457)
				s17->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(458)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s17){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",458);
					{
						HX_STACK_LINE(458)
						if (((s17->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(458)
							s17->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(458)
						return s17->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(458)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s17);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(458)
			{
				HX_STACK_LINE(458)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(458)
				while(((_g < _g1->length))){
					HX_STACK_LINE(458)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(458)
					++(_g);
					HX_STACK_LINE(458)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(458)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(458)
						continue;
					}
					HX_STACK_LINE(458)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(458)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(458)
					{
						HX_STACK_LINE(458)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(458)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(458)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(458)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_100{
			inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body2){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",463);
				{
					struct _Function_2_1{
						inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body2){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",463);
							{
								HX_STACK_LINE(463)
								if ((body2->zpp_inner->world)){
									HX_STACK_LINE(463)
									hx::Throw ((HX_CSTRING("Error: Space::world has no ") + HX_CSTRING("localCOM")));
								}
								HX_STACK_LINE(463)
								if (((body2->zpp_inner->wrap_localCOM == null()))){
									struct _Function_4_1{
										inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body2){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",463);
											{
												HX_STACK_LINE(463)
												Float x = body2->zpp_inner->localCOMx;		HX_STACK_VAR(x,"x");
												Float y = body2->zpp_inner->localCOMy;		HX_STACK_VAR(y,"y");
												bool weak = false;		HX_STACK_VAR(weak,"weak");
												HX_STACK_LINE(463)
												if (((bool((x != x)) || bool((y != y))))){
													HX_STACK_LINE(463)
													hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
												}
												HX_STACK_LINE(463)
												::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
												HX_STACK_LINE(463)
												if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
													HX_STACK_LINE(463)
													ret = ::nape::geom::Vec2_obj::__new(null(),null());
												}
												else{
													HX_STACK_LINE(463)
													ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
													HX_STACK_LINE(463)
													::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
													HX_STACK_LINE(463)
													ret->zpp_pool = null();
													HX_STACK_LINE(463)
													ret->zpp_disp = false;
													HX_STACK_LINE(463)
													if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
														HX_STACK_LINE(463)
														::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
													}
												}
												HX_STACK_LINE(463)
												if (((ret->zpp_inner == null()))){
													struct _Function_6_1{
														inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",463);
															{
																HX_STACK_LINE(463)
																bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
																HX_STACK_LINE(463)
																::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(463)
																{
																	HX_STACK_LINE(463)
																	if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
																		HX_STACK_LINE(463)
																		ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
																	}
																	else{
																		HX_STACK_LINE(463)
																		ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
																		HX_STACK_LINE(463)
																		::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
																		HX_STACK_LINE(463)
																		ret1->next = null();
																	}
																	HX_STACK_LINE(463)
																	ret1->weak = false;
																}
																HX_STACK_LINE(463)
																ret1->_immutable = immutable;
																HX_STACK_LINE(463)
																{
																	HX_STACK_LINE(463)
																	ret1->x = x;
																	HX_STACK_LINE(463)
																	ret1->y = y;
																	HX_STACK_LINE(463)
																	{
																	}
																	HX_STACK_LINE(463)
																	{
																	}
																}
																HX_STACK_LINE(463)
																return ret1;
															}
															return null();
														}
													};
													HX_STACK_LINE(463)
													ret->zpp_inner = _Function_6_1::Block(x,y);
													HX_STACK_LINE(463)
													ret->zpp_inner->outer = ret;
												}
												else{
													HX_STACK_LINE(463)
													if (((bool((ret != null())) && bool(ret->zpp_disp)))){
														HX_STACK_LINE(463)
														hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
													}
													HX_STACK_LINE(463)
													{
														HX_STACK_LINE(463)
														::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(463)
														if ((_this->_immutable)){
															HX_STACK_LINE(463)
															hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
														}
														HX_STACK_LINE(463)
														if (((_this->_isimmutable_dyn() != null()))){
															HX_STACK_LINE(463)
															_this->_isimmutable();
														}
													}
													HX_STACK_LINE(463)
													if (((bool((x != x)) || bool((y != y))))){
														HX_STACK_LINE(463)
														hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
													}
													struct _Function_6_1{
														inline static Float Block( ::nape::geom::Vec2 &ret){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",463);
															{
																HX_STACK_LINE(463)
																if (((bool((ret != null())) && bool(ret->zpp_disp)))){
																	HX_STACK_LINE(463)
																	hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
																}
																HX_STACK_LINE(463)
																{
																	HX_STACK_LINE(463)
																	::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(463)
																	if (((_this->_validate_dyn() != null()))){
																		HX_STACK_LINE(463)
																		_this->_validate();
																	}
																}
																HX_STACK_LINE(463)
																return ret->zpp_inner->x;
															}
															return null();
														}
													};
													struct _Function_6_2{
														inline static Float Block( ::nape::geom::Vec2 &ret){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",463);
															{
																HX_STACK_LINE(463)
																if (((bool((ret != null())) && bool(ret->zpp_disp)))){
																	HX_STACK_LINE(463)
																	hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
																}
																HX_STACK_LINE(463)
																{
																	HX_STACK_LINE(463)
																	::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(463)
																	if (((_this->_validate_dyn() != null()))){
																		HX_STACK_LINE(463)
																		_this->_validate();
																	}
																}
																HX_STACK_LINE(463)
																return ret->zpp_inner->y;
															}
															return null();
														}
													};
													HX_STACK_LINE(463)
													if ((!(((bool((_Function_6_1::Block(ret) == x)) && bool((_Function_6_2::Block(ret) == y))))))){
														HX_STACK_LINE(463)
														{
															HX_STACK_LINE(463)
															ret->zpp_inner->x = x;
															HX_STACK_LINE(463)
															ret->zpp_inner->y = y;
															HX_STACK_LINE(463)
															{
															}
															HX_STACK_LINE(463)
															{
															}
														}
														HX_STACK_LINE(463)
														{
															HX_STACK_LINE(463)
															::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(463)
															if (((_this->_invalidate_dyn() != null()))){
																HX_STACK_LINE(463)
																_this->_invalidate(_this);
															}
														}
													}
													HX_STACK_LINE(463)
													ret;
												}
												HX_STACK_LINE(463)
												ret->zpp_inner->weak = weak;
												HX_STACK_LINE(463)
												return ret;
											}
											return null();
										}
									};
									HX_STACK_LINE(463)
									body2->zpp_inner->wrap_localCOM = _Function_4_1::Block(body2);
									HX_STACK_LINE(463)
									body2->zpp_inner->wrap_localCOM->zpp_inner->_inuse = true;
									HX_STACK_LINE(463)
									body2->zpp_inner->wrap_localCOM->zpp_inner->_immutable = true;
									HX_STACK_LINE(463)
									body2->zpp_inner->wrap_localCOM->zpp_inner->_validate = body2->zpp_inner->getlocalCOM_dyn();
								}
								HX_STACK_LINE(463)
								return body2->zpp_inner->wrap_localCOM;
							}
							return null();
						}
					};
					HX_STACK_LINE(463)
					::nape::geom::Vec2 _this = _Function_2_1::Block(body2);		HX_STACK_VAR(_this,"_this");
					bool weak = false;		HX_STACK_VAR(weak,"weak");
					HX_STACK_LINE(463)
					if (((bool((_this != null())) && bool(_this->zpp_disp)))){
						HX_STACK_LINE(463)
						hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
					}
					struct _Function_2_2{
						inline static ::nape::geom::Vec2 Block( ::nape::geom::Vec2 &_this,bool &weak){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",463);
							{
								struct _Function_3_1{
									inline static Float Block( ::nape::geom::Vec2 &_this){
										HX_STACK_PUSH("*::closure","PhysicsData.hx",463);
										{
											HX_STACK_LINE(463)
											if ((_this->zpp_disp)){
												HX_STACK_LINE(463)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(463)
											{
												HX_STACK_LINE(463)
												::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
												HX_STACK_LINE(463)
												if (((_this1->_validate_dyn() != null()))){
													HX_STACK_LINE(463)
													_this1->_validate();
												}
											}
											HX_STACK_LINE(463)
											return _this->zpp_inner->x;
										}
										return null();
									}
								};
								struct _Function_3_2{
									inline static Float Block( ::nape::geom::Vec2 &_this){
										HX_STACK_PUSH("*::closure","PhysicsData.hx",463);
										{
											HX_STACK_LINE(463)
											if ((_this->zpp_disp)){
												HX_STACK_LINE(463)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(463)
											{
												HX_STACK_LINE(463)
												::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
												HX_STACK_LINE(463)
												if (((_this1->_validate_dyn() != null()))){
													HX_STACK_LINE(463)
													_this1->_validate();
												}
											}
											HX_STACK_LINE(463)
											return _this->zpp_inner->y;
										}
										return null();
									}
								};
								HX_STACK_LINE(463)
								Float x = _Function_3_1::Block(_this);		HX_STACK_VAR(x,"x");
								Float y = _Function_3_2::Block(_this);		HX_STACK_VAR(y,"y");
								HX_STACK_LINE(463)
								if (((bool((x != x)) || bool((y != y))))){
									HX_STACK_LINE(463)
									hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
								}
								HX_STACK_LINE(463)
								::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(463)
								if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
									HX_STACK_LINE(463)
									ret = ::nape::geom::Vec2_obj::__new(null(),null());
								}
								else{
									HX_STACK_LINE(463)
									ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
									HX_STACK_LINE(463)
									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
									HX_STACK_LINE(463)
									ret->zpp_pool = null();
									HX_STACK_LINE(463)
									ret->zpp_disp = false;
									HX_STACK_LINE(463)
									if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
										HX_STACK_LINE(463)
										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
									}
								}
								HX_STACK_LINE(463)
								if (((ret->zpp_inner == null()))){
									struct _Function_4_1{
										inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",463);
											{
												HX_STACK_LINE(463)
												bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
												HX_STACK_LINE(463)
												::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(463)
												{
													HX_STACK_LINE(463)
													if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
														HX_STACK_LINE(463)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
													}
													else{
														HX_STACK_LINE(463)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
														HX_STACK_LINE(463)
														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(463)
														ret1->next = null();
													}
													HX_STACK_LINE(463)
													ret1->weak = false;
												}
												HX_STACK_LINE(463)
												ret1->_immutable = immutable;
												HX_STACK_LINE(463)
												{
													HX_STACK_LINE(463)
													ret1->x = x;
													HX_STACK_LINE(463)
													ret1->y = y;
													HX_STACK_LINE(463)
													{
													}
													HX_STACK_LINE(463)
													{
													}
												}
												HX_STACK_LINE(463)
												return ret1;
											}
											return null();
										}
									};
									HX_STACK_LINE(463)
									ret->zpp_inner = _Function_4_1::Block(x,y);
									HX_STACK_LINE(463)
									ret->zpp_inner->outer = ret;
								}
								else{
									HX_STACK_LINE(463)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(463)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(463)
									{
										HX_STACK_LINE(463)
										::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
										HX_STACK_LINE(463)
										if ((_this1->_immutable)){
											HX_STACK_LINE(463)
											hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
										}
										HX_STACK_LINE(463)
										if (((_this1->_isimmutable_dyn() != null()))){
											HX_STACK_LINE(463)
											_this1->_isimmutable();
										}
									}
									HX_STACK_LINE(463)
									if (((bool((x != x)) || bool((y != y))))){
										HX_STACK_LINE(463)
										hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
									}
									struct _Function_4_1{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",463);
											{
												HX_STACK_LINE(463)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(463)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(463)
												{
													HX_STACK_LINE(463)
													::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(463)
													if (((_this1->_validate_dyn() != null()))){
														HX_STACK_LINE(463)
														_this1->_validate();
													}
												}
												HX_STACK_LINE(463)
												return ret->zpp_inner->x;
											}
											return null();
										}
									};
									struct _Function_4_2{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",463);
											{
												HX_STACK_LINE(463)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(463)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(463)
												{
													HX_STACK_LINE(463)
													::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(463)
													if (((_this1->_validate_dyn() != null()))){
														HX_STACK_LINE(463)
														_this1->_validate();
													}
												}
												HX_STACK_LINE(463)
												return ret->zpp_inner->y;
											}
											return null();
										}
									};
									HX_STACK_LINE(463)
									if ((!(((bool((_Function_4_1::Block(ret) == x)) && bool((_Function_4_2::Block(ret) == y))))))){
										HX_STACK_LINE(463)
										{
											HX_STACK_LINE(463)
											ret->zpp_inner->x = x;
											HX_STACK_LINE(463)
											ret->zpp_inner->y = y;
											HX_STACK_LINE(463)
											{
											}
											HX_STACK_LINE(463)
											{
											}
										}
										HX_STACK_LINE(463)
										{
											HX_STACK_LINE(463)
											::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
											HX_STACK_LINE(463)
											if (((_this1->_invalidate_dyn() != null()))){
												HX_STACK_LINE(463)
												_this1->_invalidate(_this1);
											}
										}
									}
									HX_STACK_LINE(463)
									ret;
								}
								HX_STACK_LINE(463)
								ret->zpp_inner->weak = weak;
								HX_STACK_LINE(463)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(463)
					return _Function_2_2::Block(_this,weak);
				}
				return null();
			}
		};
		HX_STACK_LINE(463)
		::nape::geom::Vec2 anchor2 = _Function_1_100::Block(body2);		HX_STACK_VAR(anchor2,"anchor2");
		struct _Function_1_101{
			inline static ::nape::geom::Vec2 Block( ::nape::geom::Vec2 &anchor2){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",464);
				{
					struct _Function_2_1{
						inline static Float Block( ::nape::geom::Vec2 &anchor2){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",464);
							{
								HX_STACK_LINE(464)
								if (((bool((anchor2 != null())) && bool(anchor2->zpp_disp)))){
									HX_STACK_LINE(464)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(464)
								{
									HX_STACK_LINE(464)
									::zpp_nape::geom::ZPP_Vec2 _this = anchor2->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(464)
									if (((_this->_validate_dyn() != null()))){
										HX_STACK_LINE(464)
										_this->_validate();
									}
								}
								HX_STACK_LINE(464)
								return anchor2->zpp_inner->x;
							}
							return null();
						}
					};
					struct _Function_2_2{
						inline static Float Block( ::nape::geom::Vec2 &anchor2){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",464);
							{
								HX_STACK_LINE(464)
								if (((bool((anchor2 != null())) && bool(anchor2->zpp_disp)))){
									HX_STACK_LINE(464)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(464)
								{
									HX_STACK_LINE(464)
									::zpp_nape::geom::ZPP_Vec2 _this = anchor2->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(464)
									if (((_this->_validate_dyn() != null()))){
										HX_STACK_LINE(464)
										_this->_validate();
									}
								}
								HX_STACK_LINE(464)
								return anchor2->zpp_inner->y;
							}
							return null();
						}
					};
					HX_STACK_LINE(464)
					Float x = -(_Function_2_1::Block(anchor2));		HX_STACK_VAR(x,"x");
					Float y = -(_Function_2_2::Block(anchor2));		HX_STACK_VAR(y,"y");
					struct _Function_2_3{
						inline static ::nape::geom::Vec2 Block( Float &x,Float &y){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",464);
							{
								HX_STACK_LINE(464)
								if (((bool((x != x)) || bool((y != y))))){
									HX_STACK_LINE(464)
									hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
								}
								HX_STACK_LINE(464)
								::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(464)
								if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
									HX_STACK_LINE(464)
									ret = ::nape::geom::Vec2_obj::__new(null(),null());
								}
								else{
									HX_STACK_LINE(464)
									ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
									HX_STACK_LINE(464)
									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
									HX_STACK_LINE(464)
									ret->zpp_pool = null();
									HX_STACK_LINE(464)
									ret->zpp_disp = false;
									HX_STACK_LINE(464)
									if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
										HX_STACK_LINE(464)
										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
									}
								}
								HX_STACK_LINE(464)
								if (((ret->zpp_inner == null()))){
									struct _Function_4_1{
										inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",464);
											{
												HX_STACK_LINE(464)
												bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
												HX_STACK_LINE(464)
												::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(464)
												{
													HX_STACK_LINE(464)
													if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
														HX_STACK_LINE(464)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
													}
													else{
														HX_STACK_LINE(464)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
														HX_STACK_LINE(464)
														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(464)
														ret1->next = null();
													}
													HX_STACK_LINE(464)
													ret1->weak = false;
												}
												HX_STACK_LINE(464)
												ret1->_immutable = immutable;
												HX_STACK_LINE(464)
												{
													HX_STACK_LINE(464)
													ret1->x = x;
													HX_STACK_LINE(464)
													ret1->y = y;
													HX_STACK_LINE(464)
													{
													}
													HX_STACK_LINE(464)
													{
													}
												}
												HX_STACK_LINE(464)
												return ret1;
											}
											return null();
										}
									};
									HX_STACK_LINE(464)
									ret->zpp_inner = _Function_4_1::Block(x,y);
									HX_STACK_LINE(464)
									ret->zpp_inner->outer = ret;
								}
								else{
									HX_STACK_LINE(464)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(464)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(464)
									{
										HX_STACK_LINE(464)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(464)
										if ((_this->_immutable)){
											HX_STACK_LINE(464)
											hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
										}
										HX_STACK_LINE(464)
										if (((_this->_isimmutable_dyn() != null()))){
											HX_STACK_LINE(464)
											_this->_isimmutable();
										}
									}
									HX_STACK_LINE(464)
									if (((bool((x != x)) || bool((y != y))))){
										HX_STACK_LINE(464)
										hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
									}
									struct _Function_4_1{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",464);
											{
												HX_STACK_LINE(464)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(464)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(464)
												{
													HX_STACK_LINE(464)
													::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(464)
													if (((_this->_validate_dyn() != null()))){
														HX_STACK_LINE(464)
														_this->_validate();
													}
												}
												HX_STACK_LINE(464)
												return ret->zpp_inner->x;
											}
											return null();
										}
									};
									struct _Function_4_2{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",464);
											{
												HX_STACK_LINE(464)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(464)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(464)
												{
													HX_STACK_LINE(464)
													::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(464)
													if (((_this->_validate_dyn() != null()))){
														HX_STACK_LINE(464)
														_this->_validate();
													}
												}
												HX_STACK_LINE(464)
												return ret->zpp_inner->y;
											}
											return null();
										}
									};
									HX_STACK_LINE(464)
									if ((!(((bool((_Function_4_1::Block(ret) == x)) && bool((_Function_4_2::Block(ret) == y))))))){
										HX_STACK_LINE(464)
										{
											HX_STACK_LINE(464)
											ret->zpp_inner->x = x;
											HX_STACK_LINE(464)
											ret->zpp_inner->y = y;
											HX_STACK_LINE(464)
											{
											}
											HX_STACK_LINE(464)
											{
											}
										}
										HX_STACK_LINE(464)
										{
											HX_STACK_LINE(464)
											::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(464)
											if (((_this->_invalidate_dyn() != null()))){
												HX_STACK_LINE(464)
												_this->_invalidate(_this);
											}
										}
									}
									HX_STACK_LINE(464)
									ret;
								}
								HX_STACK_LINE(464)
								ret->zpp_inner->weak = true;
								HX_STACK_LINE(464)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(464)
					return _Function_2_3::Block(x,y);
				}
				return null();
			}
		};
		HX_STACK_LINE(464)
		body2->translateShapes(_Function_1_101::Block(anchor2));
		HX_STACK_LINE(465)
		{
			struct _Function_2_1{
				inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body2){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",465);
					{
						HX_STACK_LINE(465)
						if (((body2->zpp_inner->wrap_pos == null()))){
							HX_STACK_LINE(465)
							body2->zpp_inner->setupPosition();
						}
						HX_STACK_LINE(465)
						return body2->zpp_inner->wrap_pos;
					}
					return null();
				}
			};
			HX_STACK_LINE(465)
			::nape::geom::Vec2 _this = _Function_2_1::Block(body2);		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(465)
			if (((bool((_this != null())) && bool(_this->zpp_disp)))){
				HX_STACK_LINE(465)
				hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
			}
			HX_STACK_LINE(465)
			{
				HX_STACK_LINE(465)
				::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
				HX_STACK_LINE(465)
				if ((_this1->_immutable)){
					HX_STACK_LINE(465)
					hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
				}
				HX_STACK_LINE(465)
				if (((_this1->_isimmutable_dyn() != null()))){
					HX_STACK_LINE(465)
					_this1->_isimmutable();
				}
			}
			HX_STACK_LINE(465)
			{
			}
			struct _Function_2_2{
				inline static Float Block( ::nape::geom::Vec2 &_this){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",465);
					{
						HX_STACK_LINE(465)
						if (((bool((_this != null())) && bool(_this->zpp_disp)))){
							HX_STACK_LINE(465)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(465)
						{
							HX_STACK_LINE(465)
							::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(465)
							if (((_this1->_validate_dyn() != null()))){
								HX_STACK_LINE(465)
								_this1->_validate();
							}
						}
						HX_STACK_LINE(465)
						return _this->zpp_inner->x;
					}
					return null();
				}
			};
			struct _Function_2_3{
				inline static Float Block( ::nape::geom::Vec2 &_this){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",465);
					{
						HX_STACK_LINE(465)
						if (((bool((_this != null())) && bool(_this->zpp_disp)))){
							HX_STACK_LINE(465)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(465)
						{
							HX_STACK_LINE(465)
							::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(465)
							if (((_this1->_validate_dyn() != null()))){
								HX_STACK_LINE(465)
								_this1->_validate();
							}
						}
						HX_STACK_LINE(465)
						return _this->zpp_inner->y;
					}
					return null();
				}
			};
			HX_STACK_LINE(465)
			if ((!(((bool((_Function_2_2::Block(_this) == (int)0)) && bool((_Function_2_3::Block(_this) == (int)0))))))){
				HX_STACK_LINE(465)
				{
					HX_STACK_LINE(465)
					_this->zpp_inner->x = (int)0;
					HX_STACK_LINE(465)
					_this->zpp_inner->y = (int)0;
					HX_STACK_LINE(465)
					{
					}
					HX_STACK_LINE(465)
					{
					}
				}
				HX_STACK_LINE(465)
				{
					HX_STACK_LINE(465)
					::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
					HX_STACK_LINE(465)
					if (((_this1->_invalidate_dyn() != null()))){
						HX_STACK_LINE(465)
						_this1->_invalidate(_this1);
					}
				}
			}
			HX_STACK_LINE(465)
			_this;
		}
		struct _Function_1_102{
			inline static Dynamic Block( ::nape::phys::Body &body2,::nape::geom::Vec2 &anchor2){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",467);
				{
					hx::Anon __result = hx::Anon_obj::Create();
					__result->Add(HX_CSTRING("body") , body2,false);
					__result->Add(HX_CSTRING("anchor") , anchor2,false);
					return __result;
				}
				return null();
			}
		};
		HX_STACK_LINE(467)
		::PhysicsData_obj::bodies->set(HX_CSTRING("banaan"),_Function_1_102::Block(body2,anchor2));
		HX_STACK_LINE(469)
		::nape::phys::Body body3 = ::nape::phys::Body_obj::__new(null(),null());		HX_STACK_VAR(body3,"body3");
		HX_STACK_LINE(470)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::phys::Body &body3){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",470);
					{
						HX_STACK_LINE(470)
						if (((body3->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(470)
							body3->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(470)
						return body3->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(470)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(body3);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(470)
			{
				HX_STACK_LINE(470)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(470)
				while(((_g < _g1->length))){
					HX_STACK_LINE(470)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(470)
					++(_g);
					HX_STACK_LINE(470)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(470)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(470)
						continue;
					}
					HX_STACK_LINE(470)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(470)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(470)
					{
						HX_STACK_LINE(470)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(470)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(470)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(470)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		HX_STACK_LINE(473)
		::nape::phys::Material mat5 = ::nape::phys::Material_obj::__new(null(),null(),null(),null(),null());		HX_STACK_VAR(mat5,"mat5");
		HX_STACK_LINE(474)
		::nape::dynamics::InteractionFilter filt5 = ::nape::dynamics::InteractionFilter_obj::__new(null(),null(),null(),null(),null(),null());		HX_STACK_VAR(filt5,"filt5");
		HX_STACK_LINE(475)
		::nape::phys::FluidProperties prop5 = ::nape::phys::FluidProperties_obj::__new(null(),null());		HX_STACK_VAR(prop5,"prop5");
		struct _Function_1_103{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
				{
					HX_STACK_LINE(480)
					{
					}
					HX_STACK_LINE(480)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(480)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(480)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(480)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(480)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(480)
						ret->zpp_pool = null();
						HX_STACK_LINE(480)
						ret->zpp_disp = false;
						HX_STACK_LINE(480)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(480)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(480)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(480)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(480)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(480)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(480)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(480)
											ret1->next = null();
										}
										HX_STACK_LINE(480)
										ret1->weak = false;
									}
									HX_STACK_LINE(480)
									ret1->_immutable = immutable;
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										ret1->x = (int)2;
										HX_STACK_LINE(480)
										ret1->y = 146.5;
										HX_STACK_LINE(480)
										{
										}
										HX_STACK_LINE(480)
										{
										}
									}
									HX_STACK_LINE(480)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(480)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(480)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(480)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(480)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(480)
						{
							HX_STACK_LINE(480)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(480)
							if ((_this->_immutable)){
								HX_STACK_LINE(480)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(480)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(480)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(480)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(480)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(480)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(480)
											_this->_validate();
										}
									}
									HX_STACK_LINE(480)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(480)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(480)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(480)
											_this->_validate();
										}
									}
									HX_STACK_LINE(480)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(480)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)2)) && bool((_Function_3_2::Block(ret) == 146.5))))))){
							HX_STACK_LINE(480)
							{
								HX_STACK_LINE(480)
								ret->zpp_inner->x = (int)2;
								HX_STACK_LINE(480)
								ret->zpp_inner->y = 146.5;
								HX_STACK_LINE(480)
								{
								}
								HX_STACK_LINE(480)
								{
								}
							}
							HX_STACK_LINE(480)
							{
								HX_STACK_LINE(480)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(480)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(480)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(480)
						ret;
					}
					HX_STACK_LINE(480)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(480)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_104{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
				{
					HX_STACK_LINE(480)
					{
					}
					HX_STACK_LINE(480)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(480)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(480)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(480)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(480)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(480)
						ret->zpp_pool = null();
						HX_STACK_LINE(480)
						ret->zpp_disp = false;
						HX_STACK_LINE(480)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(480)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(480)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(480)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(480)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(480)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(480)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(480)
											ret1->next = null();
										}
										HX_STACK_LINE(480)
										ret1->weak = false;
									}
									HX_STACK_LINE(480)
									ret1->_immutable = immutable;
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										ret1->x = (int)27;
										HX_STACK_LINE(480)
										ret1->y = 149.5;
										HX_STACK_LINE(480)
										{
										}
										HX_STACK_LINE(480)
										{
										}
									}
									HX_STACK_LINE(480)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(480)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(480)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(480)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(480)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(480)
						{
							HX_STACK_LINE(480)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(480)
							if ((_this->_immutable)){
								HX_STACK_LINE(480)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(480)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(480)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(480)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(480)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(480)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(480)
											_this->_validate();
										}
									}
									HX_STACK_LINE(480)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(480)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(480)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(480)
											_this->_validate();
										}
									}
									HX_STACK_LINE(480)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(480)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)27)) && bool((_Function_3_2::Block(ret) == 149.5))))))){
							HX_STACK_LINE(480)
							{
								HX_STACK_LINE(480)
								ret->zpp_inner->x = (int)27;
								HX_STACK_LINE(480)
								ret->zpp_inner->y = 149.5;
								HX_STACK_LINE(480)
								{
								}
								HX_STACK_LINE(480)
								{
								}
							}
							HX_STACK_LINE(480)
							{
								HX_STACK_LINE(480)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(480)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(480)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(480)
						ret;
					}
					HX_STACK_LINE(480)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(480)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_105{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
				{
					HX_STACK_LINE(480)
					{
					}
					HX_STACK_LINE(480)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(480)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(480)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(480)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(480)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(480)
						ret->zpp_pool = null();
						HX_STACK_LINE(480)
						ret->zpp_disp = false;
						HX_STACK_LINE(480)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(480)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(480)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(480)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(480)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(480)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(480)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(480)
											ret1->next = null();
										}
										HX_STACK_LINE(480)
										ret1->weak = false;
									}
									HX_STACK_LINE(480)
									ret1->_immutable = immutable;
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										ret1->x = 40.5;
										HX_STACK_LINE(480)
										ret1->y = (int)138;
										HX_STACK_LINE(480)
										{
										}
										HX_STACK_LINE(480)
										{
										}
									}
									HX_STACK_LINE(480)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(480)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(480)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(480)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(480)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(480)
						{
							HX_STACK_LINE(480)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(480)
							if ((_this->_immutable)){
								HX_STACK_LINE(480)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(480)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(480)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(480)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(480)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(480)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(480)
											_this->_validate();
										}
									}
									HX_STACK_LINE(480)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(480)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(480)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(480)
											_this->_validate();
										}
									}
									HX_STACK_LINE(480)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(480)
						if ((!(((bool((_Function_3_1::Block(ret) == 40.5)) && bool((_Function_3_2::Block(ret) == (int)138))))))){
							HX_STACK_LINE(480)
							{
								HX_STACK_LINE(480)
								ret->zpp_inner->x = 40.5;
								HX_STACK_LINE(480)
								ret->zpp_inner->y = (int)138;
								HX_STACK_LINE(480)
								{
								}
								HX_STACK_LINE(480)
								{
								}
							}
							HX_STACK_LINE(480)
							{
								HX_STACK_LINE(480)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(480)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(480)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(480)
						ret;
					}
					HX_STACK_LINE(480)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(480)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_106{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
				{
					HX_STACK_LINE(480)
					{
					}
					HX_STACK_LINE(480)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(480)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(480)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(480)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(480)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(480)
						ret->zpp_pool = null();
						HX_STACK_LINE(480)
						ret->zpp_disp = false;
						HX_STACK_LINE(480)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(480)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(480)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(480)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(480)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(480)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(480)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(480)
											ret1->next = null();
										}
										HX_STACK_LINE(480)
										ret1->weak = false;
									}
									HX_STACK_LINE(480)
									ret1->_immutable = immutable;
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										ret1->x = 40.5;
										HX_STACK_LINE(480)
										ret1->y = (int)68;
										HX_STACK_LINE(480)
										{
										}
										HX_STACK_LINE(480)
										{
										}
									}
									HX_STACK_LINE(480)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(480)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(480)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(480)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(480)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(480)
						{
							HX_STACK_LINE(480)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(480)
							if ((_this->_immutable)){
								HX_STACK_LINE(480)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(480)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(480)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(480)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(480)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(480)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(480)
											_this->_validate();
										}
									}
									HX_STACK_LINE(480)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(480)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(480)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(480)
											_this->_validate();
										}
									}
									HX_STACK_LINE(480)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(480)
						if ((!(((bool((_Function_3_1::Block(ret) == 40.5)) && bool((_Function_3_2::Block(ret) == (int)68))))))){
							HX_STACK_LINE(480)
							{
								HX_STACK_LINE(480)
								ret->zpp_inner->x = 40.5;
								HX_STACK_LINE(480)
								ret->zpp_inner->y = (int)68;
								HX_STACK_LINE(480)
								{
								}
								HX_STACK_LINE(480)
								{
								}
							}
							HX_STACK_LINE(480)
							{
								HX_STACK_LINE(480)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(480)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(480)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(480)
						ret;
					}
					HX_STACK_LINE(480)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(480)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_107{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
				{
					HX_STACK_LINE(480)
					{
					}
					HX_STACK_LINE(480)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(480)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(480)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(480)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(480)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(480)
						ret->zpp_pool = null();
						HX_STACK_LINE(480)
						ret->zpp_disp = false;
						HX_STACK_LINE(480)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(480)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(480)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(480)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(480)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(480)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(480)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(480)
											ret1->next = null();
										}
										HX_STACK_LINE(480)
										ret1->weak = false;
									}
									HX_STACK_LINE(480)
									ret1->_immutable = immutable;
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										ret1->x = 29.5;
										HX_STACK_LINE(480)
										ret1->y = (int)4;
										HX_STACK_LINE(480)
										{
										}
										HX_STACK_LINE(480)
										{
										}
									}
									HX_STACK_LINE(480)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(480)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(480)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(480)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(480)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(480)
						{
							HX_STACK_LINE(480)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(480)
							if ((_this->_immutable)){
								HX_STACK_LINE(480)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(480)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(480)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(480)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(480)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(480)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(480)
											_this->_validate();
										}
									}
									HX_STACK_LINE(480)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(480)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(480)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(480)
											_this->_validate();
										}
									}
									HX_STACK_LINE(480)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(480)
						if ((!(((bool((_Function_3_1::Block(ret) == 29.5)) && bool((_Function_3_2::Block(ret) == (int)4))))))){
							HX_STACK_LINE(480)
							{
								HX_STACK_LINE(480)
								ret->zpp_inner->x = 29.5;
								HX_STACK_LINE(480)
								ret->zpp_inner->y = (int)4;
								HX_STACK_LINE(480)
								{
								}
								HX_STACK_LINE(480)
								{
								}
							}
							HX_STACK_LINE(480)
							{
								HX_STACK_LINE(480)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(480)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(480)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(480)
						ret;
					}
					HX_STACK_LINE(480)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(480)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_108{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
				{
					HX_STACK_LINE(480)
					{
					}
					HX_STACK_LINE(480)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(480)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(480)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(480)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(480)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(480)
						ret->zpp_pool = null();
						HX_STACK_LINE(480)
						ret->zpp_disp = false;
						HX_STACK_LINE(480)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(480)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(480)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(480)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(480)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(480)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(480)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(480)
											ret1->next = null();
										}
										HX_STACK_LINE(480)
										ret1->weak = false;
									}
									HX_STACK_LINE(480)
									ret1->_immutable = immutable;
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										ret1->x = (int)15;
										HX_STACK_LINE(480)
										ret1->y = -0.5;
										HX_STACK_LINE(480)
										{
										}
										HX_STACK_LINE(480)
										{
										}
									}
									HX_STACK_LINE(480)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(480)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(480)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(480)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(480)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(480)
						{
							HX_STACK_LINE(480)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(480)
							if ((_this->_immutable)){
								HX_STACK_LINE(480)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(480)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(480)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(480)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(480)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(480)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(480)
											_this->_validate();
										}
									}
									HX_STACK_LINE(480)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(480)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(480)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(480)
											_this->_validate();
										}
									}
									HX_STACK_LINE(480)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(480)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)15)) && bool((_Function_3_2::Block(ret) == -0.5))))))){
							HX_STACK_LINE(480)
							{
								HX_STACK_LINE(480)
								ret->zpp_inner->x = (int)15;
								HX_STACK_LINE(480)
								ret->zpp_inner->y = -0.5;
								HX_STACK_LINE(480)
								{
								}
								HX_STACK_LINE(480)
								{
								}
							}
							HX_STACK_LINE(480)
							{
								HX_STACK_LINE(480)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(480)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(480)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(480)
						ret;
					}
					HX_STACK_LINE(480)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(480)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_109{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
				{
					HX_STACK_LINE(480)
					{
					}
					HX_STACK_LINE(480)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(480)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(480)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(480)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(480)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(480)
						ret->zpp_pool = null();
						HX_STACK_LINE(480)
						ret->zpp_disp = false;
						HX_STACK_LINE(480)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(480)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(480)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(480)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(480)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(480)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(480)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(480)
											ret1->next = null();
										}
										HX_STACK_LINE(480)
										ret1->weak = false;
									}
									HX_STACK_LINE(480)
									ret1->_immutable = immutable;
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										ret1->x = -0.5;
										HX_STACK_LINE(480)
										ret1->y = (int)66;
										HX_STACK_LINE(480)
										{
										}
										HX_STACK_LINE(480)
										{
										}
									}
									HX_STACK_LINE(480)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(480)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(480)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(480)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(480)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(480)
						{
							HX_STACK_LINE(480)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(480)
							if ((_this->_immutable)){
								HX_STACK_LINE(480)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(480)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(480)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(480)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(480)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(480)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(480)
											_this->_validate();
										}
									}
									HX_STACK_LINE(480)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(480)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(480)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(480)
											_this->_validate();
										}
									}
									HX_STACK_LINE(480)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(480)
						if ((!(((bool((_Function_3_1::Block(ret) == -0.5)) && bool((_Function_3_2::Block(ret) == (int)66))))))){
							HX_STACK_LINE(480)
							{
								HX_STACK_LINE(480)
								ret->zpp_inner->x = -0.5;
								HX_STACK_LINE(480)
								ret->zpp_inner->y = (int)66;
								HX_STACK_LINE(480)
								{
								}
								HX_STACK_LINE(480)
								{
								}
							}
							HX_STACK_LINE(480)
							{
								HX_STACK_LINE(480)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(480)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(480)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(480)
						ret;
					}
					HX_STACK_LINE(480)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(480)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_110{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
				{
					HX_STACK_LINE(480)
					{
					}
					HX_STACK_LINE(480)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(480)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(480)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(480)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(480)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(480)
						ret->zpp_pool = null();
						HX_STACK_LINE(480)
						ret->zpp_disp = false;
						HX_STACK_LINE(480)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(480)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(480)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(480)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(480)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(480)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(480)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(480)
											ret1->next = null();
										}
										HX_STACK_LINE(480)
										ret1->weak = false;
									}
									HX_STACK_LINE(480)
									ret1->_immutable = immutable;
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										ret1->x = -0.5;
										HX_STACK_LINE(480)
										ret1->y = (int)136;
										HX_STACK_LINE(480)
										{
										}
										HX_STACK_LINE(480)
										{
										}
									}
									HX_STACK_LINE(480)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(480)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(480)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(480)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(480)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(480)
						{
							HX_STACK_LINE(480)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(480)
							if ((_this->_immutable)){
								HX_STACK_LINE(480)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(480)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(480)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(480)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(480)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(480)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(480)
											_this->_validate();
										}
									}
									HX_STACK_LINE(480)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",480);
								{
									HX_STACK_LINE(480)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(480)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(480)
									{
										HX_STACK_LINE(480)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(480)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(480)
											_this->_validate();
										}
									}
									HX_STACK_LINE(480)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(480)
						if ((!(((bool((_Function_3_1::Block(ret) == -0.5)) && bool((_Function_3_2::Block(ret) == (int)136))))))){
							HX_STACK_LINE(480)
							{
								HX_STACK_LINE(480)
								ret->zpp_inner->x = -0.5;
								HX_STACK_LINE(480)
								ret->zpp_inner->y = (int)136;
								HX_STACK_LINE(480)
								{
								}
								HX_STACK_LINE(480)
								{
								}
							}
							HX_STACK_LINE(480)
							{
								HX_STACK_LINE(480)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(480)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(480)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(480)
						ret;
					}
					HX_STACK_LINE(480)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(480)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(479)
		::nape::shape::Polygon s18 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_103::Block()).Add(_Function_1_104::Block()).Add(_Function_1_105::Block()).Add(_Function_1_106::Block()).Add(_Function_1_107::Block()).Add(_Function_1_108::Block()).Add(_Function_1_109::Block()).Add(_Function_1_110::Block())),mat5,filt5);		HX_STACK_VAR(s18,"s18");
		HX_STACK_LINE(484)
		{
			HX_STACK_LINE(484)
			{
				HX_STACK_LINE(484)
				s18->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(484)
				if (((((  (((s18->zpp_inner->body != null()))) ? ::nape::phys::Body(s18->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body3))){
					HX_STACK_LINE(484)
					if (((s18->zpp_inner->body != null()))){
						HX_STACK_LINE(484)
						((  (((s18->zpp_inner->body != null()))) ? ::nape::phys::Body(s18->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s18);
					}
					HX_STACK_LINE(484)
					if (((body3 != null()))){
						HX_STACK_LINE(484)
						::nape::shape::ShapeList _this = body3->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(484)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(484)
							_this->push(s18);
						}
						else{
							HX_STACK_LINE(484)
							_this->unshift(s18);
						}
					}
				}
			}
			HX_STACK_LINE(484)
			if (((s18->zpp_inner->body != null()))){
				HX_STACK_LINE(484)
				s18->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(484)
				Dynamic();
			}
		}
		HX_STACK_LINE(485)
		{
			HX_STACK_LINE(485)
			{
				HX_STACK_LINE(485)
				s18->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(485)
				s18->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(485)
				s18->zpp_inner->wake();
			}
			HX_STACK_LINE(485)
			s18->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(486)
		{
			HX_STACK_LINE(486)
			{
				HX_STACK_LINE(486)
				s18->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(486)
				s18->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(486)
				{
				}
				HX_STACK_LINE(486)
				s18->zpp_inner->wake();
			}
			HX_STACK_LINE(486)
			s18->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(487)
		{
			HX_STACK_LINE(487)
			{
				HX_STACK_LINE(487)
				if (((prop5 == null()))){
					HX_STACK_LINE(487)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(487)
				s18->zpp_inner->setFluid(prop5->zpp_inner);
			}
			HX_STACK_LINE(487)
			{
				HX_STACK_LINE(487)
				s18->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(487)
				if (((s18->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(487)
					s18->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(487)
				s18->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(488)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s18){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",488);
					{
						HX_STACK_LINE(488)
						if (((s18->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(488)
							s18->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(488)
						return s18->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(488)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s18);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(488)
			{
				HX_STACK_LINE(488)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(488)
				while(((_g < _g1->length))){
					HX_STACK_LINE(488)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(488)
					++(_g);
					HX_STACK_LINE(488)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(488)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(488)
						continue;
					}
					HX_STACK_LINE(488)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(488)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(488)
					{
						HX_STACK_LINE(488)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(488)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(488)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(488)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_111{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",491);
				{
					HX_STACK_LINE(491)
					{
					}
					HX_STACK_LINE(491)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(491)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(491)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(491)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(491)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(491)
						ret->zpp_pool = null();
						HX_STACK_LINE(491)
						ret->zpp_disp = false;
						HX_STACK_LINE(491)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(491)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(491)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",491);
								{
									HX_STACK_LINE(491)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(491)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(491)
									{
										HX_STACK_LINE(491)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(491)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(491)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(491)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(491)
											ret1->next = null();
										}
										HX_STACK_LINE(491)
										ret1->weak = false;
									}
									HX_STACK_LINE(491)
									ret1->_immutable = immutable;
									HX_STACK_LINE(491)
									{
										HX_STACK_LINE(491)
										ret1->x = 29.5;
										HX_STACK_LINE(491)
										ret1->y = (int)4;
										HX_STACK_LINE(491)
										{
										}
										HX_STACK_LINE(491)
										{
										}
									}
									HX_STACK_LINE(491)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(491)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(491)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(491)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(491)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(491)
						{
							HX_STACK_LINE(491)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(491)
							if ((_this->_immutable)){
								HX_STACK_LINE(491)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(491)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(491)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(491)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",491);
								{
									HX_STACK_LINE(491)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(491)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(491)
									{
										HX_STACK_LINE(491)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(491)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(491)
											_this->_validate();
										}
									}
									HX_STACK_LINE(491)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",491);
								{
									HX_STACK_LINE(491)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(491)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(491)
									{
										HX_STACK_LINE(491)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(491)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(491)
											_this->_validate();
										}
									}
									HX_STACK_LINE(491)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(491)
						if ((!(((bool((_Function_3_1::Block(ret) == 29.5)) && bool((_Function_3_2::Block(ret) == (int)4))))))){
							HX_STACK_LINE(491)
							{
								HX_STACK_LINE(491)
								ret->zpp_inner->x = 29.5;
								HX_STACK_LINE(491)
								ret->zpp_inner->y = (int)4;
								HX_STACK_LINE(491)
								{
								}
								HX_STACK_LINE(491)
								{
								}
							}
							HX_STACK_LINE(491)
							{
								HX_STACK_LINE(491)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(491)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(491)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(491)
						ret;
					}
					HX_STACK_LINE(491)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(491)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_112{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",491);
				{
					HX_STACK_LINE(491)
					{
					}
					HX_STACK_LINE(491)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(491)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(491)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(491)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(491)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(491)
						ret->zpp_pool = null();
						HX_STACK_LINE(491)
						ret->zpp_disp = false;
						HX_STACK_LINE(491)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(491)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(491)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",491);
								{
									HX_STACK_LINE(491)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(491)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(491)
									{
										HX_STACK_LINE(491)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(491)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(491)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(491)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(491)
											ret1->next = null();
										}
										HX_STACK_LINE(491)
										ret1->weak = false;
									}
									HX_STACK_LINE(491)
									ret1->_immutable = immutable;
									HX_STACK_LINE(491)
									{
										HX_STACK_LINE(491)
										ret1->x = (int)16;
										HX_STACK_LINE(491)
										ret1->y = -0.5;
										HX_STACK_LINE(491)
										{
										}
										HX_STACK_LINE(491)
										{
										}
									}
									HX_STACK_LINE(491)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(491)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(491)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(491)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(491)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(491)
						{
							HX_STACK_LINE(491)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(491)
							if ((_this->_immutable)){
								HX_STACK_LINE(491)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(491)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(491)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(491)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",491);
								{
									HX_STACK_LINE(491)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(491)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(491)
									{
										HX_STACK_LINE(491)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(491)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(491)
											_this->_validate();
										}
									}
									HX_STACK_LINE(491)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",491);
								{
									HX_STACK_LINE(491)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(491)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(491)
									{
										HX_STACK_LINE(491)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(491)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(491)
											_this->_validate();
										}
									}
									HX_STACK_LINE(491)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(491)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)16)) && bool((_Function_3_2::Block(ret) == -0.5))))))){
							HX_STACK_LINE(491)
							{
								HX_STACK_LINE(491)
								ret->zpp_inner->x = (int)16;
								HX_STACK_LINE(491)
								ret->zpp_inner->y = -0.5;
								HX_STACK_LINE(491)
								{
								}
								HX_STACK_LINE(491)
								{
								}
							}
							HX_STACK_LINE(491)
							{
								HX_STACK_LINE(491)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(491)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(491)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(491)
						ret;
					}
					HX_STACK_LINE(491)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(491)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_113{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",491);
				{
					HX_STACK_LINE(491)
					{
					}
					HX_STACK_LINE(491)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(491)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(491)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(491)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(491)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(491)
						ret->zpp_pool = null();
						HX_STACK_LINE(491)
						ret->zpp_disp = false;
						HX_STACK_LINE(491)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(491)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(491)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",491);
								{
									HX_STACK_LINE(491)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(491)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(491)
									{
										HX_STACK_LINE(491)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(491)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(491)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(491)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(491)
											ret1->next = null();
										}
										HX_STACK_LINE(491)
										ret1->weak = false;
									}
									HX_STACK_LINE(491)
									ret1->_immutable = immutable;
									HX_STACK_LINE(491)
									{
										HX_STACK_LINE(491)
										ret1->x = (int)15;
										HX_STACK_LINE(491)
										ret1->y = -0.5;
										HX_STACK_LINE(491)
										{
										}
										HX_STACK_LINE(491)
										{
										}
									}
									HX_STACK_LINE(491)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(491)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(491)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(491)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(491)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(491)
						{
							HX_STACK_LINE(491)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(491)
							if ((_this->_immutable)){
								HX_STACK_LINE(491)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(491)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(491)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(491)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",491);
								{
									HX_STACK_LINE(491)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(491)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(491)
									{
										HX_STACK_LINE(491)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(491)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(491)
											_this->_validate();
										}
									}
									HX_STACK_LINE(491)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",491);
								{
									HX_STACK_LINE(491)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(491)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(491)
									{
										HX_STACK_LINE(491)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(491)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(491)
											_this->_validate();
										}
									}
									HX_STACK_LINE(491)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(491)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)15)) && bool((_Function_3_2::Block(ret) == -0.5))))))){
							HX_STACK_LINE(491)
							{
								HX_STACK_LINE(491)
								ret->zpp_inner->x = (int)15;
								HX_STACK_LINE(491)
								ret->zpp_inner->y = -0.5;
								HX_STACK_LINE(491)
								{
								}
								HX_STACK_LINE(491)
								{
								}
							}
							HX_STACK_LINE(491)
							{
								HX_STACK_LINE(491)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(491)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(491)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(491)
						ret;
					}
					HX_STACK_LINE(491)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(491)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(490)
		::nape::shape::Polygon s19 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_111::Block()).Add(_Function_1_112::Block()).Add(_Function_1_113::Block())),mat5,filt5);		HX_STACK_VAR(s19,"s19");
		HX_STACK_LINE(495)
		{
			HX_STACK_LINE(495)
			{
				HX_STACK_LINE(495)
				s19->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(495)
				if (((((  (((s19->zpp_inner->body != null()))) ? ::nape::phys::Body(s19->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body3))){
					HX_STACK_LINE(495)
					if (((s19->zpp_inner->body != null()))){
						HX_STACK_LINE(495)
						((  (((s19->zpp_inner->body != null()))) ? ::nape::phys::Body(s19->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s19);
					}
					HX_STACK_LINE(495)
					if (((body3 != null()))){
						HX_STACK_LINE(495)
						::nape::shape::ShapeList _this = body3->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(495)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(495)
							_this->push(s19);
						}
						else{
							HX_STACK_LINE(495)
							_this->unshift(s19);
						}
					}
				}
			}
			HX_STACK_LINE(495)
			if (((s19->zpp_inner->body != null()))){
				HX_STACK_LINE(495)
				s19->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(495)
				Dynamic();
			}
		}
		HX_STACK_LINE(496)
		{
			HX_STACK_LINE(496)
			{
				HX_STACK_LINE(496)
				s19->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(496)
				s19->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(496)
				s19->zpp_inner->wake();
			}
			HX_STACK_LINE(496)
			s19->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(497)
		{
			HX_STACK_LINE(497)
			{
				HX_STACK_LINE(497)
				s19->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(497)
				s19->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(497)
				{
				}
				HX_STACK_LINE(497)
				s19->zpp_inner->wake();
			}
			HX_STACK_LINE(497)
			s19->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(498)
		{
			HX_STACK_LINE(498)
			{
				HX_STACK_LINE(498)
				if (((prop5 == null()))){
					HX_STACK_LINE(498)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(498)
				s19->zpp_inner->setFluid(prop5->zpp_inner);
			}
			HX_STACK_LINE(498)
			{
				HX_STACK_LINE(498)
				s19->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(498)
				if (((s19->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(498)
					s19->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(498)
				s19->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(499)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s19){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",499);
					{
						HX_STACK_LINE(499)
						if (((s19->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(499)
							s19->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(499)
						return s19->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(499)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s19);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(499)
			{
				HX_STACK_LINE(499)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(499)
				while(((_g < _g1->length))){
					HX_STACK_LINE(499)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(499)
					++(_g);
					HX_STACK_LINE(499)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(499)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(499)
						continue;
					}
					HX_STACK_LINE(499)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(499)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(499)
					{
						HX_STACK_LINE(499)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(499)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(499)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(499)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_114{
			inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body3){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",504);
				{
					struct _Function_2_1{
						inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body3){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",504);
							{
								HX_STACK_LINE(504)
								if ((body3->zpp_inner->world)){
									HX_STACK_LINE(504)
									hx::Throw ((HX_CSTRING("Error: Space::world has no ") + HX_CSTRING("localCOM")));
								}
								HX_STACK_LINE(504)
								if (((body3->zpp_inner->wrap_localCOM == null()))){
									struct _Function_4_1{
										inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body3){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",504);
											{
												HX_STACK_LINE(504)
												Float x = body3->zpp_inner->localCOMx;		HX_STACK_VAR(x,"x");
												Float y = body3->zpp_inner->localCOMy;		HX_STACK_VAR(y,"y");
												bool weak = false;		HX_STACK_VAR(weak,"weak");
												HX_STACK_LINE(504)
												if (((bool((x != x)) || bool((y != y))))){
													HX_STACK_LINE(504)
													hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
												}
												HX_STACK_LINE(504)
												::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
												HX_STACK_LINE(504)
												if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
													HX_STACK_LINE(504)
													ret = ::nape::geom::Vec2_obj::__new(null(),null());
												}
												else{
													HX_STACK_LINE(504)
													ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
													HX_STACK_LINE(504)
													::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
													HX_STACK_LINE(504)
													ret->zpp_pool = null();
													HX_STACK_LINE(504)
													ret->zpp_disp = false;
													HX_STACK_LINE(504)
													if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
														HX_STACK_LINE(504)
														::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
													}
												}
												HX_STACK_LINE(504)
												if (((ret->zpp_inner == null()))){
													struct _Function_6_1{
														inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",504);
															{
																HX_STACK_LINE(504)
																bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
																HX_STACK_LINE(504)
																::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(504)
																{
																	HX_STACK_LINE(504)
																	if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
																		HX_STACK_LINE(504)
																		ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
																	}
																	else{
																		HX_STACK_LINE(504)
																		ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
																		HX_STACK_LINE(504)
																		::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
																		HX_STACK_LINE(504)
																		ret1->next = null();
																	}
																	HX_STACK_LINE(504)
																	ret1->weak = false;
																}
																HX_STACK_LINE(504)
																ret1->_immutable = immutable;
																HX_STACK_LINE(504)
																{
																	HX_STACK_LINE(504)
																	ret1->x = x;
																	HX_STACK_LINE(504)
																	ret1->y = y;
																	HX_STACK_LINE(504)
																	{
																	}
																	HX_STACK_LINE(504)
																	{
																	}
																}
																HX_STACK_LINE(504)
																return ret1;
															}
															return null();
														}
													};
													HX_STACK_LINE(504)
													ret->zpp_inner = _Function_6_1::Block(x,y);
													HX_STACK_LINE(504)
													ret->zpp_inner->outer = ret;
												}
												else{
													HX_STACK_LINE(504)
													if (((bool((ret != null())) && bool(ret->zpp_disp)))){
														HX_STACK_LINE(504)
														hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
													}
													HX_STACK_LINE(504)
													{
														HX_STACK_LINE(504)
														::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(504)
														if ((_this->_immutable)){
															HX_STACK_LINE(504)
															hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
														}
														HX_STACK_LINE(504)
														if (((_this->_isimmutable_dyn() != null()))){
															HX_STACK_LINE(504)
															_this->_isimmutable();
														}
													}
													HX_STACK_LINE(504)
													if (((bool((x != x)) || bool((y != y))))){
														HX_STACK_LINE(504)
														hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
													}
													struct _Function_6_1{
														inline static Float Block( ::nape::geom::Vec2 &ret){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",504);
															{
																HX_STACK_LINE(504)
																if (((bool((ret != null())) && bool(ret->zpp_disp)))){
																	HX_STACK_LINE(504)
																	hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
																}
																HX_STACK_LINE(504)
																{
																	HX_STACK_LINE(504)
																	::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(504)
																	if (((_this->_validate_dyn() != null()))){
																		HX_STACK_LINE(504)
																		_this->_validate();
																	}
																}
																HX_STACK_LINE(504)
																return ret->zpp_inner->x;
															}
															return null();
														}
													};
													struct _Function_6_2{
														inline static Float Block( ::nape::geom::Vec2 &ret){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",504);
															{
																HX_STACK_LINE(504)
																if (((bool((ret != null())) && bool(ret->zpp_disp)))){
																	HX_STACK_LINE(504)
																	hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
																}
																HX_STACK_LINE(504)
																{
																	HX_STACK_LINE(504)
																	::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(504)
																	if (((_this->_validate_dyn() != null()))){
																		HX_STACK_LINE(504)
																		_this->_validate();
																	}
																}
																HX_STACK_LINE(504)
																return ret->zpp_inner->y;
															}
															return null();
														}
													};
													HX_STACK_LINE(504)
													if ((!(((bool((_Function_6_1::Block(ret) == x)) && bool((_Function_6_2::Block(ret) == y))))))){
														HX_STACK_LINE(504)
														{
															HX_STACK_LINE(504)
															ret->zpp_inner->x = x;
															HX_STACK_LINE(504)
															ret->zpp_inner->y = y;
															HX_STACK_LINE(504)
															{
															}
															HX_STACK_LINE(504)
															{
															}
														}
														HX_STACK_LINE(504)
														{
															HX_STACK_LINE(504)
															::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(504)
															if (((_this->_invalidate_dyn() != null()))){
																HX_STACK_LINE(504)
																_this->_invalidate(_this);
															}
														}
													}
													HX_STACK_LINE(504)
													ret;
												}
												HX_STACK_LINE(504)
												ret->zpp_inner->weak = weak;
												HX_STACK_LINE(504)
												return ret;
											}
											return null();
										}
									};
									HX_STACK_LINE(504)
									body3->zpp_inner->wrap_localCOM = _Function_4_1::Block(body3);
									HX_STACK_LINE(504)
									body3->zpp_inner->wrap_localCOM->zpp_inner->_inuse = true;
									HX_STACK_LINE(504)
									body3->zpp_inner->wrap_localCOM->zpp_inner->_immutable = true;
									HX_STACK_LINE(504)
									body3->zpp_inner->wrap_localCOM->zpp_inner->_validate = body3->zpp_inner->getlocalCOM_dyn();
								}
								HX_STACK_LINE(504)
								return body3->zpp_inner->wrap_localCOM;
							}
							return null();
						}
					};
					HX_STACK_LINE(504)
					::nape::geom::Vec2 _this = _Function_2_1::Block(body3);		HX_STACK_VAR(_this,"_this");
					bool weak = false;		HX_STACK_VAR(weak,"weak");
					HX_STACK_LINE(504)
					if (((bool((_this != null())) && bool(_this->zpp_disp)))){
						HX_STACK_LINE(504)
						hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
					}
					struct _Function_2_2{
						inline static ::nape::geom::Vec2 Block( ::nape::geom::Vec2 &_this,bool &weak){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",504);
							{
								struct _Function_3_1{
									inline static Float Block( ::nape::geom::Vec2 &_this){
										HX_STACK_PUSH("*::closure","PhysicsData.hx",504);
										{
											HX_STACK_LINE(504)
											if ((_this->zpp_disp)){
												HX_STACK_LINE(504)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(504)
											{
												HX_STACK_LINE(504)
												::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
												HX_STACK_LINE(504)
												if (((_this1->_validate_dyn() != null()))){
													HX_STACK_LINE(504)
													_this1->_validate();
												}
											}
											HX_STACK_LINE(504)
											return _this->zpp_inner->x;
										}
										return null();
									}
								};
								struct _Function_3_2{
									inline static Float Block( ::nape::geom::Vec2 &_this){
										HX_STACK_PUSH("*::closure","PhysicsData.hx",504);
										{
											HX_STACK_LINE(504)
											if ((_this->zpp_disp)){
												HX_STACK_LINE(504)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(504)
											{
												HX_STACK_LINE(504)
												::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
												HX_STACK_LINE(504)
												if (((_this1->_validate_dyn() != null()))){
													HX_STACK_LINE(504)
													_this1->_validate();
												}
											}
											HX_STACK_LINE(504)
											return _this->zpp_inner->y;
										}
										return null();
									}
								};
								HX_STACK_LINE(504)
								Float x = _Function_3_1::Block(_this);		HX_STACK_VAR(x,"x");
								Float y = _Function_3_2::Block(_this);		HX_STACK_VAR(y,"y");
								HX_STACK_LINE(504)
								if (((bool((x != x)) || bool((y != y))))){
									HX_STACK_LINE(504)
									hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
								}
								HX_STACK_LINE(504)
								::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(504)
								if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
									HX_STACK_LINE(504)
									ret = ::nape::geom::Vec2_obj::__new(null(),null());
								}
								else{
									HX_STACK_LINE(504)
									ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
									HX_STACK_LINE(504)
									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
									HX_STACK_LINE(504)
									ret->zpp_pool = null();
									HX_STACK_LINE(504)
									ret->zpp_disp = false;
									HX_STACK_LINE(504)
									if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
										HX_STACK_LINE(504)
										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
									}
								}
								HX_STACK_LINE(504)
								if (((ret->zpp_inner == null()))){
									struct _Function_4_1{
										inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",504);
											{
												HX_STACK_LINE(504)
												bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
												HX_STACK_LINE(504)
												::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(504)
												{
													HX_STACK_LINE(504)
													if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
														HX_STACK_LINE(504)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
													}
													else{
														HX_STACK_LINE(504)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
														HX_STACK_LINE(504)
														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(504)
														ret1->next = null();
													}
													HX_STACK_LINE(504)
													ret1->weak = false;
												}
												HX_STACK_LINE(504)
												ret1->_immutable = immutable;
												HX_STACK_LINE(504)
												{
													HX_STACK_LINE(504)
													ret1->x = x;
													HX_STACK_LINE(504)
													ret1->y = y;
													HX_STACK_LINE(504)
													{
													}
													HX_STACK_LINE(504)
													{
													}
												}
												HX_STACK_LINE(504)
												return ret1;
											}
											return null();
										}
									};
									HX_STACK_LINE(504)
									ret->zpp_inner = _Function_4_1::Block(x,y);
									HX_STACK_LINE(504)
									ret->zpp_inner->outer = ret;
								}
								else{
									HX_STACK_LINE(504)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(504)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(504)
									{
										HX_STACK_LINE(504)
										::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
										HX_STACK_LINE(504)
										if ((_this1->_immutable)){
											HX_STACK_LINE(504)
											hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
										}
										HX_STACK_LINE(504)
										if (((_this1->_isimmutable_dyn() != null()))){
											HX_STACK_LINE(504)
											_this1->_isimmutable();
										}
									}
									HX_STACK_LINE(504)
									if (((bool((x != x)) || bool((y != y))))){
										HX_STACK_LINE(504)
										hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
									}
									struct _Function_4_1{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",504);
											{
												HX_STACK_LINE(504)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(504)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(504)
												{
													HX_STACK_LINE(504)
													::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(504)
													if (((_this1->_validate_dyn() != null()))){
														HX_STACK_LINE(504)
														_this1->_validate();
													}
												}
												HX_STACK_LINE(504)
												return ret->zpp_inner->x;
											}
											return null();
										}
									};
									struct _Function_4_2{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",504);
											{
												HX_STACK_LINE(504)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(504)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(504)
												{
													HX_STACK_LINE(504)
													::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(504)
													if (((_this1->_validate_dyn() != null()))){
														HX_STACK_LINE(504)
														_this1->_validate();
													}
												}
												HX_STACK_LINE(504)
												return ret->zpp_inner->y;
											}
											return null();
										}
									};
									HX_STACK_LINE(504)
									if ((!(((bool((_Function_4_1::Block(ret) == x)) && bool((_Function_4_2::Block(ret) == y))))))){
										HX_STACK_LINE(504)
										{
											HX_STACK_LINE(504)
											ret->zpp_inner->x = x;
											HX_STACK_LINE(504)
											ret->zpp_inner->y = y;
											HX_STACK_LINE(504)
											{
											}
											HX_STACK_LINE(504)
											{
											}
										}
										HX_STACK_LINE(504)
										{
											HX_STACK_LINE(504)
											::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
											HX_STACK_LINE(504)
											if (((_this1->_invalidate_dyn() != null()))){
												HX_STACK_LINE(504)
												_this1->_invalidate(_this1);
											}
										}
									}
									HX_STACK_LINE(504)
									ret;
								}
								HX_STACK_LINE(504)
								ret->zpp_inner->weak = weak;
								HX_STACK_LINE(504)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(504)
					return _Function_2_2::Block(_this,weak);
				}
				return null();
			}
		};
		HX_STACK_LINE(504)
		::nape::geom::Vec2 anchor3 = _Function_1_114::Block(body3);		HX_STACK_VAR(anchor3,"anchor3");
		struct _Function_1_115{
			inline static ::nape::geom::Vec2 Block( ::nape::geom::Vec2 &anchor3){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",505);
				{
					struct _Function_2_1{
						inline static Float Block( ::nape::geom::Vec2 &anchor3){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",505);
							{
								HX_STACK_LINE(505)
								if (((bool((anchor3 != null())) && bool(anchor3->zpp_disp)))){
									HX_STACK_LINE(505)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(505)
								{
									HX_STACK_LINE(505)
									::zpp_nape::geom::ZPP_Vec2 _this = anchor3->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(505)
									if (((_this->_validate_dyn() != null()))){
										HX_STACK_LINE(505)
										_this->_validate();
									}
								}
								HX_STACK_LINE(505)
								return anchor3->zpp_inner->x;
							}
							return null();
						}
					};
					struct _Function_2_2{
						inline static Float Block( ::nape::geom::Vec2 &anchor3){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",505);
							{
								HX_STACK_LINE(505)
								if (((bool((anchor3 != null())) && bool(anchor3->zpp_disp)))){
									HX_STACK_LINE(505)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(505)
								{
									HX_STACK_LINE(505)
									::zpp_nape::geom::ZPP_Vec2 _this = anchor3->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(505)
									if (((_this->_validate_dyn() != null()))){
										HX_STACK_LINE(505)
										_this->_validate();
									}
								}
								HX_STACK_LINE(505)
								return anchor3->zpp_inner->y;
							}
							return null();
						}
					};
					HX_STACK_LINE(505)
					Float x = -(_Function_2_1::Block(anchor3));		HX_STACK_VAR(x,"x");
					Float y = -(_Function_2_2::Block(anchor3));		HX_STACK_VAR(y,"y");
					struct _Function_2_3{
						inline static ::nape::geom::Vec2 Block( Float &x,Float &y){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",505);
							{
								HX_STACK_LINE(505)
								if (((bool((x != x)) || bool((y != y))))){
									HX_STACK_LINE(505)
									hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
								}
								HX_STACK_LINE(505)
								::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(505)
								if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
									HX_STACK_LINE(505)
									ret = ::nape::geom::Vec2_obj::__new(null(),null());
								}
								else{
									HX_STACK_LINE(505)
									ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
									HX_STACK_LINE(505)
									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
									HX_STACK_LINE(505)
									ret->zpp_pool = null();
									HX_STACK_LINE(505)
									ret->zpp_disp = false;
									HX_STACK_LINE(505)
									if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
										HX_STACK_LINE(505)
										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
									}
								}
								HX_STACK_LINE(505)
								if (((ret->zpp_inner == null()))){
									struct _Function_4_1{
										inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",505);
											{
												HX_STACK_LINE(505)
												bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
												HX_STACK_LINE(505)
												::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(505)
												{
													HX_STACK_LINE(505)
													if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
														HX_STACK_LINE(505)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
													}
													else{
														HX_STACK_LINE(505)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
														HX_STACK_LINE(505)
														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(505)
														ret1->next = null();
													}
													HX_STACK_LINE(505)
													ret1->weak = false;
												}
												HX_STACK_LINE(505)
												ret1->_immutable = immutable;
												HX_STACK_LINE(505)
												{
													HX_STACK_LINE(505)
													ret1->x = x;
													HX_STACK_LINE(505)
													ret1->y = y;
													HX_STACK_LINE(505)
													{
													}
													HX_STACK_LINE(505)
													{
													}
												}
												HX_STACK_LINE(505)
												return ret1;
											}
											return null();
										}
									};
									HX_STACK_LINE(505)
									ret->zpp_inner = _Function_4_1::Block(x,y);
									HX_STACK_LINE(505)
									ret->zpp_inner->outer = ret;
								}
								else{
									HX_STACK_LINE(505)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(505)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(505)
									{
										HX_STACK_LINE(505)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(505)
										if ((_this->_immutable)){
											HX_STACK_LINE(505)
											hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
										}
										HX_STACK_LINE(505)
										if (((_this->_isimmutable_dyn() != null()))){
											HX_STACK_LINE(505)
											_this->_isimmutable();
										}
									}
									HX_STACK_LINE(505)
									if (((bool((x != x)) || bool((y != y))))){
										HX_STACK_LINE(505)
										hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
									}
									struct _Function_4_1{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",505);
											{
												HX_STACK_LINE(505)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(505)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(505)
												{
													HX_STACK_LINE(505)
													::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(505)
													if (((_this->_validate_dyn() != null()))){
														HX_STACK_LINE(505)
														_this->_validate();
													}
												}
												HX_STACK_LINE(505)
												return ret->zpp_inner->x;
											}
											return null();
										}
									};
									struct _Function_4_2{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",505);
											{
												HX_STACK_LINE(505)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(505)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(505)
												{
													HX_STACK_LINE(505)
													::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(505)
													if (((_this->_validate_dyn() != null()))){
														HX_STACK_LINE(505)
														_this->_validate();
													}
												}
												HX_STACK_LINE(505)
												return ret->zpp_inner->y;
											}
											return null();
										}
									};
									HX_STACK_LINE(505)
									if ((!(((bool((_Function_4_1::Block(ret) == x)) && bool((_Function_4_2::Block(ret) == y))))))){
										HX_STACK_LINE(505)
										{
											HX_STACK_LINE(505)
											ret->zpp_inner->x = x;
											HX_STACK_LINE(505)
											ret->zpp_inner->y = y;
											HX_STACK_LINE(505)
											{
											}
											HX_STACK_LINE(505)
											{
											}
										}
										HX_STACK_LINE(505)
										{
											HX_STACK_LINE(505)
											::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(505)
											if (((_this->_invalidate_dyn() != null()))){
												HX_STACK_LINE(505)
												_this->_invalidate(_this);
											}
										}
									}
									HX_STACK_LINE(505)
									ret;
								}
								HX_STACK_LINE(505)
								ret->zpp_inner->weak = true;
								HX_STACK_LINE(505)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(505)
					return _Function_2_3::Block(x,y);
				}
				return null();
			}
		};
		HX_STACK_LINE(505)
		body3->translateShapes(_Function_1_115::Block(anchor3));
		HX_STACK_LINE(506)
		{
			struct _Function_2_1{
				inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body3){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",506);
					{
						HX_STACK_LINE(506)
						if (((body3->zpp_inner->wrap_pos == null()))){
							HX_STACK_LINE(506)
							body3->zpp_inner->setupPosition();
						}
						HX_STACK_LINE(506)
						return body3->zpp_inner->wrap_pos;
					}
					return null();
				}
			};
			HX_STACK_LINE(506)
			::nape::geom::Vec2 _this = _Function_2_1::Block(body3);		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(506)
			if (((bool((_this != null())) && bool(_this->zpp_disp)))){
				HX_STACK_LINE(506)
				hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
			}
			HX_STACK_LINE(506)
			{
				HX_STACK_LINE(506)
				::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
				HX_STACK_LINE(506)
				if ((_this1->_immutable)){
					HX_STACK_LINE(506)
					hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
				}
				HX_STACK_LINE(506)
				if (((_this1->_isimmutable_dyn() != null()))){
					HX_STACK_LINE(506)
					_this1->_isimmutable();
				}
			}
			HX_STACK_LINE(506)
			{
			}
			struct _Function_2_2{
				inline static Float Block( ::nape::geom::Vec2 &_this){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",506);
					{
						HX_STACK_LINE(506)
						if (((bool((_this != null())) && bool(_this->zpp_disp)))){
							HX_STACK_LINE(506)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(506)
						{
							HX_STACK_LINE(506)
							::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(506)
							if (((_this1->_validate_dyn() != null()))){
								HX_STACK_LINE(506)
								_this1->_validate();
							}
						}
						HX_STACK_LINE(506)
						return _this->zpp_inner->x;
					}
					return null();
				}
			};
			struct _Function_2_3{
				inline static Float Block( ::nape::geom::Vec2 &_this){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",506);
					{
						HX_STACK_LINE(506)
						if (((bool((_this != null())) && bool(_this->zpp_disp)))){
							HX_STACK_LINE(506)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(506)
						{
							HX_STACK_LINE(506)
							::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(506)
							if (((_this1->_validate_dyn() != null()))){
								HX_STACK_LINE(506)
								_this1->_validate();
							}
						}
						HX_STACK_LINE(506)
						return _this->zpp_inner->y;
					}
					return null();
				}
			};
			HX_STACK_LINE(506)
			if ((!(((bool((_Function_2_2::Block(_this) == (int)0)) && bool((_Function_2_3::Block(_this) == (int)0))))))){
				HX_STACK_LINE(506)
				{
					HX_STACK_LINE(506)
					_this->zpp_inner->x = (int)0;
					HX_STACK_LINE(506)
					_this->zpp_inner->y = (int)0;
					HX_STACK_LINE(506)
					{
					}
					HX_STACK_LINE(506)
					{
					}
				}
				HX_STACK_LINE(506)
				{
					HX_STACK_LINE(506)
					::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
					HX_STACK_LINE(506)
					if (((_this1->_invalidate_dyn() != null()))){
						HX_STACK_LINE(506)
						_this1->_invalidate(_this1);
					}
				}
			}
			HX_STACK_LINE(506)
			_this;
		}
		struct _Function_1_116{
			inline static Dynamic Block( ::nape::phys::Body &body3,::nape::geom::Vec2 &anchor3){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",508);
				{
					hx::Anon __result = hx::Anon_obj::Create();
					__result->Add(HX_CSTRING("body") , body3,false);
					__result->Add(HX_CSTRING("anchor") , anchor3,false);
					return __result;
				}
				return null();
			}
		};
		HX_STACK_LINE(508)
		::PhysicsData_obj::bodies->set(HX_CSTRING("bier"),_Function_1_116::Block(body3,anchor3));
		HX_STACK_LINE(510)
		::nape::phys::Body body4 = ::nape::phys::Body_obj::__new(null(),null());		HX_STACK_VAR(body4,"body4");
		HX_STACK_LINE(511)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::phys::Body &body4){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",511);
					{
						HX_STACK_LINE(511)
						if (((body4->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(511)
							body4->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(511)
						return body4->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(511)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(body4);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(511)
			{
				HX_STACK_LINE(511)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(511)
				while(((_g < _g1->length))){
					HX_STACK_LINE(511)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(511)
					++(_g);
					HX_STACK_LINE(511)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(511)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(511)
						continue;
					}
					HX_STACK_LINE(511)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(511)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(511)
					{
						HX_STACK_LINE(511)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(511)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(511)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(511)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		HX_STACK_LINE(514)
		::nape::phys::Material mat6 = ::nape::phys::Material_obj::__new(null(),null(),null(),null(),null());		HX_STACK_VAR(mat6,"mat6");
		HX_STACK_LINE(515)
		::nape::dynamics::InteractionFilter filt6 = ::nape::dynamics::InteractionFilter_obj::__new(null(),null(),null(),null(),null(),null());		HX_STACK_VAR(filt6,"filt6");
		HX_STACK_LINE(516)
		::nape::phys::FluidProperties prop6 = ::nape::phys::FluidProperties_obj::__new(null(),null());		HX_STACK_VAR(prop6,"prop6");
		struct _Function_1_117{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
				{
					HX_STACK_LINE(521)
					{
					}
					HX_STACK_LINE(521)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(521)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(521)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(521)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(521)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(521)
						ret->zpp_pool = null();
						HX_STACK_LINE(521)
						ret->zpp_disp = false;
						HX_STACK_LINE(521)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(521)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(521)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
								{
									HX_STACK_LINE(521)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(521)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(521)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(521)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(521)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(521)
											ret1->next = null();
										}
										HX_STACK_LINE(521)
										ret1->weak = false;
									}
									HX_STACK_LINE(521)
									ret1->_immutable = immutable;
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										ret1->x = 96.5;
										HX_STACK_LINE(521)
										ret1->y = (int)10;
										HX_STACK_LINE(521)
										{
										}
										HX_STACK_LINE(521)
										{
										}
									}
									HX_STACK_LINE(521)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(521)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(521)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(521)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(521)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(521)
						{
							HX_STACK_LINE(521)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(521)
							if ((_this->_immutable)){
								HX_STACK_LINE(521)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(521)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(521)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(521)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
								{
									HX_STACK_LINE(521)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(521)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(521)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(521)
											_this->_validate();
										}
									}
									HX_STACK_LINE(521)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
								{
									HX_STACK_LINE(521)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(521)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(521)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(521)
											_this->_validate();
										}
									}
									HX_STACK_LINE(521)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(521)
						if ((!(((bool((_Function_3_1::Block(ret) == 96.5)) && bool((_Function_3_2::Block(ret) == (int)10))))))){
							HX_STACK_LINE(521)
							{
								HX_STACK_LINE(521)
								ret->zpp_inner->x = 96.5;
								HX_STACK_LINE(521)
								ret->zpp_inner->y = (int)10;
								HX_STACK_LINE(521)
								{
								}
								HX_STACK_LINE(521)
								{
								}
							}
							HX_STACK_LINE(521)
							{
								HX_STACK_LINE(521)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(521)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(521)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(521)
						ret;
					}
					HX_STACK_LINE(521)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(521)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_118{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
				{
					HX_STACK_LINE(521)
					{
					}
					HX_STACK_LINE(521)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(521)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(521)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(521)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(521)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(521)
						ret->zpp_pool = null();
						HX_STACK_LINE(521)
						ret->zpp_disp = false;
						HX_STACK_LINE(521)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(521)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(521)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
								{
									HX_STACK_LINE(521)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(521)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(521)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(521)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(521)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(521)
											ret1->next = null();
										}
										HX_STACK_LINE(521)
										ret1->weak = false;
									}
									HX_STACK_LINE(521)
									ret1->_immutable = immutable;
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										ret1->x = (int)68;
										HX_STACK_LINE(521)
										ret1->y = 1.5;
										HX_STACK_LINE(521)
										{
										}
										HX_STACK_LINE(521)
										{
										}
									}
									HX_STACK_LINE(521)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(521)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(521)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(521)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(521)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(521)
						{
							HX_STACK_LINE(521)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(521)
							if ((_this->_immutable)){
								HX_STACK_LINE(521)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(521)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(521)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(521)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
								{
									HX_STACK_LINE(521)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(521)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(521)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(521)
											_this->_validate();
										}
									}
									HX_STACK_LINE(521)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
								{
									HX_STACK_LINE(521)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(521)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(521)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(521)
											_this->_validate();
										}
									}
									HX_STACK_LINE(521)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(521)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)68)) && bool((_Function_3_2::Block(ret) == 1.5))))))){
							HX_STACK_LINE(521)
							{
								HX_STACK_LINE(521)
								ret->zpp_inner->x = (int)68;
								HX_STACK_LINE(521)
								ret->zpp_inner->y = 1.5;
								HX_STACK_LINE(521)
								{
								}
								HX_STACK_LINE(521)
								{
								}
							}
							HX_STACK_LINE(521)
							{
								HX_STACK_LINE(521)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(521)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(521)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(521)
						ret;
					}
					HX_STACK_LINE(521)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(521)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_119{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
				{
					HX_STACK_LINE(521)
					{
					}
					HX_STACK_LINE(521)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(521)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(521)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(521)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(521)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(521)
						ret->zpp_pool = null();
						HX_STACK_LINE(521)
						ret->zpp_disp = false;
						HX_STACK_LINE(521)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(521)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(521)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
								{
									HX_STACK_LINE(521)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(521)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(521)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(521)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(521)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(521)
											ret1->next = null();
										}
										HX_STACK_LINE(521)
										ret1->weak = false;
									}
									HX_STACK_LINE(521)
									ret1->_immutable = immutable;
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										ret1->x = (int)67;
										HX_STACK_LINE(521)
										ret1->y = 1.5;
										HX_STACK_LINE(521)
										{
										}
										HX_STACK_LINE(521)
										{
										}
									}
									HX_STACK_LINE(521)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(521)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(521)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(521)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(521)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(521)
						{
							HX_STACK_LINE(521)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(521)
							if ((_this->_immutable)){
								HX_STACK_LINE(521)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(521)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(521)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(521)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
								{
									HX_STACK_LINE(521)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(521)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(521)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(521)
											_this->_validate();
										}
									}
									HX_STACK_LINE(521)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
								{
									HX_STACK_LINE(521)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(521)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(521)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(521)
											_this->_validate();
										}
									}
									HX_STACK_LINE(521)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(521)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)67)) && bool((_Function_3_2::Block(ret) == 1.5))))))){
							HX_STACK_LINE(521)
							{
								HX_STACK_LINE(521)
								ret->zpp_inner->x = (int)67;
								HX_STACK_LINE(521)
								ret->zpp_inner->y = 1.5;
								HX_STACK_LINE(521)
								{
								}
								HX_STACK_LINE(521)
								{
								}
							}
							HX_STACK_LINE(521)
							{
								HX_STACK_LINE(521)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(521)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(521)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(521)
						ret;
					}
					HX_STACK_LINE(521)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(521)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_120{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
				{
					HX_STACK_LINE(521)
					{
					}
					HX_STACK_LINE(521)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(521)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(521)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(521)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(521)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(521)
						ret->zpp_pool = null();
						HX_STACK_LINE(521)
						ret->zpp_disp = false;
						HX_STACK_LINE(521)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(521)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(521)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
								{
									HX_STACK_LINE(521)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(521)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(521)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(521)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(521)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(521)
											ret1->next = null();
										}
										HX_STACK_LINE(521)
										ret1->weak = false;
									}
									HX_STACK_LINE(521)
									ret1->_immutable = immutable;
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										ret1->x = (int)40;
										HX_STACK_LINE(521)
										ret1->y = 44.5;
										HX_STACK_LINE(521)
										{
										}
										HX_STACK_LINE(521)
										{
										}
									}
									HX_STACK_LINE(521)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(521)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(521)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(521)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(521)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(521)
						{
							HX_STACK_LINE(521)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(521)
							if ((_this->_immutable)){
								HX_STACK_LINE(521)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(521)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(521)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(521)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
								{
									HX_STACK_LINE(521)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(521)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(521)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(521)
											_this->_validate();
										}
									}
									HX_STACK_LINE(521)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
								{
									HX_STACK_LINE(521)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(521)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(521)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(521)
											_this->_validate();
										}
									}
									HX_STACK_LINE(521)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(521)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)40)) && bool((_Function_3_2::Block(ret) == 44.5))))))){
							HX_STACK_LINE(521)
							{
								HX_STACK_LINE(521)
								ret->zpp_inner->x = (int)40;
								HX_STACK_LINE(521)
								ret->zpp_inner->y = 44.5;
								HX_STACK_LINE(521)
								{
								}
								HX_STACK_LINE(521)
								{
								}
							}
							HX_STACK_LINE(521)
							{
								HX_STACK_LINE(521)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(521)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(521)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(521)
						ret;
					}
					HX_STACK_LINE(521)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(521)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_121{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
				{
					HX_STACK_LINE(521)
					{
					}
					HX_STACK_LINE(521)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(521)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(521)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(521)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(521)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(521)
						ret->zpp_pool = null();
						HX_STACK_LINE(521)
						ret->zpp_disp = false;
						HX_STACK_LINE(521)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(521)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(521)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
								{
									HX_STACK_LINE(521)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(521)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(521)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(521)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(521)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(521)
											ret1->next = null();
										}
										HX_STACK_LINE(521)
										ret1->weak = false;
									}
									HX_STACK_LINE(521)
									ret1->_immutable = immutable;
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										ret1->x = (int)59;
										HX_STACK_LINE(521)
										ret1->y = 48.5;
										HX_STACK_LINE(521)
										{
										}
										HX_STACK_LINE(521)
										{
										}
									}
									HX_STACK_LINE(521)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(521)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(521)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(521)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(521)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(521)
						{
							HX_STACK_LINE(521)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(521)
							if ((_this->_immutable)){
								HX_STACK_LINE(521)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(521)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(521)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(521)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
								{
									HX_STACK_LINE(521)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(521)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(521)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(521)
											_this->_validate();
										}
									}
									HX_STACK_LINE(521)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
								{
									HX_STACK_LINE(521)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(521)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(521)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(521)
											_this->_validate();
										}
									}
									HX_STACK_LINE(521)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(521)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)59)) && bool((_Function_3_2::Block(ret) == 48.5))))))){
							HX_STACK_LINE(521)
							{
								HX_STACK_LINE(521)
								ret->zpp_inner->x = (int)59;
								HX_STACK_LINE(521)
								ret->zpp_inner->y = 48.5;
								HX_STACK_LINE(521)
								{
								}
								HX_STACK_LINE(521)
								{
								}
							}
							HX_STACK_LINE(521)
							{
								HX_STACK_LINE(521)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(521)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(521)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(521)
						ret;
					}
					HX_STACK_LINE(521)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(521)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_122{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
				{
					HX_STACK_LINE(521)
					{
					}
					HX_STACK_LINE(521)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(521)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(521)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(521)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(521)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(521)
						ret->zpp_pool = null();
						HX_STACK_LINE(521)
						ret->zpp_disp = false;
						HX_STACK_LINE(521)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(521)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(521)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
								{
									HX_STACK_LINE(521)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(521)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(521)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(521)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(521)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(521)
											ret1->next = null();
										}
										HX_STACK_LINE(521)
										ret1->weak = false;
									}
									HX_STACK_LINE(521)
									ret1->_immutable = immutable;
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										ret1->x = (int)78;
										HX_STACK_LINE(521)
										ret1->y = 41.5;
										HX_STACK_LINE(521)
										{
										}
										HX_STACK_LINE(521)
										{
										}
									}
									HX_STACK_LINE(521)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(521)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(521)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(521)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(521)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(521)
						{
							HX_STACK_LINE(521)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(521)
							if ((_this->_immutable)){
								HX_STACK_LINE(521)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(521)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(521)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(521)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
								{
									HX_STACK_LINE(521)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(521)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(521)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(521)
											_this->_validate();
										}
									}
									HX_STACK_LINE(521)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",521);
								{
									HX_STACK_LINE(521)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(521)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(521)
									{
										HX_STACK_LINE(521)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(521)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(521)
											_this->_validate();
										}
									}
									HX_STACK_LINE(521)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(521)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)78)) && bool((_Function_3_2::Block(ret) == 41.5))))))){
							HX_STACK_LINE(521)
							{
								HX_STACK_LINE(521)
								ret->zpp_inner->x = (int)78;
								HX_STACK_LINE(521)
								ret->zpp_inner->y = 41.5;
								HX_STACK_LINE(521)
								{
								}
								HX_STACK_LINE(521)
								{
								}
							}
							HX_STACK_LINE(521)
							{
								HX_STACK_LINE(521)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(521)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(521)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(521)
						ret;
					}
					HX_STACK_LINE(521)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(521)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(520)
		::nape::shape::Polygon s20 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_117::Block()).Add(_Function_1_118::Block()).Add(_Function_1_119::Block()).Add(_Function_1_120::Block()).Add(_Function_1_121::Block()).Add(_Function_1_122::Block())),mat6,filt6);		HX_STACK_VAR(s20,"s20");
		HX_STACK_LINE(525)
		{
			HX_STACK_LINE(525)
			{
				HX_STACK_LINE(525)
				s20->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(525)
				if (((((  (((s20->zpp_inner->body != null()))) ? ::nape::phys::Body(s20->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body4))){
					HX_STACK_LINE(525)
					if (((s20->zpp_inner->body != null()))){
						HX_STACK_LINE(525)
						((  (((s20->zpp_inner->body != null()))) ? ::nape::phys::Body(s20->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s20);
					}
					HX_STACK_LINE(525)
					if (((body4 != null()))){
						HX_STACK_LINE(525)
						::nape::shape::ShapeList _this = body4->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(525)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(525)
							_this->push(s20);
						}
						else{
							HX_STACK_LINE(525)
							_this->unshift(s20);
						}
					}
				}
			}
			HX_STACK_LINE(525)
			if (((s20->zpp_inner->body != null()))){
				HX_STACK_LINE(525)
				s20->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(525)
				Dynamic();
			}
		}
		HX_STACK_LINE(526)
		{
			HX_STACK_LINE(526)
			{
				HX_STACK_LINE(526)
				s20->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(526)
				s20->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(526)
				s20->zpp_inner->wake();
			}
			HX_STACK_LINE(526)
			s20->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(527)
		{
			HX_STACK_LINE(527)
			{
				HX_STACK_LINE(527)
				s20->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(527)
				s20->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(527)
				{
				}
				HX_STACK_LINE(527)
				s20->zpp_inner->wake();
			}
			HX_STACK_LINE(527)
			s20->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(528)
		{
			HX_STACK_LINE(528)
			{
				HX_STACK_LINE(528)
				if (((prop6 == null()))){
					HX_STACK_LINE(528)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(528)
				s20->zpp_inner->setFluid(prop6->zpp_inner);
			}
			HX_STACK_LINE(528)
			{
				HX_STACK_LINE(528)
				s20->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(528)
				if (((s20->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(528)
					s20->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(528)
				s20->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(529)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s20){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",529);
					{
						HX_STACK_LINE(529)
						if (((s20->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(529)
							s20->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(529)
						return s20->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(529)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s20);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(529)
			{
				HX_STACK_LINE(529)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(529)
				while(((_g < _g1->length))){
					HX_STACK_LINE(529)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(529)
					++(_g);
					HX_STACK_LINE(529)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(529)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(529)
						continue;
					}
					HX_STACK_LINE(529)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(529)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(529)
					{
						HX_STACK_LINE(529)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(529)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(529)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(529)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_123{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",532);
				{
					HX_STACK_LINE(532)
					{
					}
					HX_STACK_LINE(532)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(532)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(532)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(532)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(532)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(532)
						ret->zpp_pool = null();
						HX_STACK_LINE(532)
						ret->zpp_disp = false;
						HX_STACK_LINE(532)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(532)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(532)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",532);
								{
									HX_STACK_LINE(532)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(532)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(532)
									{
										HX_STACK_LINE(532)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(532)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(532)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(532)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(532)
											ret1->next = null();
										}
										HX_STACK_LINE(532)
										ret1->weak = false;
									}
									HX_STACK_LINE(532)
									ret1->_immutable = immutable;
									HX_STACK_LINE(532)
									{
										HX_STACK_LINE(532)
										ret1->x = 42.5;
										HX_STACK_LINE(532)
										ret1->y = (int)16;
										HX_STACK_LINE(532)
										{
										}
										HX_STACK_LINE(532)
										{
										}
									}
									HX_STACK_LINE(532)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(532)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(532)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(532)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(532)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(532)
						{
							HX_STACK_LINE(532)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(532)
							if ((_this->_immutable)){
								HX_STACK_LINE(532)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(532)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(532)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(532)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",532);
								{
									HX_STACK_LINE(532)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(532)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(532)
									{
										HX_STACK_LINE(532)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(532)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(532)
											_this->_validate();
										}
									}
									HX_STACK_LINE(532)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",532);
								{
									HX_STACK_LINE(532)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(532)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(532)
									{
										HX_STACK_LINE(532)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(532)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(532)
											_this->_validate();
										}
									}
									HX_STACK_LINE(532)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(532)
						if ((!(((bool((_Function_3_1::Block(ret) == 42.5)) && bool((_Function_3_2::Block(ret) == (int)16))))))){
							HX_STACK_LINE(532)
							{
								HX_STACK_LINE(532)
								ret->zpp_inner->x = 42.5;
								HX_STACK_LINE(532)
								ret->zpp_inner->y = (int)16;
								HX_STACK_LINE(532)
								{
								}
								HX_STACK_LINE(532)
								{
								}
							}
							HX_STACK_LINE(532)
							{
								HX_STACK_LINE(532)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(532)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(532)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(532)
						ret;
					}
					HX_STACK_LINE(532)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(532)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_124{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",532);
				{
					HX_STACK_LINE(532)
					{
					}
					HX_STACK_LINE(532)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(532)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(532)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(532)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(532)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(532)
						ret->zpp_pool = null();
						HX_STACK_LINE(532)
						ret->zpp_disp = false;
						HX_STACK_LINE(532)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(532)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(532)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",532);
								{
									HX_STACK_LINE(532)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(532)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(532)
									{
										HX_STACK_LINE(532)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(532)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(532)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(532)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(532)
											ret1->next = null();
										}
										HX_STACK_LINE(532)
										ret1->weak = false;
									}
									HX_STACK_LINE(532)
									ret1->_immutable = immutable;
									HX_STACK_LINE(532)
									{
										HX_STACK_LINE(532)
										ret1->x = (int)34;
										HX_STACK_LINE(532)
										ret1->y = 45.5;
										HX_STACK_LINE(532)
										{
										}
										HX_STACK_LINE(532)
										{
										}
									}
									HX_STACK_LINE(532)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(532)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(532)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(532)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(532)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(532)
						{
							HX_STACK_LINE(532)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(532)
							if ((_this->_immutable)){
								HX_STACK_LINE(532)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(532)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(532)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(532)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",532);
								{
									HX_STACK_LINE(532)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(532)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(532)
									{
										HX_STACK_LINE(532)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(532)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(532)
											_this->_validate();
										}
									}
									HX_STACK_LINE(532)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",532);
								{
									HX_STACK_LINE(532)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(532)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(532)
									{
										HX_STACK_LINE(532)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(532)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(532)
											_this->_validate();
										}
									}
									HX_STACK_LINE(532)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(532)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)34)) && bool((_Function_3_2::Block(ret) == 45.5))))))){
							HX_STACK_LINE(532)
							{
								HX_STACK_LINE(532)
								ret->zpp_inner->x = (int)34;
								HX_STACK_LINE(532)
								ret->zpp_inner->y = 45.5;
								HX_STACK_LINE(532)
								{
								}
								HX_STACK_LINE(532)
								{
								}
							}
							HX_STACK_LINE(532)
							{
								HX_STACK_LINE(532)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(532)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(532)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(532)
						ret;
					}
					HX_STACK_LINE(532)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(532)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_125{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",532);
				{
					HX_STACK_LINE(532)
					{
					}
					HX_STACK_LINE(532)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(532)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(532)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(532)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(532)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(532)
						ret->zpp_pool = null();
						HX_STACK_LINE(532)
						ret->zpp_disp = false;
						HX_STACK_LINE(532)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(532)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(532)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",532);
								{
									HX_STACK_LINE(532)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(532)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(532)
									{
										HX_STACK_LINE(532)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(532)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(532)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(532)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(532)
											ret1->next = null();
										}
										HX_STACK_LINE(532)
										ret1->weak = false;
									}
									HX_STACK_LINE(532)
									ret1->_immutable = immutable;
									HX_STACK_LINE(532)
									{
										HX_STACK_LINE(532)
										ret1->x = (int)40;
										HX_STACK_LINE(532)
										ret1->y = 44.5;
										HX_STACK_LINE(532)
										{
										}
										HX_STACK_LINE(532)
										{
										}
									}
									HX_STACK_LINE(532)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(532)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(532)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(532)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(532)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(532)
						{
							HX_STACK_LINE(532)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(532)
							if ((_this->_immutable)){
								HX_STACK_LINE(532)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(532)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(532)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(532)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",532);
								{
									HX_STACK_LINE(532)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(532)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(532)
									{
										HX_STACK_LINE(532)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(532)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(532)
											_this->_validate();
										}
									}
									HX_STACK_LINE(532)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",532);
								{
									HX_STACK_LINE(532)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(532)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(532)
									{
										HX_STACK_LINE(532)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(532)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(532)
											_this->_validate();
										}
									}
									HX_STACK_LINE(532)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(532)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)40)) && bool((_Function_3_2::Block(ret) == 44.5))))))){
							HX_STACK_LINE(532)
							{
								HX_STACK_LINE(532)
								ret->zpp_inner->x = (int)40;
								HX_STACK_LINE(532)
								ret->zpp_inner->y = 44.5;
								HX_STACK_LINE(532)
								{
								}
								HX_STACK_LINE(532)
								{
								}
							}
							HX_STACK_LINE(532)
							{
								HX_STACK_LINE(532)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(532)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(532)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(532)
						ret;
					}
					HX_STACK_LINE(532)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(532)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_126{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",532);
				{
					HX_STACK_LINE(532)
					{
					}
					HX_STACK_LINE(532)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(532)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(532)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(532)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(532)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(532)
						ret->zpp_pool = null();
						HX_STACK_LINE(532)
						ret->zpp_disp = false;
						HX_STACK_LINE(532)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(532)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(532)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",532);
								{
									HX_STACK_LINE(532)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(532)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(532)
									{
										HX_STACK_LINE(532)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(532)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(532)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(532)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(532)
											ret1->next = null();
										}
										HX_STACK_LINE(532)
										ret1->weak = false;
									}
									HX_STACK_LINE(532)
									ret1->_immutable = immutable;
									HX_STACK_LINE(532)
									{
										HX_STACK_LINE(532)
										ret1->x = (int)67;
										HX_STACK_LINE(532)
										ret1->y = 1.5;
										HX_STACK_LINE(532)
										{
										}
										HX_STACK_LINE(532)
										{
										}
									}
									HX_STACK_LINE(532)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(532)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(532)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(532)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(532)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(532)
						{
							HX_STACK_LINE(532)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(532)
							if ((_this->_immutable)){
								HX_STACK_LINE(532)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(532)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(532)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(532)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",532);
								{
									HX_STACK_LINE(532)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(532)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(532)
									{
										HX_STACK_LINE(532)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(532)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(532)
											_this->_validate();
										}
									}
									HX_STACK_LINE(532)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",532);
								{
									HX_STACK_LINE(532)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(532)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(532)
									{
										HX_STACK_LINE(532)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(532)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(532)
											_this->_validate();
										}
									}
									HX_STACK_LINE(532)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(532)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)67)) && bool((_Function_3_2::Block(ret) == 1.5))))))){
							HX_STACK_LINE(532)
							{
								HX_STACK_LINE(532)
								ret->zpp_inner->x = (int)67;
								HX_STACK_LINE(532)
								ret->zpp_inner->y = 1.5;
								HX_STACK_LINE(532)
								{
								}
								HX_STACK_LINE(532)
								{
								}
							}
							HX_STACK_LINE(532)
							{
								HX_STACK_LINE(532)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(532)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(532)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(532)
						ret;
					}
					HX_STACK_LINE(532)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(532)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(531)
		::nape::shape::Polygon s21 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_123::Block()).Add(_Function_1_124::Block()).Add(_Function_1_125::Block()).Add(_Function_1_126::Block())),mat6,filt6);		HX_STACK_VAR(s21,"s21");
		HX_STACK_LINE(536)
		{
			HX_STACK_LINE(536)
			{
				HX_STACK_LINE(536)
				s21->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(536)
				if (((((  (((s21->zpp_inner->body != null()))) ? ::nape::phys::Body(s21->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body4))){
					HX_STACK_LINE(536)
					if (((s21->zpp_inner->body != null()))){
						HX_STACK_LINE(536)
						((  (((s21->zpp_inner->body != null()))) ? ::nape::phys::Body(s21->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s21);
					}
					HX_STACK_LINE(536)
					if (((body4 != null()))){
						HX_STACK_LINE(536)
						::nape::shape::ShapeList _this = body4->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(536)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(536)
							_this->push(s21);
						}
						else{
							HX_STACK_LINE(536)
							_this->unshift(s21);
						}
					}
				}
			}
			HX_STACK_LINE(536)
			if (((s21->zpp_inner->body != null()))){
				HX_STACK_LINE(536)
				s21->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(536)
				Dynamic();
			}
		}
		HX_STACK_LINE(537)
		{
			HX_STACK_LINE(537)
			{
				HX_STACK_LINE(537)
				s21->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(537)
				s21->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(537)
				s21->zpp_inner->wake();
			}
			HX_STACK_LINE(537)
			s21->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(538)
		{
			HX_STACK_LINE(538)
			{
				HX_STACK_LINE(538)
				s21->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(538)
				s21->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(538)
				{
				}
				HX_STACK_LINE(538)
				s21->zpp_inner->wake();
			}
			HX_STACK_LINE(538)
			s21->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(539)
		{
			HX_STACK_LINE(539)
			{
				HX_STACK_LINE(539)
				if (((prop6 == null()))){
					HX_STACK_LINE(539)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(539)
				s21->zpp_inner->setFluid(prop6->zpp_inner);
			}
			HX_STACK_LINE(539)
			{
				HX_STACK_LINE(539)
				s21->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(539)
				if (((s21->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(539)
					s21->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(539)
				s21->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(540)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s21){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",540);
					{
						HX_STACK_LINE(540)
						if (((s21->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(540)
							s21->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(540)
						return s21->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(540)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s21);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(540)
			{
				HX_STACK_LINE(540)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(540)
				while(((_g < _g1->length))){
					HX_STACK_LINE(540)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(540)
					++(_g);
					HX_STACK_LINE(540)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(540)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(540)
						continue;
					}
					HX_STACK_LINE(540)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(540)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(540)
					{
						HX_STACK_LINE(540)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(540)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(540)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(540)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_127{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",543);
				{
					HX_STACK_LINE(543)
					{
					}
					HX_STACK_LINE(543)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(543)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(543)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(543)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(543)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(543)
						ret->zpp_pool = null();
						HX_STACK_LINE(543)
						ret->zpp_disp = false;
						HX_STACK_LINE(543)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(543)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(543)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",543);
								{
									HX_STACK_LINE(543)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(543)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(543)
									{
										HX_STACK_LINE(543)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(543)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(543)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(543)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(543)
											ret1->next = null();
										}
										HX_STACK_LINE(543)
										ret1->weak = false;
									}
									HX_STACK_LINE(543)
									ret1->_immutable = immutable;
									HX_STACK_LINE(543)
									{
										HX_STACK_LINE(543)
										ret1->x = (int)3;
										HX_STACK_LINE(543)
										ret1->y = 60.5;
										HX_STACK_LINE(543)
										{
										}
										HX_STACK_LINE(543)
										{
										}
									}
									HX_STACK_LINE(543)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(543)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(543)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(543)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(543)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(543)
						{
							HX_STACK_LINE(543)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(543)
							if ((_this->_immutable)){
								HX_STACK_LINE(543)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(543)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(543)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(543)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",543);
								{
									HX_STACK_LINE(543)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(543)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(543)
									{
										HX_STACK_LINE(543)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(543)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(543)
											_this->_validate();
										}
									}
									HX_STACK_LINE(543)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",543);
								{
									HX_STACK_LINE(543)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(543)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(543)
									{
										HX_STACK_LINE(543)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(543)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(543)
											_this->_validate();
										}
									}
									HX_STACK_LINE(543)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(543)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)3)) && bool((_Function_3_2::Block(ret) == 60.5))))))){
							HX_STACK_LINE(543)
							{
								HX_STACK_LINE(543)
								ret->zpp_inner->x = (int)3;
								HX_STACK_LINE(543)
								ret->zpp_inner->y = 60.5;
								HX_STACK_LINE(543)
								{
								}
								HX_STACK_LINE(543)
								{
								}
							}
							HX_STACK_LINE(543)
							{
								HX_STACK_LINE(543)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(543)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(543)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(543)
						ret;
					}
					HX_STACK_LINE(543)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(543)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_128{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",543);
				{
					HX_STACK_LINE(543)
					{
					}
					HX_STACK_LINE(543)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(543)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(543)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(543)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(543)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(543)
						ret->zpp_pool = null();
						HX_STACK_LINE(543)
						ret->zpp_disp = false;
						HX_STACK_LINE(543)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(543)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(543)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",543);
								{
									HX_STACK_LINE(543)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(543)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(543)
									{
										HX_STACK_LINE(543)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(543)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(543)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(543)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(543)
											ret1->next = null();
										}
										HX_STACK_LINE(543)
										ret1->weak = false;
									}
									HX_STACK_LINE(543)
									ret1->_immutable = immutable;
									HX_STACK_LINE(543)
									{
										HX_STACK_LINE(543)
										ret1->x = (int)40;
										HX_STACK_LINE(543)
										ret1->y = 44.5;
										HX_STACK_LINE(543)
										{
										}
										HX_STACK_LINE(543)
										{
										}
									}
									HX_STACK_LINE(543)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(543)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(543)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(543)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(543)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(543)
						{
							HX_STACK_LINE(543)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(543)
							if ((_this->_immutable)){
								HX_STACK_LINE(543)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(543)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(543)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(543)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",543);
								{
									HX_STACK_LINE(543)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(543)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(543)
									{
										HX_STACK_LINE(543)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(543)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(543)
											_this->_validate();
										}
									}
									HX_STACK_LINE(543)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",543);
								{
									HX_STACK_LINE(543)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(543)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(543)
									{
										HX_STACK_LINE(543)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(543)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(543)
											_this->_validate();
										}
									}
									HX_STACK_LINE(543)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(543)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)40)) && bool((_Function_3_2::Block(ret) == 44.5))))))){
							HX_STACK_LINE(543)
							{
								HX_STACK_LINE(543)
								ret->zpp_inner->x = (int)40;
								HX_STACK_LINE(543)
								ret->zpp_inner->y = 44.5;
								HX_STACK_LINE(543)
								{
								}
								HX_STACK_LINE(543)
								{
								}
							}
							HX_STACK_LINE(543)
							{
								HX_STACK_LINE(543)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(543)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(543)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(543)
						ret;
					}
					HX_STACK_LINE(543)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(543)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_129{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",543);
				{
					HX_STACK_LINE(543)
					{
					}
					HX_STACK_LINE(543)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(543)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(543)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(543)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(543)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(543)
						ret->zpp_pool = null();
						HX_STACK_LINE(543)
						ret->zpp_disp = false;
						HX_STACK_LINE(543)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(543)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(543)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",543);
								{
									HX_STACK_LINE(543)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(543)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(543)
									{
										HX_STACK_LINE(543)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(543)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(543)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(543)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(543)
											ret1->next = null();
										}
										HX_STACK_LINE(543)
										ret1->weak = false;
									}
									HX_STACK_LINE(543)
									ret1->_immutable = immutable;
									HX_STACK_LINE(543)
									{
										HX_STACK_LINE(543)
										ret1->x = (int)34;
										HX_STACK_LINE(543)
										ret1->y = 45.5;
										HX_STACK_LINE(543)
										{
										}
										HX_STACK_LINE(543)
										{
										}
									}
									HX_STACK_LINE(543)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(543)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(543)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(543)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(543)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(543)
						{
							HX_STACK_LINE(543)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(543)
							if ((_this->_immutable)){
								HX_STACK_LINE(543)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(543)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(543)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(543)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",543);
								{
									HX_STACK_LINE(543)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(543)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(543)
									{
										HX_STACK_LINE(543)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(543)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(543)
											_this->_validate();
										}
									}
									HX_STACK_LINE(543)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",543);
								{
									HX_STACK_LINE(543)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(543)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(543)
									{
										HX_STACK_LINE(543)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(543)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(543)
											_this->_validate();
										}
									}
									HX_STACK_LINE(543)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(543)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)34)) && bool((_Function_3_2::Block(ret) == 45.5))))))){
							HX_STACK_LINE(543)
							{
								HX_STACK_LINE(543)
								ret->zpp_inner->x = (int)34;
								HX_STACK_LINE(543)
								ret->zpp_inner->y = 45.5;
								HX_STACK_LINE(543)
								{
								}
								HX_STACK_LINE(543)
								{
								}
							}
							HX_STACK_LINE(543)
							{
								HX_STACK_LINE(543)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(543)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(543)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(543)
						ret;
					}
					HX_STACK_LINE(543)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(543)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(542)
		::nape::shape::Polygon s22 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_127::Block()).Add(_Function_1_128::Block()).Add(_Function_1_129::Block())),mat6,filt6);		HX_STACK_VAR(s22,"s22");
		HX_STACK_LINE(547)
		{
			HX_STACK_LINE(547)
			{
				HX_STACK_LINE(547)
				s22->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(547)
				if (((((  (((s22->zpp_inner->body != null()))) ? ::nape::phys::Body(s22->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body4))){
					HX_STACK_LINE(547)
					if (((s22->zpp_inner->body != null()))){
						HX_STACK_LINE(547)
						((  (((s22->zpp_inner->body != null()))) ? ::nape::phys::Body(s22->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s22);
					}
					HX_STACK_LINE(547)
					if (((body4 != null()))){
						HX_STACK_LINE(547)
						::nape::shape::ShapeList _this = body4->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(547)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(547)
							_this->push(s22);
						}
						else{
							HX_STACK_LINE(547)
							_this->unshift(s22);
						}
					}
				}
			}
			HX_STACK_LINE(547)
			if (((s22->zpp_inner->body != null()))){
				HX_STACK_LINE(547)
				s22->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(547)
				Dynamic();
			}
		}
		HX_STACK_LINE(548)
		{
			HX_STACK_LINE(548)
			{
				HX_STACK_LINE(548)
				s22->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(548)
				s22->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(548)
				s22->zpp_inner->wake();
			}
			HX_STACK_LINE(548)
			s22->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(549)
		{
			HX_STACK_LINE(549)
			{
				HX_STACK_LINE(549)
				s22->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(549)
				s22->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(549)
				{
				}
				HX_STACK_LINE(549)
				s22->zpp_inner->wake();
			}
			HX_STACK_LINE(549)
			s22->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(550)
		{
			HX_STACK_LINE(550)
			{
				HX_STACK_LINE(550)
				if (((prop6 == null()))){
					HX_STACK_LINE(550)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(550)
				s22->zpp_inner->setFluid(prop6->zpp_inner);
			}
			HX_STACK_LINE(550)
			{
				HX_STACK_LINE(550)
				s22->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(550)
				if (((s22->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(550)
					s22->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(550)
				s22->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(551)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s22){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",551);
					{
						HX_STACK_LINE(551)
						if (((s22->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(551)
							s22->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(551)
						return s22->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(551)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s22);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(551)
			{
				HX_STACK_LINE(551)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(551)
				while(((_g < _g1->length))){
					HX_STACK_LINE(551)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(551)
					++(_g);
					HX_STACK_LINE(551)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(551)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(551)
						continue;
					}
					HX_STACK_LINE(551)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(551)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(551)
					{
						HX_STACK_LINE(551)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(551)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(551)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(551)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_130{
			inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body4){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",556);
				{
					struct _Function_2_1{
						inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body4){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",556);
							{
								HX_STACK_LINE(556)
								if ((body4->zpp_inner->world)){
									HX_STACK_LINE(556)
									hx::Throw ((HX_CSTRING("Error: Space::world has no ") + HX_CSTRING("localCOM")));
								}
								HX_STACK_LINE(556)
								if (((body4->zpp_inner->wrap_localCOM == null()))){
									struct _Function_4_1{
										inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body4){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",556);
											{
												HX_STACK_LINE(556)
												Float x = body4->zpp_inner->localCOMx;		HX_STACK_VAR(x,"x");
												Float y = body4->zpp_inner->localCOMy;		HX_STACK_VAR(y,"y");
												bool weak = false;		HX_STACK_VAR(weak,"weak");
												HX_STACK_LINE(556)
												if (((bool((x != x)) || bool((y != y))))){
													HX_STACK_LINE(556)
													hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
												}
												HX_STACK_LINE(556)
												::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
												HX_STACK_LINE(556)
												if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
													HX_STACK_LINE(556)
													ret = ::nape::geom::Vec2_obj::__new(null(),null());
												}
												else{
													HX_STACK_LINE(556)
													ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
													HX_STACK_LINE(556)
													::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
													HX_STACK_LINE(556)
													ret->zpp_pool = null();
													HX_STACK_LINE(556)
													ret->zpp_disp = false;
													HX_STACK_LINE(556)
													if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
														HX_STACK_LINE(556)
														::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
													}
												}
												HX_STACK_LINE(556)
												if (((ret->zpp_inner == null()))){
													struct _Function_6_1{
														inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",556);
															{
																HX_STACK_LINE(556)
																bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
																HX_STACK_LINE(556)
																::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(556)
																{
																	HX_STACK_LINE(556)
																	if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
																		HX_STACK_LINE(556)
																		ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
																	}
																	else{
																		HX_STACK_LINE(556)
																		ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
																		HX_STACK_LINE(556)
																		::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
																		HX_STACK_LINE(556)
																		ret1->next = null();
																	}
																	HX_STACK_LINE(556)
																	ret1->weak = false;
																}
																HX_STACK_LINE(556)
																ret1->_immutable = immutable;
																HX_STACK_LINE(556)
																{
																	HX_STACK_LINE(556)
																	ret1->x = x;
																	HX_STACK_LINE(556)
																	ret1->y = y;
																	HX_STACK_LINE(556)
																	{
																	}
																	HX_STACK_LINE(556)
																	{
																	}
																}
																HX_STACK_LINE(556)
																return ret1;
															}
															return null();
														}
													};
													HX_STACK_LINE(556)
													ret->zpp_inner = _Function_6_1::Block(x,y);
													HX_STACK_LINE(556)
													ret->zpp_inner->outer = ret;
												}
												else{
													HX_STACK_LINE(556)
													if (((bool((ret != null())) && bool(ret->zpp_disp)))){
														HX_STACK_LINE(556)
														hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
													}
													HX_STACK_LINE(556)
													{
														HX_STACK_LINE(556)
														::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(556)
														if ((_this->_immutable)){
															HX_STACK_LINE(556)
															hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
														}
														HX_STACK_LINE(556)
														if (((_this->_isimmutable_dyn() != null()))){
															HX_STACK_LINE(556)
															_this->_isimmutable();
														}
													}
													HX_STACK_LINE(556)
													if (((bool((x != x)) || bool((y != y))))){
														HX_STACK_LINE(556)
														hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
													}
													struct _Function_6_1{
														inline static Float Block( ::nape::geom::Vec2 &ret){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",556);
															{
																HX_STACK_LINE(556)
																if (((bool((ret != null())) && bool(ret->zpp_disp)))){
																	HX_STACK_LINE(556)
																	hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
																}
																HX_STACK_LINE(556)
																{
																	HX_STACK_LINE(556)
																	::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(556)
																	if (((_this->_validate_dyn() != null()))){
																		HX_STACK_LINE(556)
																		_this->_validate();
																	}
																}
																HX_STACK_LINE(556)
																return ret->zpp_inner->x;
															}
															return null();
														}
													};
													struct _Function_6_2{
														inline static Float Block( ::nape::geom::Vec2 &ret){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",556);
															{
																HX_STACK_LINE(556)
																if (((bool((ret != null())) && bool(ret->zpp_disp)))){
																	HX_STACK_LINE(556)
																	hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
																}
																HX_STACK_LINE(556)
																{
																	HX_STACK_LINE(556)
																	::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(556)
																	if (((_this->_validate_dyn() != null()))){
																		HX_STACK_LINE(556)
																		_this->_validate();
																	}
																}
																HX_STACK_LINE(556)
																return ret->zpp_inner->y;
															}
															return null();
														}
													};
													HX_STACK_LINE(556)
													if ((!(((bool((_Function_6_1::Block(ret) == x)) && bool((_Function_6_2::Block(ret) == y))))))){
														HX_STACK_LINE(556)
														{
															HX_STACK_LINE(556)
															ret->zpp_inner->x = x;
															HX_STACK_LINE(556)
															ret->zpp_inner->y = y;
															HX_STACK_LINE(556)
															{
															}
															HX_STACK_LINE(556)
															{
															}
														}
														HX_STACK_LINE(556)
														{
															HX_STACK_LINE(556)
															::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(556)
															if (((_this->_invalidate_dyn() != null()))){
																HX_STACK_LINE(556)
																_this->_invalidate(_this);
															}
														}
													}
													HX_STACK_LINE(556)
													ret;
												}
												HX_STACK_LINE(556)
												ret->zpp_inner->weak = weak;
												HX_STACK_LINE(556)
												return ret;
											}
											return null();
										}
									};
									HX_STACK_LINE(556)
									body4->zpp_inner->wrap_localCOM = _Function_4_1::Block(body4);
									HX_STACK_LINE(556)
									body4->zpp_inner->wrap_localCOM->zpp_inner->_inuse = true;
									HX_STACK_LINE(556)
									body4->zpp_inner->wrap_localCOM->zpp_inner->_immutable = true;
									HX_STACK_LINE(556)
									body4->zpp_inner->wrap_localCOM->zpp_inner->_validate = body4->zpp_inner->getlocalCOM_dyn();
								}
								HX_STACK_LINE(556)
								return body4->zpp_inner->wrap_localCOM;
							}
							return null();
						}
					};
					HX_STACK_LINE(556)
					::nape::geom::Vec2 _this = _Function_2_1::Block(body4);		HX_STACK_VAR(_this,"_this");
					bool weak = false;		HX_STACK_VAR(weak,"weak");
					HX_STACK_LINE(556)
					if (((bool((_this != null())) && bool(_this->zpp_disp)))){
						HX_STACK_LINE(556)
						hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
					}
					struct _Function_2_2{
						inline static ::nape::geom::Vec2 Block( ::nape::geom::Vec2 &_this,bool &weak){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",556);
							{
								struct _Function_3_1{
									inline static Float Block( ::nape::geom::Vec2 &_this){
										HX_STACK_PUSH("*::closure","PhysicsData.hx",556);
										{
											HX_STACK_LINE(556)
											if ((_this->zpp_disp)){
												HX_STACK_LINE(556)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(556)
											{
												HX_STACK_LINE(556)
												::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
												HX_STACK_LINE(556)
												if (((_this1->_validate_dyn() != null()))){
													HX_STACK_LINE(556)
													_this1->_validate();
												}
											}
											HX_STACK_LINE(556)
											return _this->zpp_inner->x;
										}
										return null();
									}
								};
								struct _Function_3_2{
									inline static Float Block( ::nape::geom::Vec2 &_this){
										HX_STACK_PUSH("*::closure","PhysicsData.hx",556);
										{
											HX_STACK_LINE(556)
											if ((_this->zpp_disp)){
												HX_STACK_LINE(556)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(556)
											{
												HX_STACK_LINE(556)
												::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
												HX_STACK_LINE(556)
												if (((_this1->_validate_dyn() != null()))){
													HX_STACK_LINE(556)
													_this1->_validate();
												}
											}
											HX_STACK_LINE(556)
											return _this->zpp_inner->y;
										}
										return null();
									}
								};
								HX_STACK_LINE(556)
								Float x = _Function_3_1::Block(_this);		HX_STACK_VAR(x,"x");
								Float y = _Function_3_2::Block(_this);		HX_STACK_VAR(y,"y");
								HX_STACK_LINE(556)
								if (((bool((x != x)) || bool((y != y))))){
									HX_STACK_LINE(556)
									hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
								}
								HX_STACK_LINE(556)
								::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(556)
								if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
									HX_STACK_LINE(556)
									ret = ::nape::geom::Vec2_obj::__new(null(),null());
								}
								else{
									HX_STACK_LINE(556)
									ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
									HX_STACK_LINE(556)
									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
									HX_STACK_LINE(556)
									ret->zpp_pool = null();
									HX_STACK_LINE(556)
									ret->zpp_disp = false;
									HX_STACK_LINE(556)
									if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
										HX_STACK_LINE(556)
										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
									}
								}
								HX_STACK_LINE(556)
								if (((ret->zpp_inner == null()))){
									struct _Function_4_1{
										inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",556);
											{
												HX_STACK_LINE(556)
												bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
												HX_STACK_LINE(556)
												::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(556)
												{
													HX_STACK_LINE(556)
													if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
														HX_STACK_LINE(556)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
													}
													else{
														HX_STACK_LINE(556)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
														HX_STACK_LINE(556)
														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(556)
														ret1->next = null();
													}
													HX_STACK_LINE(556)
													ret1->weak = false;
												}
												HX_STACK_LINE(556)
												ret1->_immutable = immutable;
												HX_STACK_LINE(556)
												{
													HX_STACK_LINE(556)
													ret1->x = x;
													HX_STACK_LINE(556)
													ret1->y = y;
													HX_STACK_LINE(556)
													{
													}
													HX_STACK_LINE(556)
													{
													}
												}
												HX_STACK_LINE(556)
												return ret1;
											}
											return null();
										}
									};
									HX_STACK_LINE(556)
									ret->zpp_inner = _Function_4_1::Block(x,y);
									HX_STACK_LINE(556)
									ret->zpp_inner->outer = ret;
								}
								else{
									HX_STACK_LINE(556)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(556)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(556)
									{
										HX_STACK_LINE(556)
										::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
										HX_STACK_LINE(556)
										if ((_this1->_immutable)){
											HX_STACK_LINE(556)
											hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
										}
										HX_STACK_LINE(556)
										if (((_this1->_isimmutable_dyn() != null()))){
											HX_STACK_LINE(556)
											_this1->_isimmutable();
										}
									}
									HX_STACK_LINE(556)
									if (((bool((x != x)) || bool((y != y))))){
										HX_STACK_LINE(556)
										hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
									}
									struct _Function_4_1{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",556);
											{
												HX_STACK_LINE(556)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(556)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(556)
												{
													HX_STACK_LINE(556)
													::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(556)
													if (((_this1->_validate_dyn() != null()))){
														HX_STACK_LINE(556)
														_this1->_validate();
													}
												}
												HX_STACK_LINE(556)
												return ret->zpp_inner->x;
											}
											return null();
										}
									};
									struct _Function_4_2{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",556);
											{
												HX_STACK_LINE(556)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(556)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(556)
												{
													HX_STACK_LINE(556)
													::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(556)
													if (((_this1->_validate_dyn() != null()))){
														HX_STACK_LINE(556)
														_this1->_validate();
													}
												}
												HX_STACK_LINE(556)
												return ret->zpp_inner->y;
											}
											return null();
										}
									};
									HX_STACK_LINE(556)
									if ((!(((bool((_Function_4_1::Block(ret) == x)) && bool((_Function_4_2::Block(ret) == y))))))){
										HX_STACK_LINE(556)
										{
											HX_STACK_LINE(556)
											ret->zpp_inner->x = x;
											HX_STACK_LINE(556)
											ret->zpp_inner->y = y;
											HX_STACK_LINE(556)
											{
											}
											HX_STACK_LINE(556)
											{
											}
										}
										HX_STACK_LINE(556)
										{
											HX_STACK_LINE(556)
											::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
											HX_STACK_LINE(556)
											if (((_this1->_invalidate_dyn() != null()))){
												HX_STACK_LINE(556)
												_this1->_invalidate(_this1);
											}
										}
									}
									HX_STACK_LINE(556)
									ret;
								}
								HX_STACK_LINE(556)
								ret->zpp_inner->weak = weak;
								HX_STACK_LINE(556)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(556)
					return _Function_2_2::Block(_this,weak);
				}
				return null();
			}
		};
		HX_STACK_LINE(556)
		::nape::geom::Vec2 anchor4 = _Function_1_130::Block(body4);		HX_STACK_VAR(anchor4,"anchor4");
		struct _Function_1_131{
			inline static ::nape::geom::Vec2 Block( ::nape::geom::Vec2 &anchor4){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",557);
				{
					struct _Function_2_1{
						inline static Float Block( ::nape::geom::Vec2 &anchor4){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",557);
							{
								HX_STACK_LINE(557)
								if (((bool((anchor4 != null())) && bool(anchor4->zpp_disp)))){
									HX_STACK_LINE(557)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(557)
								{
									HX_STACK_LINE(557)
									::zpp_nape::geom::ZPP_Vec2 _this = anchor4->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(557)
									if (((_this->_validate_dyn() != null()))){
										HX_STACK_LINE(557)
										_this->_validate();
									}
								}
								HX_STACK_LINE(557)
								return anchor4->zpp_inner->x;
							}
							return null();
						}
					};
					struct _Function_2_2{
						inline static Float Block( ::nape::geom::Vec2 &anchor4){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",557);
							{
								HX_STACK_LINE(557)
								if (((bool((anchor4 != null())) && bool(anchor4->zpp_disp)))){
									HX_STACK_LINE(557)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(557)
								{
									HX_STACK_LINE(557)
									::zpp_nape::geom::ZPP_Vec2 _this = anchor4->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(557)
									if (((_this->_validate_dyn() != null()))){
										HX_STACK_LINE(557)
										_this->_validate();
									}
								}
								HX_STACK_LINE(557)
								return anchor4->zpp_inner->y;
							}
							return null();
						}
					};
					HX_STACK_LINE(557)
					Float x = -(_Function_2_1::Block(anchor4));		HX_STACK_VAR(x,"x");
					Float y = -(_Function_2_2::Block(anchor4));		HX_STACK_VAR(y,"y");
					struct _Function_2_3{
						inline static ::nape::geom::Vec2 Block( Float &x,Float &y){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",557);
							{
								HX_STACK_LINE(557)
								if (((bool((x != x)) || bool((y != y))))){
									HX_STACK_LINE(557)
									hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
								}
								HX_STACK_LINE(557)
								::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(557)
								if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
									HX_STACK_LINE(557)
									ret = ::nape::geom::Vec2_obj::__new(null(),null());
								}
								else{
									HX_STACK_LINE(557)
									ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
									HX_STACK_LINE(557)
									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
									HX_STACK_LINE(557)
									ret->zpp_pool = null();
									HX_STACK_LINE(557)
									ret->zpp_disp = false;
									HX_STACK_LINE(557)
									if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
										HX_STACK_LINE(557)
										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
									}
								}
								HX_STACK_LINE(557)
								if (((ret->zpp_inner == null()))){
									struct _Function_4_1{
										inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",557);
											{
												HX_STACK_LINE(557)
												bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
												HX_STACK_LINE(557)
												::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(557)
												{
													HX_STACK_LINE(557)
													if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
														HX_STACK_LINE(557)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
													}
													else{
														HX_STACK_LINE(557)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
														HX_STACK_LINE(557)
														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(557)
														ret1->next = null();
													}
													HX_STACK_LINE(557)
													ret1->weak = false;
												}
												HX_STACK_LINE(557)
												ret1->_immutable = immutable;
												HX_STACK_LINE(557)
												{
													HX_STACK_LINE(557)
													ret1->x = x;
													HX_STACK_LINE(557)
													ret1->y = y;
													HX_STACK_LINE(557)
													{
													}
													HX_STACK_LINE(557)
													{
													}
												}
												HX_STACK_LINE(557)
												return ret1;
											}
											return null();
										}
									};
									HX_STACK_LINE(557)
									ret->zpp_inner = _Function_4_1::Block(x,y);
									HX_STACK_LINE(557)
									ret->zpp_inner->outer = ret;
								}
								else{
									HX_STACK_LINE(557)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(557)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(557)
									{
										HX_STACK_LINE(557)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(557)
										if ((_this->_immutable)){
											HX_STACK_LINE(557)
											hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
										}
										HX_STACK_LINE(557)
										if (((_this->_isimmutable_dyn() != null()))){
											HX_STACK_LINE(557)
											_this->_isimmutable();
										}
									}
									HX_STACK_LINE(557)
									if (((bool((x != x)) || bool((y != y))))){
										HX_STACK_LINE(557)
										hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
									}
									struct _Function_4_1{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",557);
											{
												HX_STACK_LINE(557)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(557)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(557)
												{
													HX_STACK_LINE(557)
													::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(557)
													if (((_this->_validate_dyn() != null()))){
														HX_STACK_LINE(557)
														_this->_validate();
													}
												}
												HX_STACK_LINE(557)
												return ret->zpp_inner->x;
											}
											return null();
										}
									};
									struct _Function_4_2{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",557);
											{
												HX_STACK_LINE(557)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(557)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(557)
												{
													HX_STACK_LINE(557)
													::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(557)
													if (((_this->_validate_dyn() != null()))){
														HX_STACK_LINE(557)
														_this->_validate();
													}
												}
												HX_STACK_LINE(557)
												return ret->zpp_inner->y;
											}
											return null();
										}
									};
									HX_STACK_LINE(557)
									if ((!(((bool((_Function_4_1::Block(ret) == x)) && bool((_Function_4_2::Block(ret) == y))))))){
										HX_STACK_LINE(557)
										{
											HX_STACK_LINE(557)
											ret->zpp_inner->x = x;
											HX_STACK_LINE(557)
											ret->zpp_inner->y = y;
											HX_STACK_LINE(557)
											{
											}
											HX_STACK_LINE(557)
											{
											}
										}
										HX_STACK_LINE(557)
										{
											HX_STACK_LINE(557)
											::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(557)
											if (((_this->_invalidate_dyn() != null()))){
												HX_STACK_LINE(557)
												_this->_invalidate(_this);
											}
										}
									}
									HX_STACK_LINE(557)
									ret;
								}
								HX_STACK_LINE(557)
								ret->zpp_inner->weak = true;
								HX_STACK_LINE(557)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(557)
					return _Function_2_3::Block(x,y);
				}
				return null();
			}
		};
		HX_STACK_LINE(557)
		body4->translateShapes(_Function_1_131::Block(anchor4));
		HX_STACK_LINE(558)
		{
			struct _Function_2_1{
				inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body4){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",558);
					{
						HX_STACK_LINE(558)
						if (((body4->zpp_inner->wrap_pos == null()))){
							HX_STACK_LINE(558)
							body4->zpp_inner->setupPosition();
						}
						HX_STACK_LINE(558)
						return body4->zpp_inner->wrap_pos;
					}
					return null();
				}
			};
			HX_STACK_LINE(558)
			::nape::geom::Vec2 _this = _Function_2_1::Block(body4);		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(558)
			if (((bool((_this != null())) && bool(_this->zpp_disp)))){
				HX_STACK_LINE(558)
				hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
			}
			HX_STACK_LINE(558)
			{
				HX_STACK_LINE(558)
				::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
				HX_STACK_LINE(558)
				if ((_this1->_immutable)){
					HX_STACK_LINE(558)
					hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
				}
				HX_STACK_LINE(558)
				if (((_this1->_isimmutable_dyn() != null()))){
					HX_STACK_LINE(558)
					_this1->_isimmutable();
				}
			}
			HX_STACK_LINE(558)
			{
			}
			struct _Function_2_2{
				inline static Float Block( ::nape::geom::Vec2 &_this){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",558);
					{
						HX_STACK_LINE(558)
						if (((bool((_this != null())) && bool(_this->zpp_disp)))){
							HX_STACK_LINE(558)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(558)
						{
							HX_STACK_LINE(558)
							::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(558)
							if (((_this1->_validate_dyn() != null()))){
								HX_STACK_LINE(558)
								_this1->_validate();
							}
						}
						HX_STACK_LINE(558)
						return _this->zpp_inner->x;
					}
					return null();
				}
			};
			struct _Function_2_3{
				inline static Float Block( ::nape::geom::Vec2 &_this){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",558);
					{
						HX_STACK_LINE(558)
						if (((bool((_this != null())) && bool(_this->zpp_disp)))){
							HX_STACK_LINE(558)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(558)
						{
							HX_STACK_LINE(558)
							::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(558)
							if (((_this1->_validate_dyn() != null()))){
								HX_STACK_LINE(558)
								_this1->_validate();
							}
						}
						HX_STACK_LINE(558)
						return _this->zpp_inner->y;
					}
					return null();
				}
			};
			HX_STACK_LINE(558)
			if ((!(((bool((_Function_2_2::Block(_this) == (int)0)) && bool((_Function_2_3::Block(_this) == (int)0))))))){
				HX_STACK_LINE(558)
				{
					HX_STACK_LINE(558)
					_this->zpp_inner->x = (int)0;
					HX_STACK_LINE(558)
					_this->zpp_inner->y = (int)0;
					HX_STACK_LINE(558)
					{
					}
					HX_STACK_LINE(558)
					{
					}
				}
				HX_STACK_LINE(558)
				{
					HX_STACK_LINE(558)
					::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
					HX_STACK_LINE(558)
					if (((_this1->_invalidate_dyn() != null()))){
						HX_STACK_LINE(558)
						_this1->_invalidate(_this1);
					}
				}
			}
			HX_STACK_LINE(558)
			_this;
		}
		struct _Function_1_132{
			inline static Dynamic Block( ::nape::phys::Body &body4,::nape::geom::Vec2 &anchor4){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",560);
				{
					hx::Anon __result = hx::Anon_obj::Create();
					__result->Add(HX_CSTRING("body") , body4,false);
					__result->Add(HX_CSTRING("anchor") , anchor4,false);
					return __result;
				}
				return null();
			}
		};
		HX_STACK_LINE(560)
		::PhysicsData_obj::bodies->set(HX_CSTRING("greenleaf"),_Function_1_132::Block(body4,anchor4));
		HX_STACK_LINE(562)
		::nape::phys::Body body5 = ::nape::phys::Body_obj::__new(null(),null());		HX_STACK_VAR(body5,"body5");
		HX_STACK_LINE(563)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::phys::Body &body5){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",563);
					{
						HX_STACK_LINE(563)
						if (((body5->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(563)
							body5->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(563)
						return body5->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(563)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(body5);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(563)
			{
				HX_STACK_LINE(563)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(563)
				while(((_g < _g1->length))){
					HX_STACK_LINE(563)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(563)
					++(_g);
					HX_STACK_LINE(563)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(563)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(563)
						continue;
					}
					HX_STACK_LINE(563)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(563)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(563)
					{
						HX_STACK_LINE(563)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(563)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(563)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(563)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		HX_STACK_LINE(566)
		::nape::phys::Material mat7 = ::nape::phys::Material_obj::__new(null(),null(),null(),null(),null());		HX_STACK_VAR(mat7,"mat7");
		HX_STACK_LINE(567)
		::nape::dynamics::InteractionFilter filt7 = ::nape::dynamics::InteractionFilter_obj::__new(null(),null(),null(),null(),null(),null());		HX_STACK_VAR(filt7,"filt7");
		HX_STACK_LINE(568)
		::nape::phys::FluidProperties prop7 = ::nape::phys::FluidProperties_obj::__new(null(),null());		HX_STACK_VAR(prop7,"prop7");
		struct _Function_1_133{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",573);
				{
					HX_STACK_LINE(573)
					{
					}
					HX_STACK_LINE(573)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(573)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(573)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(573)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(573)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(573)
						ret->zpp_pool = null();
						HX_STACK_LINE(573)
						ret->zpp_disp = false;
						HX_STACK_LINE(573)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(573)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(573)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",573);
								{
									HX_STACK_LINE(573)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(573)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(573)
									{
										HX_STACK_LINE(573)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(573)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(573)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(573)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(573)
											ret1->next = null();
										}
										HX_STACK_LINE(573)
										ret1->weak = false;
									}
									HX_STACK_LINE(573)
									ret1->_immutable = immutable;
									HX_STACK_LINE(573)
									{
										HX_STACK_LINE(573)
										ret1->x = (int)31;
										HX_STACK_LINE(573)
										ret1->y = 142.5;
										HX_STACK_LINE(573)
										{
										}
										HX_STACK_LINE(573)
										{
										}
									}
									HX_STACK_LINE(573)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(573)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(573)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(573)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(573)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(573)
						{
							HX_STACK_LINE(573)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(573)
							if ((_this->_immutable)){
								HX_STACK_LINE(573)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(573)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(573)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(573)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",573);
								{
									HX_STACK_LINE(573)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(573)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(573)
									{
										HX_STACK_LINE(573)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(573)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(573)
											_this->_validate();
										}
									}
									HX_STACK_LINE(573)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",573);
								{
									HX_STACK_LINE(573)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(573)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(573)
									{
										HX_STACK_LINE(573)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(573)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(573)
											_this->_validate();
										}
									}
									HX_STACK_LINE(573)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(573)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)31)) && bool((_Function_3_2::Block(ret) == 142.5))))))){
							HX_STACK_LINE(573)
							{
								HX_STACK_LINE(573)
								ret->zpp_inner->x = (int)31;
								HX_STACK_LINE(573)
								ret->zpp_inner->y = 142.5;
								HX_STACK_LINE(573)
								{
								}
								HX_STACK_LINE(573)
								{
								}
							}
							HX_STACK_LINE(573)
							{
								HX_STACK_LINE(573)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(573)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(573)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(573)
						ret;
					}
					HX_STACK_LINE(573)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(573)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_134{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",573);
				{
					HX_STACK_LINE(573)
					{
					}
					HX_STACK_LINE(573)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(573)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(573)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(573)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(573)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(573)
						ret->zpp_pool = null();
						HX_STACK_LINE(573)
						ret->zpp_disp = false;
						HX_STACK_LINE(573)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(573)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(573)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",573);
								{
									HX_STACK_LINE(573)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(573)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(573)
									{
										HX_STACK_LINE(573)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(573)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(573)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(573)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(573)
											ret1->next = null();
										}
										HX_STACK_LINE(573)
										ret1->weak = false;
									}
									HX_STACK_LINE(573)
									ret1->_immutable = immutable;
									HX_STACK_LINE(573)
									{
										HX_STACK_LINE(573)
										ret1->x = 44.5;
										HX_STACK_LINE(573)
										ret1->y = (int)135;
										HX_STACK_LINE(573)
										{
										}
										HX_STACK_LINE(573)
										{
										}
									}
									HX_STACK_LINE(573)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(573)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(573)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(573)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(573)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(573)
						{
							HX_STACK_LINE(573)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(573)
							if ((_this->_immutable)){
								HX_STACK_LINE(573)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(573)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(573)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(573)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",573);
								{
									HX_STACK_LINE(573)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(573)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(573)
									{
										HX_STACK_LINE(573)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(573)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(573)
											_this->_validate();
										}
									}
									HX_STACK_LINE(573)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",573);
								{
									HX_STACK_LINE(573)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(573)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(573)
									{
										HX_STACK_LINE(573)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(573)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(573)
											_this->_validate();
										}
									}
									HX_STACK_LINE(573)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(573)
						if ((!(((bool((_Function_3_1::Block(ret) == 44.5)) && bool((_Function_3_2::Block(ret) == (int)135))))))){
							HX_STACK_LINE(573)
							{
								HX_STACK_LINE(573)
								ret->zpp_inner->x = 44.5;
								HX_STACK_LINE(573)
								ret->zpp_inner->y = (int)135;
								HX_STACK_LINE(573)
								{
								}
								HX_STACK_LINE(573)
								{
								}
							}
							HX_STACK_LINE(573)
							{
								HX_STACK_LINE(573)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(573)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(573)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(573)
						ret;
					}
					HX_STACK_LINE(573)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(573)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_135{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",573);
				{
					HX_STACK_LINE(573)
					{
					}
					HX_STACK_LINE(573)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(573)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(573)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(573)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(573)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(573)
						ret->zpp_pool = null();
						HX_STACK_LINE(573)
						ret->zpp_disp = false;
						HX_STACK_LINE(573)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(573)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(573)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",573);
								{
									HX_STACK_LINE(573)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(573)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(573)
									{
										HX_STACK_LINE(573)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(573)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(573)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(573)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(573)
											ret1->next = null();
										}
										HX_STACK_LINE(573)
										ret1->weak = false;
									}
									HX_STACK_LINE(573)
									ret1->_immutable = immutable;
									HX_STACK_LINE(573)
									{
										HX_STACK_LINE(573)
										ret1->x = (int)46;
										HX_STACK_LINE(573)
										ret1->y = 92.5;
										HX_STACK_LINE(573)
										{
										}
										HX_STACK_LINE(573)
										{
										}
									}
									HX_STACK_LINE(573)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(573)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(573)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(573)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(573)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(573)
						{
							HX_STACK_LINE(573)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(573)
							if ((_this->_immutable)){
								HX_STACK_LINE(573)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(573)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(573)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(573)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",573);
								{
									HX_STACK_LINE(573)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(573)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(573)
									{
										HX_STACK_LINE(573)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(573)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(573)
											_this->_validate();
										}
									}
									HX_STACK_LINE(573)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",573);
								{
									HX_STACK_LINE(573)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(573)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(573)
									{
										HX_STACK_LINE(573)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(573)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(573)
											_this->_validate();
										}
									}
									HX_STACK_LINE(573)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(573)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)46)) && bool((_Function_3_2::Block(ret) == 92.5))))))){
							HX_STACK_LINE(573)
							{
								HX_STACK_LINE(573)
								ret->zpp_inner->x = (int)46;
								HX_STACK_LINE(573)
								ret->zpp_inner->y = 92.5;
								HX_STACK_LINE(573)
								{
								}
								HX_STACK_LINE(573)
								{
								}
							}
							HX_STACK_LINE(573)
							{
								HX_STACK_LINE(573)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(573)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(573)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(573)
						ret;
					}
					HX_STACK_LINE(573)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(573)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_136{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",573);
				{
					HX_STACK_LINE(573)
					{
					}
					HX_STACK_LINE(573)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(573)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(573)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(573)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(573)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(573)
						ret->zpp_pool = null();
						HX_STACK_LINE(573)
						ret->zpp_disp = false;
						HX_STACK_LINE(573)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(573)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(573)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",573);
								{
									HX_STACK_LINE(573)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(573)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(573)
									{
										HX_STACK_LINE(573)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(573)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(573)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(573)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(573)
											ret1->next = null();
										}
										HX_STACK_LINE(573)
										ret1->weak = false;
									}
									HX_STACK_LINE(573)
									ret1->_immutable = immutable;
									HX_STACK_LINE(573)
									{
										HX_STACK_LINE(573)
										ret1->x = 29.5;
										HX_STACK_LINE(573)
										ret1->y = (int)123;
										HX_STACK_LINE(573)
										{
										}
										HX_STACK_LINE(573)
										{
										}
									}
									HX_STACK_LINE(573)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(573)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(573)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(573)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(573)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(573)
						{
							HX_STACK_LINE(573)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(573)
							if ((_this->_immutable)){
								HX_STACK_LINE(573)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(573)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(573)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(573)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",573);
								{
									HX_STACK_LINE(573)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(573)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(573)
									{
										HX_STACK_LINE(573)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(573)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(573)
											_this->_validate();
										}
									}
									HX_STACK_LINE(573)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",573);
								{
									HX_STACK_LINE(573)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(573)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(573)
									{
										HX_STACK_LINE(573)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(573)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(573)
											_this->_validate();
										}
									}
									HX_STACK_LINE(573)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(573)
						if ((!(((bool((_Function_3_1::Block(ret) == 29.5)) && bool((_Function_3_2::Block(ret) == (int)123))))))){
							HX_STACK_LINE(573)
							{
								HX_STACK_LINE(573)
								ret->zpp_inner->x = 29.5;
								HX_STACK_LINE(573)
								ret->zpp_inner->y = (int)123;
								HX_STACK_LINE(573)
								{
								}
								HX_STACK_LINE(573)
								{
								}
							}
							HX_STACK_LINE(573)
							{
								HX_STACK_LINE(573)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(573)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(573)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(573)
						ret;
					}
					HX_STACK_LINE(573)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(573)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(572)
		::nape::shape::Polygon s23 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_133::Block()).Add(_Function_1_134::Block()).Add(_Function_1_135::Block()).Add(_Function_1_136::Block())),mat7,filt7);		HX_STACK_VAR(s23,"s23");
		HX_STACK_LINE(577)
		{
			HX_STACK_LINE(577)
			{
				HX_STACK_LINE(577)
				s23->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(577)
				if (((((  (((s23->zpp_inner->body != null()))) ? ::nape::phys::Body(s23->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body5))){
					HX_STACK_LINE(577)
					if (((s23->zpp_inner->body != null()))){
						HX_STACK_LINE(577)
						((  (((s23->zpp_inner->body != null()))) ? ::nape::phys::Body(s23->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s23);
					}
					HX_STACK_LINE(577)
					if (((body5 != null()))){
						HX_STACK_LINE(577)
						::nape::shape::ShapeList _this = body5->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(577)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(577)
							_this->push(s23);
						}
						else{
							HX_STACK_LINE(577)
							_this->unshift(s23);
						}
					}
				}
			}
			HX_STACK_LINE(577)
			if (((s23->zpp_inner->body != null()))){
				HX_STACK_LINE(577)
				s23->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(577)
				Dynamic();
			}
		}
		HX_STACK_LINE(578)
		{
			HX_STACK_LINE(578)
			{
				HX_STACK_LINE(578)
				s23->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(578)
				s23->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(578)
				s23->zpp_inner->wake();
			}
			HX_STACK_LINE(578)
			s23->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(579)
		{
			HX_STACK_LINE(579)
			{
				HX_STACK_LINE(579)
				s23->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(579)
				s23->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(579)
				{
				}
				HX_STACK_LINE(579)
				s23->zpp_inner->wake();
			}
			HX_STACK_LINE(579)
			s23->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(580)
		{
			HX_STACK_LINE(580)
			{
				HX_STACK_LINE(580)
				if (((prop7 == null()))){
					HX_STACK_LINE(580)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(580)
				s23->zpp_inner->setFluid(prop7->zpp_inner);
			}
			HX_STACK_LINE(580)
			{
				HX_STACK_LINE(580)
				s23->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(580)
				if (((s23->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(580)
					s23->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(580)
				s23->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(581)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s23){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",581);
					{
						HX_STACK_LINE(581)
						if (((s23->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(581)
							s23->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(581)
						return s23->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(581)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s23);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(581)
			{
				HX_STACK_LINE(581)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(581)
				while(((_g < _g1->length))){
					HX_STACK_LINE(581)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(581)
					++(_g);
					HX_STACK_LINE(581)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(581)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(581)
						continue;
					}
					HX_STACK_LINE(581)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(581)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(581)
					{
						HX_STACK_LINE(581)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(581)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(581)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(581)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_137{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",584);
				{
					HX_STACK_LINE(584)
					{
					}
					HX_STACK_LINE(584)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(584)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(584)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(584)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(584)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(584)
						ret->zpp_pool = null();
						HX_STACK_LINE(584)
						ret->zpp_disp = false;
						HX_STACK_LINE(584)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(584)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(584)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",584);
								{
									HX_STACK_LINE(584)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(584)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(584)
									{
										HX_STACK_LINE(584)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(584)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(584)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(584)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(584)
											ret1->next = null();
										}
										HX_STACK_LINE(584)
										ret1->weak = false;
									}
									HX_STACK_LINE(584)
									ret1->_immutable = immutable;
									HX_STACK_LINE(584)
									{
										HX_STACK_LINE(584)
										ret1->x = (int)4;
										HX_STACK_LINE(584)
										ret1->y = 129.5;
										HX_STACK_LINE(584)
										{
										}
										HX_STACK_LINE(584)
										{
										}
									}
									HX_STACK_LINE(584)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(584)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(584)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(584)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(584)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(584)
						{
							HX_STACK_LINE(584)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(584)
							if ((_this->_immutable)){
								HX_STACK_LINE(584)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(584)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(584)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(584)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",584);
								{
									HX_STACK_LINE(584)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(584)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(584)
									{
										HX_STACK_LINE(584)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(584)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(584)
											_this->_validate();
										}
									}
									HX_STACK_LINE(584)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",584);
								{
									HX_STACK_LINE(584)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(584)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(584)
									{
										HX_STACK_LINE(584)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(584)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(584)
											_this->_validate();
										}
									}
									HX_STACK_LINE(584)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(584)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)4)) && bool((_Function_3_2::Block(ret) == 129.5))))))){
							HX_STACK_LINE(584)
							{
								HX_STACK_LINE(584)
								ret->zpp_inner->x = (int)4;
								HX_STACK_LINE(584)
								ret->zpp_inner->y = 129.5;
								HX_STACK_LINE(584)
								{
								}
								HX_STACK_LINE(584)
								{
								}
							}
							HX_STACK_LINE(584)
							{
								HX_STACK_LINE(584)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(584)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(584)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(584)
						ret;
					}
					HX_STACK_LINE(584)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(584)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_138{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",584);
				{
					HX_STACK_LINE(584)
					{
					}
					HX_STACK_LINE(584)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(584)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(584)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(584)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(584)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(584)
						ret->zpp_pool = null();
						HX_STACK_LINE(584)
						ret->zpp_disp = false;
						HX_STACK_LINE(584)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(584)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(584)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",584);
								{
									HX_STACK_LINE(584)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(584)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(584)
									{
										HX_STACK_LINE(584)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(584)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(584)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(584)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(584)
											ret1->next = null();
										}
										HX_STACK_LINE(584)
										ret1->weak = false;
									}
									HX_STACK_LINE(584)
									ret1->_immutable = immutable;
									HX_STACK_LINE(584)
									{
										HX_STACK_LINE(584)
										ret1->x = 29.5;
										HX_STACK_LINE(584)
										ret1->y = (int)123;
										HX_STACK_LINE(584)
										{
										}
										HX_STACK_LINE(584)
										{
										}
									}
									HX_STACK_LINE(584)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(584)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(584)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(584)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(584)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(584)
						{
							HX_STACK_LINE(584)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(584)
							if ((_this->_immutable)){
								HX_STACK_LINE(584)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(584)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(584)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(584)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",584);
								{
									HX_STACK_LINE(584)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(584)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(584)
									{
										HX_STACK_LINE(584)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(584)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(584)
											_this->_validate();
										}
									}
									HX_STACK_LINE(584)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",584);
								{
									HX_STACK_LINE(584)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(584)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(584)
									{
										HX_STACK_LINE(584)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(584)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(584)
											_this->_validate();
										}
									}
									HX_STACK_LINE(584)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(584)
						if ((!(((bool((_Function_3_1::Block(ret) == 29.5)) && bool((_Function_3_2::Block(ret) == (int)123))))))){
							HX_STACK_LINE(584)
							{
								HX_STACK_LINE(584)
								ret->zpp_inner->x = 29.5;
								HX_STACK_LINE(584)
								ret->zpp_inner->y = (int)123;
								HX_STACK_LINE(584)
								{
								}
								HX_STACK_LINE(584)
								{
								}
							}
							HX_STACK_LINE(584)
							{
								HX_STACK_LINE(584)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(584)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(584)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(584)
						ret;
					}
					HX_STACK_LINE(584)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(584)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_139{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",584);
				{
					HX_STACK_LINE(584)
					{
					}
					HX_STACK_LINE(584)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(584)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(584)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(584)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(584)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(584)
						ret->zpp_pool = null();
						HX_STACK_LINE(584)
						ret->zpp_disp = false;
						HX_STACK_LINE(584)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(584)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(584)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",584);
								{
									HX_STACK_LINE(584)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(584)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(584)
									{
										HX_STACK_LINE(584)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(584)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(584)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(584)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(584)
											ret1->next = null();
										}
										HX_STACK_LINE(584)
										ret1->weak = false;
									}
									HX_STACK_LINE(584)
									ret1->_immutable = immutable;
									HX_STACK_LINE(584)
									{
										HX_STACK_LINE(584)
										ret1->x = (int)46;
										HX_STACK_LINE(584)
										ret1->y = 92.5;
										HX_STACK_LINE(584)
										{
										}
										HX_STACK_LINE(584)
										{
										}
									}
									HX_STACK_LINE(584)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(584)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(584)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(584)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(584)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(584)
						{
							HX_STACK_LINE(584)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(584)
							if ((_this->_immutable)){
								HX_STACK_LINE(584)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(584)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(584)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(584)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",584);
								{
									HX_STACK_LINE(584)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(584)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(584)
									{
										HX_STACK_LINE(584)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(584)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(584)
											_this->_validate();
										}
									}
									HX_STACK_LINE(584)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",584);
								{
									HX_STACK_LINE(584)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(584)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(584)
									{
										HX_STACK_LINE(584)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(584)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(584)
											_this->_validate();
										}
									}
									HX_STACK_LINE(584)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(584)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)46)) && bool((_Function_3_2::Block(ret) == 92.5))))))){
							HX_STACK_LINE(584)
							{
								HX_STACK_LINE(584)
								ret->zpp_inner->x = (int)46;
								HX_STACK_LINE(584)
								ret->zpp_inner->y = 92.5;
								HX_STACK_LINE(584)
								{
								}
								HX_STACK_LINE(584)
								{
								}
							}
							HX_STACK_LINE(584)
							{
								HX_STACK_LINE(584)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(584)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(584)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(584)
						ret;
					}
					HX_STACK_LINE(584)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(584)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_140{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",584);
				{
					HX_STACK_LINE(584)
					{
					}
					HX_STACK_LINE(584)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(584)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(584)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(584)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(584)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(584)
						ret->zpp_pool = null();
						HX_STACK_LINE(584)
						ret->zpp_disp = false;
						HX_STACK_LINE(584)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(584)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(584)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",584);
								{
									HX_STACK_LINE(584)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(584)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(584)
									{
										HX_STACK_LINE(584)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(584)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(584)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(584)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(584)
											ret1->next = null();
										}
										HX_STACK_LINE(584)
										ret1->weak = false;
									}
									HX_STACK_LINE(584)
									ret1->_immutable = immutable;
									HX_STACK_LINE(584)
									{
										HX_STACK_LINE(584)
										ret1->x = 1.5;
										HX_STACK_LINE(584)
										ret1->y = (int)94;
										HX_STACK_LINE(584)
										{
										}
										HX_STACK_LINE(584)
										{
										}
									}
									HX_STACK_LINE(584)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(584)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(584)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(584)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(584)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(584)
						{
							HX_STACK_LINE(584)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(584)
							if ((_this->_immutable)){
								HX_STACK_LINE(584)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(584)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(584)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(584)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",584);
								{
									HX_STACK_LINE(584)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(584)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(584)
									{
										HX_STACK_LINE(584)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(584)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(584)
											_this->_validate();
										}
									}
									HX_STACK_LINE(584)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",584);
								{
									HX_STACK_LINE(584)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(584)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(584)
									{
										HX_STACK_LINE(584)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(584)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(584)
											_this->_validate();
										}
									}
									HX_STACK_LINE(584)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(584)
						if ((!(((bool((_Function_3_1::Block(ret) == 1.5)) && bool((_Function_3_2::Block(ret) == (int)94))))))){
							HX_STACK_LINE(584)
							{
								HX_STACK_LINE(584)
								ret->zpp_inner->x = 1.5;
								HX_STACK_LINE(584)
								ret->zpp_inner->y = (int)94;
								HX_STACK_LINE(584)
								{
								}
								HX_STACK_LINE(584)
								{
								}
							}
							HX_STACK_LINE(584)
							{
								HX_STACK_LINE(584)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(584)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(584)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(584)
						ret;
					}
					HX_STACK_LINE(584)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(584)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(583)
		::nape::shape::Polygon s24 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_137::Block()).Add(_Function_1_138::Block()).Add(_Function_1_139::Block()).Add(_Function_1_140::Block())),mat7,filt7);		HX_STACK_VAR(s24,"s24");
		HX_STACK_LINE(588)
		{
			HX_STACK_LINE(588)
			{
				HX_STACK_LINE(588)
				s24->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(588)
				if (((((  (((s24->zpp_inner->body != null()))) ? ::nape::phys::Body(s24->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body5))){
					HX_STACK_LINE(588)
					if (((s24->zpp_inner->body != null()))){
						HX_STACK_LINE(588)
						((  (((s24->zpp_inner->body != null()))) ? ::nape::phys::Body(s24->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s24);
					}
					HX_STACK_LINE(588)
					if (((body5 != null()))){
						HX_STACK_LINE(588)
						::nape::shape::ShapeList _this = body5->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(588)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(588)
							_this->push(s24);
						}
						else{
							HX_STACK_LINE(588)
							_this->unshift(s24);
						}
					}
				}
			}
			HX_STACK_LINE(588)
			if (((s24->zpp_inner->body != null()))){
				HX_STACK_LINE(588)
				s24->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(588)
				Dynamic();
			}
		}
		HX_STACK_LINE(589)
		{
			HX_STACK_LINE(589)
			{
				HX_STACK_LINE(589)
				s24->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(589)
				s24->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(589)
				s24->zpp_inner->wake();
			}
			HX_STACK_LINE(589)
			s24->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(590)
		{
			HX_STACK_LINE(590)
			{
				HX_STACK_LINE(590)
				s24->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(590)
				s24->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(590)
				{
				}
				HX_STACK_LINE(590)
				s24->zpp_inner->wake();
			}
			HX_STACK_LINE(590)
			s24->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(591)
		{
			HX_STACK_LINE(591)
			{
				HX_STACK_LINE(591)
				if (((prop7 == null()))){
					HX_STACK_LINE(591)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(591)
				s24->zpp_inner->setFluid(prop7->zpp_inner);
			}
			HX_STACK_LINE(591)
			{
				HX_STACK_LINE(591)
				s24->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(591)
				if (((s24->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(591)
					s24->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(591)
				s24->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(592)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s24){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",592);
					{
						HX_STACK_LINE(592)
						if (((s24->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(592)
							s24->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(592)
						return s24->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(592)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s24);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(592)
			{
				HX_STACK_LINE(592)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(592)
				while(((_g < _g1->length))){
					HX_STACK_LINE(592)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(592)
					++(_g);
					HX_STACK_LINE(592)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(592)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(592)
						continue;
					}
					HX_STACK_LINE(592)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(592)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(592)
					{
						HX_STACK_LINE(592)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(592)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(592)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(592)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_141{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",595);
				{
					HX_STACK_LINE(595)
					{
					}
					HX_STACK_LINE(595)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(595)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(595)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(595)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(595)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(595)
						ret->zpp_pool = null();
						HX_STACK_LINE(595)
						ret->zpp_disp = false;
						HX_STACK_LINE(595)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(595)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(595)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",595);
								{
									HX_STACK_LINE(595)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(595)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(595)
									{
										HX_STACK_LINE(595)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(595)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(595)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(595)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(595)
											ret1->next = null();
										}
										HX_STACK_LINE(595)
										ret1->weak = false;
									}
									HX_STACK_LINE(595)
									ret1->_immutable = immutable;
									HX_STACK_LINE(595)
									{
										HX_STACK_LINE(595)
										ret1->x = 142.5;
										HX_STACK_LINE(595)
										ret1->y = (int)55;
										HX_STACK_LINE(595)
										{
										}
										HX_STACK_LINE(595)
										{
										}
									}
									HX_STACK_LINE(595)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(595)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(595)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(595)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(595)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(595)
						{
							HX_STACK_LINE(595)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(595)
							if ((_this->_immutable)){
								HX_STACK_LINE(595)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(595)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(595)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(595)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",595);
								{
									HX_STACK_LINE(595)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(595)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(595)
									{
										HX_STACK_LINE(595)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(595)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(595)
											_this->_validate();
										}
									}
									HX_STACK_LINE(595)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",595);
								{
									HX_STACK_LINE(595)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(595)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(595)
									{
										HX_STACK_LINE(595)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(595)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(595)
											_this->_validate();
										}
									}
									HX_STACK_LINE(595)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(595)
						if ((!(((bool((_Function_3_1::Block(ret) == 142.5)) && bool((_Function_3_2::Block(ret) == (int)55))))))){
							HX_STACK_LINE(595)
							{
								HX_STACK_LINE(595)
								ret->zpp_inner->x = 142.5;
								HX_STACK_LINE(595)
								ret->zpp_inner->y = (int)55;
								HX_STACK_LINE(595)
								{
								}
								HX_STACK_LINE(595)
								{
								}
							}
							HX_STACK_LINE(595)
							{
								HX_STACK_LINE(595)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(595)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(595)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(595)
						ret;
					}
					HX_STACK_LINE(595)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(595)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_142{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",595);
				{
					HX_STACK_LINE(595)
					{
					}
					HX_STACK_LINE(595)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(595)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(595)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(595)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(595)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(595)
						ret->zpp_pool = null();
						HX_STACK_LINE(595)
						ret->zpp_disp = false;
						HX_STACK_LINE(595)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(595)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(595)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",595);
								{
									HX_STACK_LINE(595)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(595)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(595)
									{
										HX_STACK_LINE(595)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(595)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(595)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(595)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(595)
											ret1->next = null();
										}
										HX_STACK_LINE(595)
										ret1->weak = false;
									}
									HX_STACK_LINE(595)
									ret1->_immutable = immutable;
									HX_STACK_LINE(595)
									{
										HX_STACK_LINE(595)
										ret1->x = (int)135;
										HX_STACK_LINE(595)
										ret1->y = 60.5;
										HX_STACK_LINE(595)
										{
										}
										HX_STACK_LINE(595)
										{
										}
									}
									HX_STACK_LINE(595)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(595)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(595)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(595)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(595)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(595)
						{
							HX_STACK_LINE(595)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(595)
							if ((_this->_immutable)){
								HX_STACK_LINE(595)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(595)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(595)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(595)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",595);
								{
									HX_STACK_LINE(595)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(595)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(595)
									{
										HX_STACK_LINE(595)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(595)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(595)
											_this->_validate();
										}
									}
									HX_STACK_LINE(595)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",595);
								{
									HX_STACK_LINE(595)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(595)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(595)
									{
										HX_STACK_LINE(595)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(595)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(595)
											_this->_validate();
										}
									}
									HX_STACK_LINE(595)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(595)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)135)) && bool((_Function_3_2::Block(ret) == 60.5))))))){
							HX_STACK_LINE(595)
							{
								HX_STACK_LINE(595)
								ret->zpp_inner->x = (int)135;
								HX_STACK_LINE(595)
								ret->zpp_inner->y = 60.5;
								HX_STACK_LINE(595)
								{
								}
								HX_STACK_LINE(595)
								{
								}
							}
							HX_STACK_LINE(595)
							{
								HX_STACK_LINE(595)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(595)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(595)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(595)
						ret;
					}
					HX_STACK_LINE(595)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(595)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_143{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",595);
				{
					HX_STACK_LINE(595)
					{
					}
					HX_STACK_LINE(595)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(595)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(595)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(595)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(595)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(595)
						ret->zpp_pool = null();
						HX_STACK_LINE(595)
						ret->zpp_disp = false;
						HX_STACK_LINE(595)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(595)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(595)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",595);
								{
									HX_STACK_LINE(595)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(595)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(595)
									{
										HX_STACK_LINE(595)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(595)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(595)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(595)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(595)
											ret1->next = null();
										}
										HX_STACK_LINE(595)
										ret1->weak = false;
									}
									HX_STACK_LINE(595)
									ret1->_immutable = immutable;
									HX_STACK_LINE(595)
									{
										HX_STACK_LINE(595)
										ret1->x = 149.5;
										HX_STACK_LINE(595)
										ret1->y = (int)62;
										HX_STACK_LINE(595)
										{
										}
										HX_STACK_LINE(595)
										{
										}
									}
									HX_STACK_LINE(595)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(595)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(595)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(595)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(595)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(595)
						{
							HX_STACK_LINE(595)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(595)
							if ((_this->_immutable)){
								HX_STACK_LINE(595)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(595)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(595)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(595)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",595);
								{
									HX_STACK_LINE(595)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(595)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(595)
									{
										HX_STACK_LINE(595)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(595)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(595)
											_this->_validate();
										}
									}
									HX_STACK_LINE(595)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",595);
								{
									HX_STACK_LINE(595)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(595)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(595)
									{
										HX_STACK_LINE(595)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(595)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(595)
											_this->_validate();
										}
									}
									HX_STACK_LINE(595)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(595)
						if ((!(((bool((_Function_3_1::Block(ret) == 149.5)) && bool((_Function_3_2::Block(ret) == (int)62))))))){
							HX_STACK_LINE(595)
							{
								HX_STACK_LINE(595)
								ret->zpp_inner->x = 149.5;
								HX_STACK_LINE(595)
								ret->zpp_inner->y = (int)62;
								HX_STACK_LINE(595)
								{
								}
								HX_STACK_LINE(595)
								{
								}
							}
							HX_STACK_LINE(595)
							{
								HX_STACK_LINE(595)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(595)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(595)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(595)
						ret;
					}
					HX_STACK_LINE(595)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(595)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(594)
		::nape::shape::Polygon s25 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_141::Block()).Add(_Function_1_142::Block()).Add(_Function_1_143::Block())),mat7,filt7);		HX_STACK_VAR(s25,"s25");
		HX_STACK_LINE(599)
		{
			HX_STACK_LINE(599)
			{
				HX_STACK_LINE(599)
				s25->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(599)
				if (((((  (((s25->zpp_inner->body != null()))) ? ::nape::phys::Body(s25->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body5))){
					HX_STACK_LINE(599)
					if (((s25->zpp_inner->body != null()))){
						HX_STACK_LINE(599)
						((  (((s25->zpp_inner->body != null()))) ? ::nape::phys::Body(s25->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s25);
					}
					HX_STACK_LINE(599)
					if (((body5 != null()))){
						HX_STACK_LINE(599)
						::nape::shape::ShapeList _this = body5->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(599)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(599)
							_this->push(s25);
						}
						else{
							HX_STACK_LINE(599)
							_this->unshift(s25);
						}
					}
				}
			}
			HX_STACK_LINE(599)
			if (((s25->zpp_inner->body != null()))){
				HX_STACK_LINE(599)
				s25->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(599)
				Dynamic();
			}
		}
		HX_STACK_LINE(600)
		{
			HX_STACK_LINE(600)
			{
				HX_STACK_LINE(600)
				s25->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(600)
				s25->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(600)
				s25->zpp_inner->wake();
			}
			HX_STACK_LINE(600)
			s25->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(601)
		{
			HX_STACK_LINE(601)
			{
				HX_STACK_LINE(601)
				s25->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(601)
				s25->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(601)
				{
				}
				HX_STACK_LINE(601)
				s25->zpp_inner->wake();
			}
			HX_STACK_LINE(601)
			s25->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(602)
		{
			HX_STACK_LINE(602)
			{
				HX_STACK_LINE(602)
				if (((prop7 == null()))){
					HX_STACK_LINE(602)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(602)
				s25->zpp_inner->setFluid(prop7->zpp_inner);
			}
			HX_STACK_LINE(602)
			{
				HX_STACK_LINE(602)
				s25->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(602)
				if (((s25->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(602)
					s25->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(602)
				s25->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(603)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s25){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",603);
					{
						HX_STACK_LINE(603)
						if (((s25->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(603)
							s25->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(603)
						return s25->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(603)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s25);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(603)
			{
				HX_STACK_LINE(603)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(603)
				while(((_g < _g1->length))){
					HX_STACK_LINE(603)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(603)
					++(_g);
					HX_STACK_LINE(603)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(603)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(603)
						continue;
					}
					HX_STACK_LINE(603)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(603)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(603)
					{
						HX_STACK_LINE(603)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(603)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(603)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(603)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_144{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",606);
				{
					HX_STACK_LINE(606)
					{
					}
					HX_STACK_LINE(606)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(606)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(606)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(606)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(606)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(606)
						ret->zpp_pool = null();
						HX_STACK_LINE(606)
						ret->zpp_disp = false;
						HX_STACK_LINE(606)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(606)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(606)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",606);
								{
									HX_STACK_LINE(606)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(606)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(606)
									{
										HX_STACK_LINE(606)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(606)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(606)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(606)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(606)
											ret1->next = null();
										}
										HX_STACK_LINE(606)
										ret1->weak = false;
									}
									HX_STACK_LINE(606)
									ret1->_immutable = immutable;
									HX_STACK_LINE(606)
									{
										HX_STACK_LINE(606)
										ret1->x = 43.5;
										HX_STACK_LINE(606)
										ret1->y = (int)73;
										HX_STACK_LINE(606)
										{
										}
										HX_STACK_LINE(606)
										{
										}
									}
									HX_STACK_LINE(606)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(606)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(606)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(606)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(606)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(606)
						{
							HX_STACK_LINE(606)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(606)
							if ((_this->_immutable)){
								HX_STACK_LINE(606)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(606)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(606)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(606)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",606);
								{
									HX_STACK_LINE(606)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(606)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(606)
									{
										HX_STACK_LINE(606)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(606)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(606)
											_this->_validate();
										}
									}
									HX_STACK_LINE(606)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",606);
								{
									HX_STACK_LINE(606)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(606)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(606)
									{
										HX_STACK_LINE(606)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(606)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(606)
											_this->_validate();
										}
									}
									HX_STACK_LINE(606)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(606)
						if ((!(((bool((_Function_3_1::Block(ret) == 43.5)) && bool((_Function_3_2::Block(ret) == (int)73))))))){
							HX_STACK_LINE(606)
							{
								HX_STACK_LINE(606)
								ret->zpp_inner->x = 43.5;
								HX_STACK_LINE(606)
								ret->zpp_inner->y = (int)73;
								HX_STACK_LINE(606)
								{
								}
								HX_STACK_LINE(606)
								{
								}
							}
							HX_STACK_LINE(606)
							{
								HX_STACK_LINE(606)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(606)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(606)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(606)
						ret;
					}
					HX_STACK_LINE(606)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(606)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_145{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",606);
				{
					HX_STACK_LINE(606)
					{
					}
					HX_STACK_LINE(606)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(606)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(606)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(606)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(606)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(606)
						ret->zpp_pool = null();
						HX_STACK_LINE(606)
						ret->zpp_disp = false;
						HX_STACK_LINE(606)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(606)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(606)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",606);
								{
									HX_STACK_LINE(606)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(606)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(606)
									{
										HX_STACK_LINE(606)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(606)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(606)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(606)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(606)
											ret1->next = null();
										}
										HX_STACK_LINE(606)
										ret1->weak = false;
									}
									HX_STACK_LINE(606)
									ret1->_immutable = immutable;
									HX_STACK_LINE(606)
									{
										HX_STACK_LINE(606)
										ret1->x = (int)46;
										HX_STACK_LINE(606)
										ret1->y = 92.5;
										HX_STACK_LINE(606)
										{
										}
										HX_STACK_LINE(606)
										{
										}
									}
									HX_STACK_LINE(606)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(606)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(606)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(606)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(606)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(606)
						{
							HX_STACK_LINE(606)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(606)
							if ((_this->_immutable)){
								HX_STACK_LINE(606)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(606)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(606)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(606)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",606);
								{
									HX_STACK_LINE(606)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(606)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(606)
									{
										HX_STACK_LINE(606)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(606)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(606)
											_this->_validate();
										}
									}
									HX_STACK_LINE(606)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",606);
								{
									HX_STACK_LINE(606)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(606)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(606)
									{
										HX_STACK_LINE(606)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(606)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(606)
											_this->_validate();
										}
									}
									HX_STACK_LINE(606)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(606)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)46)) && bool((_Function_3_2::Block(ret) == 92.5))))))){
							HX_STACK_LINE(606)
							{
								HX_STACK_LINE(606)
								ret->zpp_inner->x = (int)46;
								HX_STACK_LINE(606)
								ret->zpp_inner->y = 92.5;
								HX_STACK_LINE(606)
								{
								}
								HX_STACK_LINE(606)
								{
								}
							}
							HX_STACK_LINE(606)
							{
								HX_STACK_LINE(606)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(606)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(606)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(606)
						ret;
					}
					HX_STACK_LINE(606)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(606)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_146{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",606);
				{
					HX_STACK_LINE(606)
					{
					}
					HX_STACK_LINE(606)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(606)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(606)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(606)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(606)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(606)
						ret->zpp_pool = null();
						HX_STACK_LINE(606)
						ret->zpp_disp = false;
						HX_STACK_LINE(606)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(606)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(606)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",606);
								{
									HX_STACK_LINE(606)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(606)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(606)
									{
										HX_STACK_LINE(606)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(606)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(606)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(606)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(606)
											ret1->next = null();
										}
										HX_STACK_LINE(606)
										ret1->weak = false;
									}
									HX_STACK_LINE(606)
									ret1->_immutable = immutable;
									HX_STACK_LINE(606)
									{
										HX_STACK_LINE(606)
										ret1->x = (int)57;
										HX_STACK_LINE(606)
										ret1->y = 74.5;
										HX_STACK_LINE(606)
										{
										}
										HX_STACK_LINE(606)
										{
										}
									}
									HX_STACK_LINE(606)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(606)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(606)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(606)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(606)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(606)
						{
							HX_STACK_LINE(606)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(606)
							if ((_this->_immutable)){
								HX_STACK_LINE(606)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(606)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(606)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(606)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",606);
								{
									HX_STACK_LINE(606)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(606)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(606)
									{
										HX_STACK_LINE(606)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(606)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(606)
											_this->_validate();
										}
									}
									HX_STACK_LINE(606)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",606);
								{
									HX_STACK_LINE(606)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(606)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(606)
									{
										HX_STACK_LINE(606)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(606)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(606)
											_this->_validate();
										}
									}
									HX_STACK_LINE(606)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(606)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)57)) && bool((_Function_3_2::Block(ret) == 74.5))))))){
							HX_STACK_LINE(606)
							{
								HX_STACK_LINE(606)
								ret->zpp_inner->x = (int)57;
								HX_STACK_LINE(606)
								ret->zpp_inner->y = 74.5;
								HX_STACK_LINE(606)
								{
								}
								HX_STACK_LINE(606)
								{
								}
							}
							HX_STACK_LINE(606)
							{
								HX_STACK_LINE(606)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(606)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(606)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(606)
						ret;
					}
					HX_STACK_LINE(606)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(606)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(605)
		::nape::shape::Polygon s26 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_144::Block()).Add(_Function_1_145::Block()).Add(_Function_1_146::Block())),mat7,filt7);		HX_STACK_VAR(s26,"s26");
		HX_STACK_LINE(610)
		{
			HX_STACK_LINE(610)
			{
				HX_STACK_LINE(610)
				s26->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(610)
				if (((((  (((s26->zpp_inner->body != null()))) ? ::nape::phys::Body(s26->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body5))){
					HX_STACK_LINE(610)
					if (((s26->zpp_inner->body != null()))){
						HX_STACK_LINE(610)
						((  (((s26->zpp_inner->body != null()))) ? ::nape::phys::Body(s26->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s26);
					}
					HX_STACK_LINE(610)
					if (((body5 != null()))){
						HX_STACK_LINE(610)
						::nape::shape::ShapeList _this = body5->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(610)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(610)
							_this->push(s26);
						}
						else{
							HX_STACK_LINE(610)
							_this->unshift(s26);
						}
					}
				}
			}
			HX_STACK_LINE(610)
			if (((s26->zpp_inner->body != null()))){
				HX_STACK_LINE(610)
				s26->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(610)
				Dynamic();
			}
		}
		HX_STACK_LINE(611)
		{
			HX_STACK_LINE(611)
			{
				HX_STACK_LINE(611)
				s26->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(611)
				s26->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(611)
				s26->zpp_inner->wake();
			}
			HX_STACK_LINE(611)
			s26->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(612)
		{
			HX_STACK_LINE(612)
			{
				HX_STACK_LINE(612)
				s26->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(612)
				s26->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(612)
				{
				}
				HX_STACK_LINE(612)
				s26->zpp_inner->wake();
			}
			HX_STACK_LINE(612)
			s26->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(613)
		{
			HX_STACK_LINE(613)
			{
				HX_STACK_LINE(613)
				if (((prop7 == null()))){
					HX_STACK_LINE(613)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(613)
				s26->zpp_inner->setFluid(prop7->zpp_inner);
			}
			HX_STACK_LINE(613)
			{
				HX_STACK_LINE(613)
				s26->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(613)
				if (((s26->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(613)
					s26->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(613)
				s26->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(614)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s26){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",614);
					{
						HX_STACK_LINE(614)
						if (((s26->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(614)
							s26->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(614)
						return s26->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(614)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s26);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(614)
			{
				HX_STACK_LINE(614)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(614)
				while(((_g < _g1->length))){
					HX_STACK_LINE(614)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(614)
					++(_g);
					HX_STACK_LINE(614)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(614)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(614)
						continue;
					}
					HX_STACK_LINE(614)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(614)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(614)
					{
						HX_STACK_LINE(614)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(614)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(614)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(614)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_147{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
				{
					HX_STACK_LINE(617)
					{
					}
					HX_STACK_LINE(617)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(617)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(617)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(617)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(617)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(617)
						ret->zpp_pool = null();
						HX_STACK_LINE(617)
						ret->zpp_disp = false;
						HX_STACK_LINE(617)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(617)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(617)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(617)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(617)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(617)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(617)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(617)
											ret1->next = null();
										}
										HX_STACK_LINE(617)
										ret1->weak = false;
									}
									HX_STACK_LINE(617)
									ret1->_immutable = immutable;
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										ret1->x = 45.5;
										HX_STACK_LINE(617)
										ret1->y = (int)150;
										HX_STACK_LINE(617)
										{
										}
										HX_STACK_LINE(617)
										{
										}
									}
									HX_STACK_LINE(617)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(617)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(617)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(617)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(617)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(617)
						{
							HX_STACK_LINE(617)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(617)
							if ((_this->_immutable)){
								HX_STACK_LINE(617)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(617)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(617)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(617)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(617)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(617)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(617)
											_this->_validate();
										}
									}
									HX_STACK_LINE(617)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(617)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(617)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(617)
											_this->_validate();
										}
									}
									HX_STACK_LINE(617)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(617)
						if ((!(((bool((_Function_3_1::Block(ret) == 45.5)) && bool((_Function_3_2::Block(ret) == (int)150))))))){
							HX_STACK_LINE(617)
							{
								HX_STACK_LINE(617)
								ret->zpp_inner->x = 45.5;
								HX_STACK_LINE(617)
								ret->zpp_inner->y = (int)150;
								HX_STACK_LINE(617)
								{
								}
								HX_STACK_LINE(617)
								{
								}
							}
							HX_STACK_LINE(617)
							{
								HX_STACK_LINE(617)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(617)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(617)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(617)
						ret;
					}
					HX_STACK_LINE(617)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(617)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_148{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
				{
					HX_STACK_LINE(617)
					{
					}
					HX_STACK_LINE(617)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(617)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(617)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(617)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(617)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(617)
						ret->zpp_pool = null();
						HX_STACK_LINE(617)
						ret->zpp_disp = false;
						HX_STACK_LINE(617)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(617)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(617)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(617)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(617)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(617)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(617)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(617)
											ret1->next = null();
										}
										HX_STACK_LINE(617)
										ret1->weak = false;
									}
									HX_STACK_LINE(617)
									ret1->_immutable = immutable;
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										ret1->x = 53.5;
										HX_STACK_LINE(617)
										ret1->y = (int)145;
										HX_STACK_LINE(617)
										{
										}
										HX_STACK_LINE(617)
										{
										}
									}
									HX_STACK_LINE(617)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(617)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(617)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(617)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(617)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(617)
						{
							HX_STACK_LINE(617)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(617)
							if ((_this->_immutable)){
								HX_STACK_LINE(617)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(617)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(617)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(617)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(617)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(617)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(617)
											_this->_validate();
										}
									}
									HX_STACK_LINE(617)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(617)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(617)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(617)
											_this->_validate();
										}
									}
									HX_STACK_LINE(617)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(617)
						if ((!(((bool((_Function_3_1::Block(ret) == 53.5)) && bool((_Function_3_2::Block(ret) == (int)145))))))){
							HX_STACK_LINE(617)
							{
								HX_STACK_LINE(617)
								ret->zpp_inner->x = 53.5;
								HX_STACK_LINE(617)
								ret->zpp_inner->y = (int)145;
								HX_STACK_LINE(617)
								{
								}
								HX_STACK_LINE(617)
								{
								}
							}
							HX_STACK_LINE(617)
							{
								HX_STACK_LINE(617)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(617)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(617)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(617)
						ret;
					}
					HX_STACK_LINE(617)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(617)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_149{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
				{
					HX_STACK_LINE(617)
					{
					}
					HX_STACK_LINE(617)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(617)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(617)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(617)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(617)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(617)
						ret->zpp_pool = null();
						HX_STACK_LINE(617)
						ret->zpp_disp = false;
						HX_STACK_LINE(617)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(617)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(617)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(617)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(617)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(617)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(617)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(617)
											ret1->next = null();
										}
										HX_STACK_LINE(617)
										ret1->weak = false;
									}
									HX_STACK_LINE(617)
									ret1->_immutable = immutable;
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										ret1->x = 149.5;
										HX_STACK_LINE(617)
										ret1->y = (int)62;
										HX_STACK_LINE(617)
										{
										}
										HX_STACK_LINE(617)
										{
										}
									}
									HX_STACK_LINE(617)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(617)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(617)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(617)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(617)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(617)
						{
							HX_STACK_LINE(617)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(617)
							if ((_this->_immutable)){
								HX_STACK_LINE(617)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(617)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(617)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(617)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(617)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(617)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(617)
											_this->_validate();
										}
									}
									HX_STACK_LINE(617)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(617)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(617)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(617)
											_this->_validate();
										}
									}
									HX_STACK_LINE(617)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(617)
						if ((!(((bool((_Function_3_1::Block(ret) == 149.5)) && bool((_Function_3_2::Block(ret) == (int)62))))))){
							HX_STACK_LINE(617)
							{
								HX_STACK_LINE(617)
								ret->zpp_inner->x = 149.5;
								HX_STACK_LINE(617)
								ret->zpp_inner->y = (int)62;
								HX_STACK_LINE(617)
								{
								}
								HX_STACK_LINE(617)
								{
								}
							}
							HX_STACK_LINE(617)
							{
								HX_STACK_LINE(617)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(617)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(617)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(617)
						ret;
					}
					HX_STACK_LINE(617)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(617)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_150{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
				{
					HX_STACK_LINE(617)
					{
					}
					HX_STACK_LINE(617)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(617)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(617)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(617)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(617)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(617)
						ret->zpp_pool = null();
						HX_STACK_LINE(617)
						ret->zpp_disp = false;
						HX_STACK_LINE(617)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(617)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(617)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(617)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(617)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(617)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(617)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(617)
											ret1->next = null();
										}
										HX_STACK_LINE(617)
										ret1->weak = false;
									}
									HX_STACK_LINE(617)
									ret1->_immutable = immutable;
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										ret1->x = (int)135;
										HX_STACK_LINE(617)
										ret1->y = 60.5;
										HX_STACK_LINE(617)
										{
										}
										HX_STACK_LINE(617)
										{
										}
									}
									HX_STACK_LINE(617)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(617)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(617)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(617)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(617)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(617)
						{
							HX_STACK_LINE(617)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(617)
							if ((_this->_immutable)){
								HX_STACK_LINE(617)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(617)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(617)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(617)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(617)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(617)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(617)
											_this->_validate();
										}
									}
									HX_STACK_LINE(617)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(617)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(617)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(617)
											_this->_validate();
										}
									}
									HX_STACK_LINE(617)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(617)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)135)) && bool((_Function_3_2::Block(ret) == 60.5))))))){
							HX_STACK_LINE(617)
							{
								HX_STACK_LINE(617)
								ret->zpp_inner->x = (int)135;
								HX_STACK_LINE(617)
								ret->zpp_inner->y = 60.5;
								HX_STACK_LINE(617)
								{
								}
								HX_STACK_LINE(617)
								{
								}
							}
							HX_STACK_LINE(617)
							{
								HX_STACK_LINE(617)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(617)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(617)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(617)
						ret;
					}
					HX_STACK_LINE(617)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(617)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_151{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
				{
					HX_STACK_LINE(617)
					{
					}
					HX_STACK_LINE(617)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(617)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(617)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(617)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(617)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(617)
						ret->zpp_pool = null();
						HX_STACK_LINE(617)
						ret->zpp_disp = false;
						HX_STACK_LINE(617)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(617)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(617)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(617)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(617)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(617)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(617)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(617)
											ret1->next = null();
										}
										HX_STACK_LINE(617)
										ret1->weak = false;
									}
									HX_STACK_LINE(617)
									ret1->_immutable = immutable;
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										ret1->x = (int)57;
										HX_STACK_LINE(617)
										ret1->y = 74.5;
										HX_STACK_LINE(617)
										{
										}
										HX_STACK_LINE(617)
										{
										}
									}
									HX_STACK_LINE(617)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(617)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(617)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(617)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(617)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(617)
						{
							HX_STACK_LINE(617)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(617)
							if ((_this->_immutable)){
								HX_STACK_LINE(617)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(617)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(617)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(617)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(617)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(617)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(617)
											_this->_validate();
										}
									}
									HX_STACK_LINE(617)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(617)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(617)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(617)
											_this->_validate();
										}
									}
									HX_STACK_LINE(617)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(617)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)57)) && bool((_Function_3_2::Block(ret) == 74.5))))))){
							HX_STACK_LINE(617)
							{
								HX_STACK_LINE(617)
								ret->zpp_inner->x = (int)57;
								HX_STACK_LINE(617)
								ret->zpp_inner->y = 74.5;
								HX_STACK_LINE(617)
								{
								}
								HX_STACK_LINE(617)
								{
								}
							}
							HX_STACK_LINE(617)
							{
								HX_STACK_LINE(617)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(617)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(617)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(617)
						ret;
					}
					HX_STACK_LINE(617)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(617)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_152{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
				{
					HX_STACK_LINE(617)
					{
					}
					HX_STACK_LINE(617)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(617)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(617)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(617)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(617)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(617)
						ret->zpp_pool = null();
						HX_STACK_LINE(617)
						ret->zpp_disp = false;
						HX_STACK_LINE(617)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(617)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(617)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(617)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(617)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(617)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(617)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(617)
											ret1->next = null();
										}
										HX_STACK_LINE(617)
										ret1->weak = false;
									}
									HX_STACK_LINE(617)
									ret1->_immutable = immutable;
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										ret1->x = (int)46;
										HX_STACK_LINE(617)
										ret1->y = 92.5;
										HX_STACK_LINE(617)
										{
										}
										HX_STACK_LINE(617)
										{
										}
									}
									HX_STACK_LINE(617)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(617)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(617)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(617)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(617)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(617)
						{
							HX_STACK_LINE(617)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(617)
							if ((_this->_immutable)){
								HX_STACK_LINE(617)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(617)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(617)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(617)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(617)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(617)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(617)
											_this->_validate();
										}
									}
									HX_STACK_LINE(617)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(617)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(617)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(617)
											_this->_validate();
										}
									}
									HX_STACK_LINE(617)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(617)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)46)) && bool((_Function_3_2::Block(ret) == 92.5))))))){
							HX_STACK_LINE(617)
							{
								HX_STACK_LINE(617)
								ret->zpp_inner->x = (int)46;
								HX_STACK_LINE(617)
								ret->zpp_inner->y = 92.5;
								HX_STACK_LINE(617)
								{
								}
								HX_STACK_LINE(617)
								{
								}
							}
							HX_STACK_LINE(617)
							{
								HX_STACK_LINE(617)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(617)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(617)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(617)
						ret;
					}
					HX_STACK_LINE(617)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(617)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_153{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
				{
					HX_STACK_LINE(617)
					{
					}
					HX_STACK_LINE(617)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(617)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(617)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(617)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(617)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(617)
						ret->zpp_pool = null();
						HX_STACK_LINE(617)
						ret->zpp_disp = false;
						HX_STACK_LINE(617)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(617)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(617)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(617)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(617)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(617)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(617)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(617)
											ret1->next = null();
										}
										HX_STACK_LINE(617)
										ret1->weak = false;
									}
									HX_STACK_LINE(617)
									ret1->_immutable = immutable;
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										ret1->x = 44.5;
										HX_STACK_LINE(617)
										ret1->y = (int)135;
										HX_STACK_LINE(617)
										{
										}
										HX_STACK_LINE(617)
										{
										}
									}
									HX_STACK_LINE(617)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(617)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(617)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(617)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(617)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(617)
						{
							HX_STACK_LINE(617)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(617)
							if ((_this->_immutable)){
								HX_STACK_LINE(617)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(617)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(617)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(617)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(617)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(617)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(617)
											_this->_validate();
										}
									}
									HX_STACK_LINE(617)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",617);
								{
									HX_STACK_LINE(617)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(617)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(617)
									{
										HX_STACK_LINE(617)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(617)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(617)
											_this->_validate();
										}
									}
									HX_STACK_LINE(617)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(617)
						if ((!(((bool((_Function_3_1::Block(ret) == 44.5)) && bool((_Function_3_2::Block(ret) == (int)135))))))){
							HX_STACK_LINE(617)
							{
								HX_STACK_LINE(617)
								ret->zpp_inner->x = 44.5;
								HX_STACK_LINE(617)
								ret->zpp_inner->y = (int)135;
								HX_STACK_LINE(617)
								{
								}
								HX_STACK_LINE(617)
								{
								}
							}
							HX_STACK_LINE(617)
							{
								HX_STACK_LINE(617)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(617)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(617)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(617)
						ret;
					}
					HX_STACK_LINE(617)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(617)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(616)
		::nape::shape::Polygon s27 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_147::Block()).Add(_Function_1_148::Block()).Add(_Function_1_149::Block()).Add(_Function_1_150::Block()).Add(_Function_1_151::Block()).Add(_Function_1_152::Block()).Add(_Function_1_153::Block())),mat7,filt7);		HX_STACK_VAR(s27,"s27");
		HX_STACK_LINE(621)
		{
			HX_STACK_LINE(621)
			{
				HX_STACK_LINE(621)
				s27->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(621)
				if (((((  (((s27->zpp_inner->body != null()))) ? ::nape::phys::Body(s27->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body5))){
					HX_STACK_LINE(621)
					if (((s27->zpp_inner->body != null()))){
						HX_STACK_LINE(621)
						((  (((s27->zpp_inner->body != null()))) ? ::nape::phys::Body(s27->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s27);
					}
					HX_STACK_LINE(621)
					if (((body5 != null()))){
						HX_STACK_LINE(621)
						::nape::shape::ShapeList _this = body5->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(621)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(621)
							_this->push(s27);
						}
						else{
							HX_STACK_LINE(621)
							_this->unshift(s27);
						}
					}
				}
			}
			HX_STACK_LINE(621)
			if (((s27->zpp_inner->body != null()))){
				HX_STACK_LINE(621)
				s27->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(621)
				Dynamic();
			}
		}
		HX_STACK_LINE(622)
		{
			HX_STACK_LINE(622)
			{
				HX_STACK_LINE(622)
				s27->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(622)
				s27->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(622)
				s27->zpp_inner->wake();
			}
			HX_STACK_LINE(622)
			s27->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(623)
		{
			HX_STACK_LINE(623)
			{
				HX_STACK_LINE(623)
				s27->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(623)
				s27->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(623)
				{
				}
				HX_STACK_LINE(623)
				s27->zpp_inner->wake();
			}
			HX_STACK_LINE(623)
			s27->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(624)
		{
			HX_STACK_LINE(624)
			{
				HX_STACK_LINE(624)
				if (((prop7 == null()))){
					HX_STACK_LINE(624)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(624)
				s27->zpp_inner->setFluid(prop7->zpp_inner);
			}
			HX_STACK_LINE(624)
			{
				HX_STACK_LINE(624)
				s27->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(624)
				if (((s27->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(624)
					s27->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(624)
				s27->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(625)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s27){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",625);
					{
						HX_STACK_LINE(625)
						if (((s27->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(625)
							s27->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(625)
						return s27->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(625)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s27);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(625)
			{
				HX_STACK_LINE(625)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(625)
				while(((_g < _g1->length))){
					HX_STACK_LINE(625)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(625)
					++(_g);
					HX_STACK_LINE(625)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(625)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(625)
						continue;
					}
					HX_STACK_LINE(625)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(625)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(625)
					{
						HX_STACK_LINE(625)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(625)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(625)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(625)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_154{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",628);
				{
					HX_STACK_LINE(628)
					{
					}
					HX_STACK_LINE(628)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(628)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(628)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(628)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(628)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(628)
						ret->zpp_pool = null();
						HX_STACK_LINE(628)
						ret->zpp_disp = false;
						HX_STACK_LINE(628)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(628)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(628)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",628);
								{
									HX_STACK_LINE(628)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(628)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(628)
									{
										HX_STACK_LINE(628)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(628)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(628)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(628)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(628)
											ret1->next = null();
										}
										HX_STACK_LINE(628)
										ret1->weak = false;
									}
									HX_STACK_LINE(628)
									ret1->_immutable = immutable;
									HX_STACK_LINE(628)
									{
										HX_STACK_LINE(628)
										ret1->x = (int)23;
										HX_STACK_LINE(628)
										ret1->y = 31.5;
										HX_STACK_LINE(628)
										{
										}
										HX_STACK_LINE(628)
										{
										}
									}
									HX_STACK_LINE(628)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(628)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(628)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(628)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(628)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(628)
						{
							HX_STACK_LINE(628)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(628)
							if ((_this->_immutable)){
								HX_STACK_LINE(628)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(628)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(628)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(628)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",628);
								{
									HX_STACK_LINE(628)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(628)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(628)
									{
										HX_STACK_LINE(628)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(628)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(628)
											_this->_validate();
										}
									}
									HX_STACK_LINE(628)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",628);
								{
									HX_STACK_LINE(628)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(628)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(628)
									{
										HX_STACK_LINE(628)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(628)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(628)
											_this->_validate();
										}
									}
									HX_STACK_LINE(628)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(628)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)23)) && bool((_Function_3_2::Block(ret) == 31.5))))))){
							HX_STACK_LINE(628)
							{
								HX_STACK_LINE(628)
								ret->zpp_inner->x = (int)23;
								HX_STACK_LINE(628)
								ret->zpp_inner->y = 31.5;
								HX_STACK_LINE(628)
								{
								}
								HX_STACK_LINE(628)
								{
								}
							}
							HX_STACK_LINE(628)
							{
								HX_STACK_LINE(628)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(628)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(628)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(628)
						ret;
					}
					HX_STACK_LINE(628)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(628)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_155{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",628);
				{
					HX_STACK_LINE(628)
					{
					}
					HX_STACK_LINE(628)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(628)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(628)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(628)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(628)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(628)
						ret->zpp_pool = null();
						HX_STACK_LINE(628)
						ret->zpp_disp = false;
						HX_STACK_LINE(628)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(628)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(628)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",628);
								{
									HX_STACK_LINE(628)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(628)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(628)
									{
										HX_STACK_LINE(628)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(628)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(628)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(628)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(628)
											ret1->next = null();
										}
										HX_STACK_LINE(628)
										ret1->weak = false;
									}
									HX_STACK_LINE(628)
									ret1->_immutable = immutable;
									HX_STACK_LINE(628)
									{
										HX_STACK_LINE(628)
										ret1->x = 58.5;
										HX_STACK_LINE(628)
										ret1->y = (int)54;
										HX_STACK_LINE(628)
										{
										}
										HX_STACK_LINE(628)
										{
										}
									}
									HX_STACK_LINE(628)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(628)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(628)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(628)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(628)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(628)
						{
							HX_STACK_LINE(628)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(628)
							if ((_this->_immutable)){
								HX_STACK_LINE(628)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(628)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(628)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(628)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",628);
								{
									HX_STACK_LINE(628)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(628)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(628)
									{
										HX_STACK_LINE(628)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(628)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(628)
											_this->_validate();
										}
									}
									HX_STACK_LINE(628)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",628);
								{
									HX_STACK_LINE(628)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(628)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(628)
									{
										HX_STACK_LINE(628)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(628)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(628)
											_this->_validate();
										}
									}
									HX_STACK_LINE(628)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(628)
						if ((!(((bool((_Function_3_1::Block(ret) == 58.5)) && bool((_Function_3_2::Block(ret) == (int)54))))))){
							HX_STACK_LINE(628)
							{
								HX_STACK_LINE(628)
								ret->zpp_inner->x = 58.5;
								HX_STACK_LINE(628)
								ret->zpp_inner->y = (int)54;
								HX_STACK_LINE(628)
								{
								}
								HX_STACK_LINE(628)
								{
								}
							}
							HX_STACK_LINE(628)
							{
								HX_STACK_LINE(628)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(628)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(628)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(628)
						ret;
					}
					HX_STACK_LINE(628)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(628)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_156{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",628);
				{
					HX_STACK_LINE(628)
					{
					}
					HX_STACK_LINE(628)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(628)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(628)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(628)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(628)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(628)
						ret->zpp_pool = null();
						HX_STACK_LINE(628)
						ret->zpp_disp = false;
						HX_STACK_LINE(628)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(628)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(628)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",628);
								{
									HX_STACK_LINE(628)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(628)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(628)
									{
										HX_STACK_LINE(628)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(628)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(628)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(628)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(628)
											ret1->next = null();
										}
										HX_STACK_LINE(628)
										ret1->weak = false;
									}
									HX_STACK_LINE(628)
									ret1->_immutable = immutable;
									HX_STACK_LINE(628)
									{
										HX_STACK_LINE(628)
										ret1->x = (int)113;
										HX_STACK_LINE(628)
										ret1->y = 26.5;
										HX_STACK_LINE(628)
										{
										}
										HX_STACK_LINE(628)
										{
										}
									}
									HX_STACK_LINE(628)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(628)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(628)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(628)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(628)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(628)
						{
							HX_STACK_LINE(628)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(628)
							if ((_this->_immutable)){
								HX_STACK_LINE(628)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(628)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(628)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(628)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",628);
								{
									HX_STACK_LINE(628)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(628)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(628)
									{
										HX_STACK_LINE(628)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(628)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(628)
											_this->_validate();
										}
									}
									HX_STACK_LINE(628)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",628);
								{
									HX_STACK_LINE(628)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(628)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(628)
									{
										HX_STACK_LINE(628)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(628)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(628)
											_this->_validate();
										}
									}
									HX_STACK_LINE(628)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(628)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)113)) && bool((_Function_3_2::Block(ret) == 26.5))))))){
							HX_STACK_LINE(628)
							{
								HX_STACK_LINE(628)
								ret->zpp_inner->x = (int)113;
								HX_STACK_LINE(628)
								ret->zpp_inner->y = 26.5;
								HX_STACK_LINE(628)
								{
								}
								HX_STACK_LINE(628)
								{
								}
							}
							HX_STACK_LINE(628)
							{
								HX_STACK_LINE(628)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(628)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(628)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(628)
						ret;
					}
					HX_STACK_LINE(628)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(628)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(627)
		::nape::shape::Polygon s28 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_154::Block()).Add(_Function_1_155::Block()).Add(_Function_1_156::Block())),mat7,filt7);		HX_STACK_VAR(s28,"s28");
		HX_STACK_LINE(632)
		{
			HX_STACK_LINE(632)
			{
				HX_STACK_LINE(632)
				s28->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(632)
				if (((((  (((s28->zpp_inner->body != null()))) ? ::nape::phys::Body(s28->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body5))){
					HX_STACK_LINE(632)
					if (((s28->zpp_inner->body != null()))){
						HX_STACK_LINE(632)
						((  (((s28->zpp_inner->body != null()))) ? ::nape::phys::Body(s28->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s28);
					}
					HX_STACK_LINE(632)
					if (((body5 != null()))){
						HX_STACK_LINE(632)
						::nape::shape::ShapeList _this = body5->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(632)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(632)
							_this->push(s28);
						}
						else{
							HX_STACK_LINE(632)
							_this->unshift(s28);
						}
					}
				}
			}
			HX_STACK_LINE(632)
			if (((s28->zpp_inner->body != null()))){
				HX_STACK_LINE(632)
				s28->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(632)
				Dynamic();
			}
		}
		HX_STACK_LINE(633)
		{
			HX_STACK_LINE(633)
			{
				HX_STACK_LINE(633)
				s28->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(633)
				s28->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(633)
				s28->zpp_inner->wake();
			}
			HX_STACK_LINE(633)
			s28->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(634)
		{
			HX_STACK_LINE(634)
			{
				HX_STACK_LINE(634)
				s28->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(634)
				s28->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(634)
				{
				}
				HX_STACK_LINE(634)
				s28->zpp_inner->wake();
			}
			HX_STACK_LINE(634)
			s28->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(635)
		{
			HX_STACK_LINE(635)
			{
				HX_STACK_LINE(635)
				if (((prop7 == null()))){
					HX_STACK_LINE(635)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(635)
				s28->zpp_inner->setFluid(prop7->zpp_inner);
			}
			HX_STACK_LINE(635)
			{
				HX_STACK_LINE(635)
				s28->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(635)
				if (((s28->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(635)
					s28->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(635)
				s28->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(636)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s28){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",636);
					{
						HX_STACK_LINE(636)
						if (((s28->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(636)
							s28->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(636)
						return s28->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(636)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s28);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(636)
			{
				HX_STACK_LINE(636)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(636)
				while(((_g < _g1->length))){
					HX_STACK_LINE(636)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(636)
					++(_g);
					HX_STACK_LINE(636)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(636)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(636)
						continue;
					}
					HX_STACK_LINE(636)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(636)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(636)
					{
						HX_STACK_LINE(636)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(636)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(636)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(636)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_157{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",639);
				{
					HX_STACK_LINE(639)
					{
					}
					HX_STACK_LINE(639)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(639)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(639)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(639)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(639)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(639)
						ret->zpp_pool = null();
						HX_STACK_LINE(639)
						ret->zpp_disp = false;
						HX_STACK_LINE(639)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(639)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(639)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",639);
								{
									HX_STACK_LINE(639)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(639)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(639)
									{
										HX_STACK_LINE(639)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(639)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(639)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(639)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(639)
											ret1->next = null();
										}
										HX_STACK_LINE(639)
										ret1->weak = false;
									}
									HX_STACK_LINE(639)
									ret1->_immutable = immutable;
									HX_STACK_LINE(639)
									{
										HX_STACK_LINE(639)
										ret1->x = (int)74;
										HX_STACK_LINE(639)
										ret1->y = 158.5;
										HX_STACK_LINE(639)
										{
										}
										HX_STACK_LINE(639)
										{
										}
									}
									HX_STACK_LINE(639)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(639)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(639)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(639)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(639)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(639)
						{
							HX_STACK_LINE(639)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(639)
							if ((_this->_immutable)){
								HX_STACK_LINE(639)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(639)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(639)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(639)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",639);
								{
									HX_STACK_LINE(639)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(639)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(639)
									{
										HX_STACK_LINE(639)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(639)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(639)
											_this->_validate();
										}
									}
									HX_STACK_LINE(639)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",639);
								{
									HX_STACK_LINE(639)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(639)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(639)
									{
										HX_STACK_LINE(639)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(639)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(639)
											_this->_validate();
										}
									}
									HX_STACK_LINE(639)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(639)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)74)) && bool((_Function_3_2::Block(ret) == 158.5))))))){
							HX_STACK_LINE(639)
							{
								HX_STACK_LINE(639)
								ret->zpp_inner->x = (int)74;
								HX_STACK_LINE(639)
								ret->zpp_inner->y = 158.5;
								HX_STACK_LINE(639)
								{
								}
								HX_STACK_LINE(639)
								{
								}
							}
							HX_STACK_LINE(639)
							{
								HX_STACK_LINE(639)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(639)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(639)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(639)
						ret;
					}
					HX_STACK_LINE(639)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(639)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_158{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",639);
				{
					HX_STACK_LINE(639)
					{
					}
					HX_STACK_LINE(639)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(639)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(639)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(639)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(639)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(639)
						ret->zpp_pool = null();
						HX_STACK_LINE(639)
						ret->zpp_disp = false;
						HX_STACK_LINE(639)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(639)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(639)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",639);
								{
									HX_STACK_LINE(639)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(639)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(639)
									{
										HX_STACK_LINE(639)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(639)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(639)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(639)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(639)
											ret1->next = null();
										}
										HX_STACK_LINE(639)
										ret1->weak = false;
									}
									HX_STACK_LINE(639)
									ret1->_immutable = immutable;
									HX_STACK_LINE(639)
									{
										HX_STACK_LINE(639)
										ret1->x = (int)104;
										HX_STACK_LINE(639)
										ret1->y = 159.5;
										HX_STACK_LINE(639)
										{
										}
										HX_STACK_LINE(639)
										{
										}
									}
									HX_STACK_LINE(639)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(639)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(639)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(639)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(639)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(639)
						{
							HX_STACK_LINE(639)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(639)
							if ((_this->_immutable)){
								HX_STACK_LINE(639)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(639)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(639)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(639)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",639);
								{
									HX_STACK_LINE(639)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(639)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(639)
									{
										HX_STACK_LINE(639)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(639)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(639)
											_this->_validate();
										}
									}
									HX_STACK_LINE(639)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",639);
								{
									HX_STACK_LINE(639)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(639)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(639)
									{
										HX_STACK_LINE(639)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(639)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(639)
											_this->_validate();
										}
									}
									HX_STACK_LINE(639)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(639)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)104)) && bool((_Function_3_2::Block(ret) == 159.5))))))){
							HX_STACK_LINE(639)
							{
								HX_STACK_LINE(639)
								ret->zpp_inner->x = (int)104;
								HX_STACK_LINE(639)
								ret->zpp_inner->y = 159.5;
								HX_STACK_LINE(639)
								{
								}
								HX_STACK_LINE(639)
								{
								}
							}
							HX_STACK_LINE(639)
							{
								HX_STACK_LINE(639)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(639)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(639)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(639)
						ret;
					}
					HX_STACK_LINE(639)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(639)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_159{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",639);
				{
					HX_STACK_LINE(639)
					{
					}
					HX_STACK_LINE(639)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(639)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(639)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(639)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(639)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(639)
						ret->zpp_pool = null();
						HX_STACK_LINE(639)
						ret->zpp_disp = false;
						HX_STACK_LINE(639)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(639)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(639)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",639);
								{
									HX_STACK_LINE(639)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(639)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(639)
									{
										HX_STACK_LINE(639)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(639)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(639)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(639)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(639)
											ret1->next = null();
										}
										HX_STACK_LINE(639)
										ret1->weak = false;
									}
									HX_STACK_LINE(639)
									ret1->_immutable = immutable;
									HX_STACK_LINE(639)
									{
										HX_STACK_LINE(639)
										ret1->x = 149.5;
										HX_STACK_LINE(639)
										ret1->y = (int)62;
										HX_STACK_LINE(639)
										{
										}
										HX_STACK_LINE(639)
										{
										}
									}
									HX_STACK_LINE(639)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(639)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(639)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(639)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(639)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(639)
						{
							HX_STACK_LINE(639)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(639)
							if ((_this->_immutable)){
								HX_STACK_LINE(639)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(639)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(639)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(639)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",639);
								{
									HX_STACK_LINE(639)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(639)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(639)
									{
										HX_STACK_LINE(639)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(639)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(639)
											_this->_validate();
										}
									}
									HX_STACK_LINE(639)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",639);
								{
									HX_STACK_LINE(639)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(639)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(639)
									{
										HX_STACK_LINE(639)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(639)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(639)
											_this->_validate();
										}
									}
									HX_STACK_LINE(639)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(639)
						if ((!(((bool((_Function_3_1::Block(ret) == 149.5)) && bool((_Function_3_2::Block(ret) == (int)62))))))){
							HX_STACK_LINE(639)
							{
								HX_STACK_LINE(639)
								ret->zpp_inner->x = 149.5;
								HX_STACK_LINE(639)
								ret->zpp_inner->y = (int)62;
								HX_STACK_LINE(639)
								{
								}
								HX_STACK_LINE(639)
								{
								}
							}
							HX_STACK_LINE(639)
							{
								HX_STACK_LINE(639)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(639)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(639)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(639)
						ret;
					}
					HX_STACK_LINE(639)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(639)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_160{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",639);
				{
					HX_STACK_LINE(639)
					{
					}
					HX_STACK_LINE(639)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(639)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(639)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(639)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(639)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(639)
						ret->zpp_pool = null();
						HX_STACK_LINE(639)
						ret->zpp_disp = false;
						HX_STACK_LINE(639)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(639)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(639)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",639);
								{
									HX_STACK_LINE(639)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(639)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(639)
									{
										HX_STACK_LINE(639)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(639)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(639)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(639)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(639)
											ret1->next = null();
										}
										HX_STACK_LINE(639)
										ret1->weak = false;
									}
									HX_STACK_LINE(639)
									ret1->_immutable = immutable;
									HX_STACK_LINE(639)
									{
										HX_STACK_LINE(639)
										ret1->x = 53.5;
										HX_STACK_LINE(639)
										ret1->y = (int)145;
										HX_STACK_LINE(639)
										{
										}
										HX_STACK_LINE(639)
										{
										}
									}
									HX_STACK_LINE(639)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(639)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(639)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(639)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(639)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(639)
						{
							HX_STACK_LINE(639)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(639)
							if ((_this->_immutable)){
								HX_STACK_LINE(639)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(639)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(639)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(639)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",639);
								{
									HX_STACK_LINE(639)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(639)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(639)
									{
										HX_STACK_LINE(639)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(639)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(639)
											_this->_validate();
										}
									}
									HX_STACK_LINE(639)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",639);
								{
									HX_STACK_LINE(639)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(639)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(639)
									{
										HX_STACK_LINE(639)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(639)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(639)
											_this->_validate();
										}
									}
									HX_STACK_LINE(639)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(639)
						if ((!(((bool((_Function_3_1::Block(ret) == 53.5)) && bool((_Function_3_2::Block(ret) == (int)145))))))){
							HX_STACK_LINE(639)
							{
								HX_STACK_LINE(639)
								ret->zpp_inner->x = 53.5;
								HX_STACK_LINE(639)
								ret->zpp_inner->y = (int)145;
								HX_STACK_LINE(639)
								{
								}
								HX_STACK_LINE(639)
								{
								}
							}
							HX_STACK_LINE(639)
							{
								HX_STACK_LINE(639)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(639)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(639)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(639)
						ret;
					}
					HX_STACK_LINE(639)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(639)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(638)
		::nape::shape::Polygon s29 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_157::Block()).Add(_Function_1_158::Block()).Add(_Function_1_159::Block()).Add(_Function_1_160::Block())),mat7,filt7);		HX_STACK_VAR(s29,"s29");
		HX_STACK_LINE(643)
		{
			HX_STACK_LINE(643)
			{
				HX_STACK_LINE(643)
				s29->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(643)
				if (((((  (((s29->zpp_inner->body != null()))) ? ::nape::phys::Body(s29->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body5))){
					HX_STACK_LINE(643)
					if (((s29->zpp_inner->body != null()))){
						HX_STACK_LINE(643)
						((  (((s29->zpp_inner->body != null()))) ? ::nape::phys::Body(s29->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s29);
					}
					HX_STACK_LINE(643)
					if (((body5 != null()))){
						HX_STACK_LINE(643)
						::nape::shape::ShapeList _this = body5->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(643)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(643)
							_this->push(s29);
						}
						else{
							HX_STACK_LINE(643)
							_this->unshift(s29);
						}
					}
				}
			}
			HX_STACK_LINE(643)
			if (((s29->zpp_inner->body != null()))){
				HX_STACK_LINE(643)
				s29->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(643)
				Dynamic();
			}
		}
		HX_STACK_LINE(644)
		{
			HX_STACK_LINE(644)
			{
				HX_STACK_LINE(644)
				s29->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(644)
				s29->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(644)
				s29->zpp_inner->wake();
			}
			HX_STACK_LINE(644)
			s29->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(645)
		{
			HX_STACK_LINE(645)
			{
				HX_STACK_LINE(645)
				s29->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(645)
				s29->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(645)
				{
				}
				HX_STACK_LINE(645)
				s29->zpp_inner->wake();
			}
			HX_STACK_LINE(645)
			s29->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(646)
		{
			HX_STACK_LINE(646)
			{
				HX_STACK_LINE(646)
				if (((prop7 == null()))){
					HX_STACK_LINE(646)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(646)
				s29->zpp_inner->setFluid(prop7->zpp_inner);
			}
			HX_STACK_LINE(646)
			{
				HX_STACK_LINE(646)
				s29->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(646)
				if (((s29->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(646)
					s29->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(646)
				s29->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(647)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s29){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",647);
					{
						HX_STACK_LINE(647)
						if (((s29->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(647)
							s29->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(647)
						return s29->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(647)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s29);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(647)
			{
				HX_STACK_LINE(647)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(647)
				while(((_g < _g1->length))){
					HX_STACK_LINE(647)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(647)
					++(_g);
					HX_STACK_LINE(647)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(647)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(647)
						continue;
					}
					HX_STACK_LINE(647)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(647)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(647)
					{
						HX_STACK_LINE(647)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(647)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(647)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(647)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_161{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
				{
					HX_STACK_LINE(650)
					{
					}
					HX_STACK_LINE(650)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(650)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(650)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(650)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(650)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(650)
						ret->zpp_pool = null();
						HX_STACK_LINE(650)
						ret->zpp_disp = false;
						HX_STACK_LINE(650)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(650)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(650)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
								{
									HX_STACK_LINE(650)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(650)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(650)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(650)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(650)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(650)
											ret1->next = null();
										}
										HX_STACK_LINE(650)
										ret1->weak = false;
									}
									HX_STACK_LINE(650)
									ret1->_immutable = immutable;
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										ret1->x = 58.5;
										HX_STACK_LINE(650)
										ret1->y = (int)54;
										HX_STACK_LINE(650)
										{
										}
										HX_STACK_LINE(650)
										{
										}
									}
									HX_STACK_LINE(650)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(650)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(650)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(650)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(650)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(650)
						{
							HX_STACK_LINE(650)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(650)
							if ((_this->_immutable)){
								HX_STACK_LINE(650)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(650)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(650)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(650)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
								{
									HX_STACK_LINE(650)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(650)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(650)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(650)
											_this->_validate();
										}
									}
									HX_STACK_LINE(650)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
								{
									HX_STACK_LINE(650)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(650)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(650)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(650)
											_this->_validate();
										}
									}
									HX_STACK_LINE(650)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(650)
						if ((!(((bool((_Function_3_1::Block(ret) == 58.5)) && bool((_Function_3_2::Block(ret) == (int)54))))))){
							HX_STACK_LINE(650)
							{
								HX_STACK_LINE(650)
								ret->zpp_inner->x = 58.5;
								HX_STACK_LINE(650)
								ret->zpp_inner->y = (int)54;
								HX_STACK_LINE(650)
								{
								}
								HX_STACK_LINE(650)
								{
								}
							}
							HX_STACK_LINE(650)
							{
								HX_STACK_LINE(650)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(650)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(650)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(650)
						ret;
					}
					HX_STACK_LINE(650)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(650)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_162{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
				{
					HX_STACK_LINE(650)
					{
					}
					HX_STACK_LINE(650)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(650)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(650)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(650)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(650)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(650)
						ret->zpp_pool = null();
						HX_STACK_LINE(650)
						ret->zpp_disp = false;
						HX_STACK_LINE(650)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(650)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(650)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
								{
									HX_STACK_LINE(650)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(650)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(650)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(650)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(650)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(650)
											ret1->next = null();
										}
										HX_STACK_LINE(650)
										ret1->weak = false;
									}
									HX_STACK_LINE(650)
									ret1->_immutable = immutable;
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										ret1->x = (int)57;
										HX_STACK_LINE(650)
										ret1->y = 74.5;
										HX_STACK_LINE(650)
										{
										}
										HX_STACK_LINE(650)
										{
										}
									}
									HX_STACK_LINE(650)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(650)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(650)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(650)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(650)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(650)
						{
							HX_STACK_LINE(650)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(650)
							if ((_this->_immutable)){
								HX_STACK_LINE(650)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(650)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(650)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(650)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
								{
									HX_STACK_LINE(650)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(650)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(650)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(650)
											_this->_validate();
										}
									}
									HX_STACK_LINE(650)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
								{
									HX_STACK_LINE(650)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(650)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(650)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(650)
											_this->_validate();
										}
									}
									HX_STACK_LINE(650)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(650)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)57)) && bool((_Function_3_2::Block(ret) == 74.5))))))){
							HX_STACK_LINE(650)
							{
								HX_STACK_LINE(650)
								ret->zpp_inner->x = (int)57;
								HX_STACK_LINE(650)
								ret->zpp_inner->y = 74.5;
								HX_STACK_LINE(650)
								{
								}
								HX_STACK_LINE(650)
								{
								}
							}
							HX_STACK_LINE(650)
							{
								HX_STACK_LINE(650)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(650)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(650)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(650)
						ret;
					}
					HX_STACK_LINE(650)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(650)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_163{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
				{
					HX_STACK_LINE(650)
					{
					}
					HX_STACK_LINE(650)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(650)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(650)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(650)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(650)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(650)
						ret->zpp_pool = null();
						HX_STACK_LINE(650)
						ret->zpp_disp = false;
						HX_STACK_LINE(650)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(650)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(650)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
								{
									HX_STACK_LINE(650)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(650)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(650)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(650)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(650)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(650)
											ret1->next = null();
										}
										HX_STACK_LINE(650)
										ret1->weak = false;
									}
									HX_STACK_LINE(650)
									ret1->_immutable = immutable;
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										ret1->x = (int)135;
										HX_STACK_LINE(650)
										ret1->y = 60.5;
										HX_STACK_LINE(650)
										{
										}
										HX_STACK_LINE(650)
										{
										}
									}
									HX_STACK_LINE(650)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(650)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(650)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(650)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(650)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(650)
						{
							HX_STACK_LINE(650)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(650)
							if ((_this->_immutable)){
								HX_STACK_LINE(650)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(650)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(650)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(650)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
								{
									HX_STACK_LINE(650)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(650)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(650)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(650)
											_this->_validate();
										}
									}
									HX_STACK_LINE(650)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
								{
									HX_STACK_LINE(650)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(650)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(650)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(650)
											_this->_validate();
										}
									}
									HX_STACK_LINE(650)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(650)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)135)) && bool((_Function_3_2::Block(ret) == 60.5))))))){
							HX_STACK_LINE(650)
							{
								HX_STACK_LINE(650)
								ret->zpp_inner->x = (int)135;
								HX_STACK_LINE(650)
								ret->zpp_inner->y = 60.5;
								HX_STACK_LINE(650)
								{
								}
								HX_STACK_LINE(650)
								{
								}
							}
							HX_STACK_LINE(650)
							{
								HX_STACK_LINE(650)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(650)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(650)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(650)
						ret;
					}
					HX_STACK_LINE(650)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(650)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_164{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
				{
					HX_STACK_LINE(650)
					{
					}
					HX_STACK_LINE(650)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(650)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(650)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(650)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(650)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(650)
						ret->zpp_pool = null();
						HX_STACK_LINE(650)
						ret->zpp_disp = false;
						HX_STACK_LINE(650)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(650)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(650)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
								{
									HX_STACK_LINE(650)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(650)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(650)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(650)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(650)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(650)
											ret1->next = null();
										}
										HX_STACK_LINE(650)
										ret1->weak = false;
									}
									HX_STACK_LINE(650)
									ret1->_immutable = immutable;
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										ret1->x = 126.5;
										HX_STACK_LINE(650)
										ret1->y = (int)41;
										HX_STACK_LINE(650)
										{
										}
										HX_STACK_LINE(650)
										{
										}
									}
									HX_STACK_LINE(650)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(650)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(650)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(650)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(650)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(650)
						{
							HX_STACK_LINE(650)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(650)
							if ((_this->_immutable)){
								HX_STACK_LINE(650)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(650)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(650)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(650)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
								{
									HX_STACK_LINE(650)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(650)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(650)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(650)
											_this->_validate();
										}
									}
									HX_STACK_LINE(650)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
								{
									HX_STACK_LINE(650)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(650)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(650)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(650)
											_this->_validate();
										}
									}
									HX_STACK_LINE(650)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(650)
						if ((!(((bool((_Function_3_1::Block(ret) == 126.5)) && bool((_Function_3_2::Block(ret) == (int)41))))))){
							HX_STACK_LINE(650)
							{
								HX_STACK_LINE(650)
								ret->zpp_inner->x = 126.5;
								HX_STACK_LINE(650)
								ret->zpp_inner->y = (int)41;
								HX_STACK_LINE(650)
								{
								}
								HX_STACK_LINE(650)
								{
								}
							}
							HX_STACK_LINE(650)
							{
								HX_STACK_LINE(650)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(650)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(650)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(650)
						ret;
					}
					HX_STACK_LINE(650)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(650)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_165{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
				{
					HX_STACK_LINE(650)
					{
					}
					HX_STACK_LINE(650)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(650)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(650)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(650)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(650)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(650)
						ret->zpp_pool = null();
						HX_STACK_LINE(650)
						ret->zpp_disp = false;
						HX_STACK_LINE(650)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(650)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(650)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
								{
									HX_STACK_LINE(650)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(650)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(650)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(650)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(650)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(650)
											ret1->next = null();
										}
										HX_STACK_LINE(650)
										ret1->weak = false;
									}
									HX_STACK_LINE(650)
									ret1->_immutable = immutable;
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										ret1->x = (int)113;
										HX_STACK_LINE(650)
										ret1->y = 26.5;
										HX_STACK_LINE(650)
										{
										}
										HX_STACK_LINE(650)
										{
										}
									}
									HX_STACK_LINE(650)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(650)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(650)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(650)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(650)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(650)
						{
							HX_STACK_LINE(650)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(650)
							if ((_this->_immutable)){
								HX_STACK_LINE(650)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(650)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(650)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(650)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
								{
									HX_STACK_LINE(650)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(650)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(650)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(650)
											_this->_validate();
										}
									}
									HX_STACK_LINE(650)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",650);
								{
									HX_STACK_LINE(650)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(650)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(650)
									{
										HX_STACK_LINE(650)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(650)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(650)
											_this->_validate();
										}
									}
									HX_STACK_LINE(650)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(650)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)113)) && bool((_Function_3_2::Block(ret) == 26.5))))))){
							HX_STACK_LINE(650)
							{
								HX_STACK_LINE(650)
								ret->zpp_inner->x = (int)113;
								HX_STACK_LINE(650)
								ret->zpp_inner->y = 26.5;
								HX_STACK_LINE(650)
								{
								}
								HX_STACK_LINE(650)
								{
								}
							}
							HX_STACK_LINE(650)
							{
								HX_STACK_LINE(650)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(650)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(650)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(650)
						ret;
					}
					HX_STACK_LINE(650)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(650)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(649)
		::nape::shape::Polygon s30 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_161::Block()).Add(_Function_1_162::Block()).Add(_Function_1_163::Block()).Add(_Function_1_164::Block()).Add(_Function_1_165::Block())),mat7,filt7);		HX_STACK_VAR(s30,"s30");
		HX_STACK_LINE(654)
		{
			HX_STACK_LINE(654)
			{
				HX_STACK_LINE(654)
				s30->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(654)
				if (((((  (((s30->zpp_inner->body != null()))) ? ::nape::phys::Body(s30->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body5))){
					HX_STACK_LINE(654)
					if (((s30->zpp_inner->body != null()))){
						HX_STACK_LINE(654)
						((  (((s30->zpp_inner->body != null()))) ? ::nape::phys::Body(s30->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s30);
					}
					HX_STACK_LINE(654)
					if (((body5 != null()))){
						HX_STACK_LINE(654)
						::nape::shape::ShapeList _this = body5->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(654)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(654)
							_this->push(s30);
						}
						else{
							HX_STACK_LINE(654)
							_this->unshift(s30);
						}
					}
				}
			}
			HX_STACK_LINE(654)
			if (((s30->zpp_inner->body != null()))){
				HX_STACK_LINE(654)
				s30->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(654)
				Dynamic();
			}
		}
		HX_STACK_LINE(655)
		{
			HX_STACK_LINE(655)
			{
				HX_STACK_LINE(655)
				s30->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(655)
				s30->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(655)
				s30->zpp_inner->wake();
			}
			HX_STACK_LINE(655)
			s30->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(656)
		{
			HX_STACK_LINE(656)
			{
				HX_STACK_LINE(656)
				s30->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(656)
				s30->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(656)
				{
				}
				HX_STACK_LINE(656)
				s30->zpp_inner->wake();
			}
			HX_STACK_LINE(656)
			s30->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(657)
		{
			HX_STACK_LINE(657)
			{
				HX_STACK_LINE(657)
				if (((prop7 == null()))){
					HX_STACK_LINE(657)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(657)
				s30->zpp_inner->setFluid(prop7->zpp_inner);
			}
			HX_STACK_LINE(657)
			{
				HX_STACK_LINE(657)
				s30->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(657)
				if (((s30->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(657)
					s30->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(657)
				s30->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(658)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s30){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",658);
					{
						HX_STACK_LINE(658)
						if (((s30->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(658)
							s30->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(658)
						return s30->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(658)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s30);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(658)
			{
				HX_STACK_LINE(658)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(658)
				while(((_g < _g1->length))){
					HX_STACK_LINE(658)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(658)
					++(_g);
					HX_STACK_LINE(658)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(658)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(658)
						continue;
					}
					HX_STACK_LINE(658)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(658)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(658)
					{
						HX_STACK_LINE(658)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(658)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(658)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(658)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_166{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",661);
				{
					HX_STACK_LINE(661)
					{
					}
					HX_STACK_LINE(661)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(661)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(661)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(661)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(661)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(661)
						ret->zpp_pool = null();
						HX_STACK_LINE(661)
						ret->zpp_disp = false;
						HX_STACK_LINE(661)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(661)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(661)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",661);
								{
									HX_STACK_LINE(661)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(661)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(661)
									{
										HX_STACK_LINE(661)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(661)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(661)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(661)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(661)
											ret1->next = null();
										}
										HX_STACK_LINE(661)
										ret1->weak = false;
									}
									HX_STACK_LINE(661)
									ret1->_immutable = immutable;
									HX_STACK_LINE(661)
									{
										HX_STACK_LINE(661)
										ret1->x = (int)118;
										HX_STACK_LINE(661)
										ret1->y = 181.5;
										HX_STACK_LINE(661)
										{
										}
										HX_STACK_LINE(661)
										{
										}
									}
									HX_STACK_LINE(661)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(661)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(661)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(661)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(661)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(661)
						{
							HX_STACK_LINE(661)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(661)
							if ((_this->_immutable)){
								HX_STACK_LINE(661)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(661)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(661)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(661)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",661);
								{
									HX_STACK_LINE(661)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(661)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(661)
									{
										HX_STACK_LINE(661)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(661)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(661)
											_this->_validate();
										}
									}
									HX_STACK_LINE(661)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",661);
								{
									HX_STACK_LINE(661)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(661)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(661)
									{
										HX_STACK_LINE(661)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(661)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(661)
											_this->_validate();
										}
									}
									HX_STACK_LINE(661)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(661)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)118)) && bool((_Function_3_2::Block(ret) == 181.5))))))){
							HX_STACK_LINE(661)
							{
								HX_STACK_LINE(661)
								ret->zpp_inner->x = (int)118;
								HX_STACK_LINE(661)
								ret->zpp_inner->y = 181.5;
								HX_STACK_LINE(661)
								{
								}
								HX_STACK_LINE(661)
								{
								}
							}
							HX_STACK_LINE(661)
							{
								HX_STACK_LINE(661)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(661)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(661)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(661)
						ret;
					}
					HX_STACK_LINE(661)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(661)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_167{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",661);
				{
					HX_STACK_LINE(661)
					{
					}
					HX_STACK_LINE(661)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(661)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(661)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(661)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(661)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(661)
						ret->zpp_pool = null();
						HX_STACK_LINE(661)
						ret->zpp_disp = false;
						HX_STACK_LINE(661)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(661)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(661)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",661);
								{
									HX_STACK_LINE(661)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(661)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(661)
									{
										HX_STACK_LINE(661)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(661)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(661)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(661)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(661)
											ret1->next = null();
										}
										HX_STACK_LINE(661)
										ret1->weak = false;
									}
									HX_STACK_LINE(661)
									ret1->_immutable = immutable;
									HX_STACK_LINE(661)
									{
										HX_STACK_LINE(661)
										ret1->x = (int)123;
										HX_STACK_LINE(661)
										ret1->y = 179.5;
										HX_STACK_LINE(661)
										{
										}
										HX_STACK_LINE(661)
										{
										}
									}
									HX_STACK_LINE(661)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(661)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(661)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(661)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(661)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(661)
						{
							HX_STACK_LINE(661)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(661)
							if ((_this->_immutable)){
								HX_STACK_LINE(661)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(661)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(661)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(661)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",661);
								{
									HX_STACK_LINE(661)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(661)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(661)
									{
										HX_STACK_LINE(661)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(661)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(661)
											_this->_validate();
										}
									}
									HX_STACK_LINE(661)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",661);
								{
									HX_STACK_LINE(661)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(661)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(661)
									{
										HX_STACK_LINE(661)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(661)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(661)
											_this->_validate();
										}
									}
									HX_STACK_LINE(661)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(661)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)123)) && bool((_Function_3_2::Block(ret) == 179.5))))))){
							HX_STACK_LINE(661)
							{
								HX_STACK_LINE(661)
								ret->zpp_inner->x = (int)123;
								HX_STACK_LINE(661)
								ret->zpp_inner->y = 179.5;
								HX_STACK_LINE(661)
								{
								}
								HX_STACK_LINE(661)
								{
								}
							}
							HX_STACK_LINE(661)
							{
								HX_STACK_LINE(661)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(661)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(661)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(661)
						ret;
					}
					HX_STACK_LINE(661)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(661)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_168{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",661);
				{
					HX_STACK_LINE(661)
					{
					}
					HX_STACK_LINE(661)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(661)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(661)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(661)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(661)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(661)
						ret->zpp_pool = null();
						HX_STACK_LINE(661)
						ret->zpp_disp = false;
						HX_STACK_LINE(661)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(661)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(661)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",661);
								{
									HX_STACK_LINE(661)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(661)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(661)
									{
										HX_STACK_LINE(661)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(661)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(661)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(661)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(661)
											ret1->next = null();
										}
										HX_STACK_LINE(661)
										ret1->weak = false;
									}
									HX_STACK_LINE(661)
									ret1->_immutable = immutable;
									HX_STACK_LINE(661)
									{
										HX_STACK_LINE(661)
										ret1->x = 149.5;
										HX_STACK_LINE(661)
										ret1->y = (int)62;
										HX_STACK_LINE(661)
										{
										}
										HX_STACK_LINE(661)
										{
										}
									}
									HX_STACK_LINE(661)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(661)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(661)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(661)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(661)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(661)
						{
							HX_STACK_LINE(661)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(661)
							if ((_this->_immutable)){
								HX_STACK_LINE(661)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(661)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(661)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(661)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",661);
								{
									HX_STACK_LINE(661)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(661)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(661)
									{
										HX_STACK_LINE(661)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(661)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(661)
											_this->_validate();
										}
									}
									HX_STACK_LINE(661)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",661);
								{
									HX_STACK_LINE(661)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(661)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(661)
									{
										HX_STACK_LINE(661)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(661)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(661)
											_this->_validate();
										}
									}
									HX_STACK_LINE(661)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(661)
						if ((!(((bool((_Function_3_1::Block(ret) == 149.5)) && bool((_Function_3_2::Block(ret) == (int)62))))))){
							HX_STACK_LINE(661)
							{
								HX_STACK_LINE(661)
								ret->zpp_inner->x = 149.5;
								HX_STACK_LINE(661)
								ret->zpp_inner->y = (int)62;
								HX_STACK_LINE(661)
								{
								}
								HX_STACK_LINE(661)
								{
								}
							}
							HX_STACK_LINE(661)
							{
								HX_STACK_LINE(661)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(661)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(661)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(661)
						ret;
					}
					HX_STACK_LINE(661)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(661)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_169{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",661);
				{
					HX_STACK_LINE(661)
					{
					}
					HX_STACK_LINE(661)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(661)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(661)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(661)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(661)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(661)
						ret->zpp_pool = null();
						HX_STACK_LINE(661)
						ret->zpp_disp = false;
						HX_STACK_LINE(661)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(661)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(661)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",661);
								{
									HX_STACK_LINE(661)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(661)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(661)
									{
										HX_STACK_LINE(661)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(661)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(661)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(661)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(661)
											ret1->next = null();
										}
										HX_STACK_LINE(661)
										ret1->weak = false;
									}
									HX_STACK_LINE(661)
									ret1->_immutable = immutable;
									HX_STACK_LINE(661)
									{
										HX_STACK_LINE(661)
										ret1->x = (int)104;
										HX_STACK_LINE(661)
										ret1->y = 159.5;
										HX_STACK_LINE(661)
										{
										}
										HX_STACK_LINE(661)
										{
										}
									}
									HX_STACK_LINE(661)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(661)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(661)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(661)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(661)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(661)
						{
							HX_STACK_LINE(661)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(661)
							if ((_this->_immutable)){
								HX_STACK_LINE(661)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(661)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(661)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(661)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",661);
								{
									HX_STACK_LINE(661)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(661)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(661)
									{
										HX_STACK_LINE(661)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(661)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(661)
											_this->_validate();
										}
									}
									HX_STACK_LINE(661)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",661);
								{
									HX_STACK_LINE(661)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(661)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(661)
									{
										HX_STACK_LINE(661)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(661)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(661)
											_this->_validate();
										}
									}
									HX_STACK_LINE(661)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(661)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)104)) && bool((_Function_3_2::Block(ret) == 159.5))))))){
							HX_STACK_LINE(661)
							{
								HX_STACK_LINE(661)
								ret->zpp_inner->x = (int)104;
								HX_STACK_LINE(661)
								ret->zpp_inner->y = 159.5;
								HX_STACK_LINE(661)
								{
								}
								HX_STACK_LINE(661)
								{
								}
							}
							HX_STACK_LINE(661)
							{
								HX_STACK_LINE(661)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(661)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(661)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(661)
						ret;
					}
					HX_STACK_LINE(661)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(661)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(660)
		::nape::shape::Polygon s31 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_166::Block()).Add(_Function_1_167::Block()).Add(_Function_1_168::Block()).Add(_Function_1_169::Block())),mat7,filt7);		HX_STACK_VAR(s31,"s31");
		HX_STACK_LINE(665)
		{
			HX_STACK_LINE(665)
			{
				HX_STACK_LINE(665)
				s31->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(665)
				if (((((  (((s31->zpp_inner->body != null()))) ? ::nape::phys::Body(s31->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body5))){
					HX_STACK_LINE(665)
					if (((s31->zpp_inner->body != null()))){
						HX_STACK_LINE(665)
						((  (((s31->zpp_inner->body != null()))) ? ::nape::phys::Body(s31->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s31);
					}
					HX_STACK_LINE(665)
					if (((body5 != null()))){
						HX_STACK_LINE(665)
						::nape::shape::ShapeList _this = body5->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(665)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(665)
							_this->push(s31);
						}
						else{
							HX_STACK_LINE(665)
							_this->unshift(s31);
						}
					}
				}
			}
			HX_STACK_LINE(665)
			if (((s31->zpp_inner->body != null()))){
				HX_STACK_LINE(665)
				s31->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(665)
				Dynamic();
			}
		}
		HX_STACK_LINE(666)
		{
			HX_STACK_LINE(666)
			{
				HX_STACK_LINE(666)
				s31->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(666)
				s31->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(666)
				s31->zpp_inner->wake();
			}
			HX_STACK_LINE(666)
			s31->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(667)
		{
			HX_STACK_LINE(667)
			{
				HX_STACK_LINE(667)
				s31->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(667)
				s31->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(667)
				{
				}
				HX_STACK_LINE(667)
				s31->zpp_inner->wake();
			}
			HX_STACK_LINE(667)
			s31->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(668)
		{
			HX_STACK_LINE(668)
			{
				HX_STACK_LINE(668)
				if (((prop7 == null()))){
					HX_STACK_LINE(668)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(668)
				s31->zpp_inner->setFluid(prop7->zpp_inner);
			}
			HX_STACK_LINE(668)
			{
				HX_STACK_LINE(668)
				s31->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(668)
				if (((s31->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(668)
					s31->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(668)
				s31->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(669)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s31){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",669);
					{
						HX_STACK_LINE(669)
						if (((s31->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(669)
							s31->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(669)
						return s31->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(669)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s31);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(669)
			{
				HX_STACK_LINE(669)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(669)
				while(((_g < _g1->length))){
					HX_STACK_LINE(669)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(669)
					++(_g);
					HX_STACK_LINE(669)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(669)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(669)
						continue;
					}
					HX_STACK_LINE(669)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(669)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(669)
					{
						HX_STACK_LINE(669)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(669)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(669)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(669)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_170{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",672);
				{
					HX_STACK_LINE(672)
					{
					}
					HX_STACK_LINE(672)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(672)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(672)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(672)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(672)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(672)
						ret->zpp_pool = null();
						HX_STACK_LINE(672)
						ret->zpp_disp = false;
						HX_STACK_LINE(672)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(672)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(672)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",672);
								{
									HX_STACK_LINE(672)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(672)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(672)
									{
										HX_STACK_LINE(672)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(672)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(672)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(672)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(672)
											ret1->next = null();
										}
										HX_STACK_LINE(672)
										ret1->weak = false;
									}
									HX_STACK_LINE(672)
									ret1->_immutable = immutable;
									HX_STACK_LINE(672)
									{
										HX_STACK_LINE(672)
										ret1->x = (int)113;
										HX_STACK_LINE(672)
										ret1->y = 26.5;
										HX_STACK_LINE(672)
										{
										}
										HX_STACK_LINE(672)
										{
										}
									}
									HX_STACK_LINE(672)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(672)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(672)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(672)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(672)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(672)
						{
							HX_STACK_LINE(672)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(672)
							if ((_this->_immutable)){
								HX_STACK_LINE(672)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(672)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(672)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(672)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",672);
								{
									HX_STACK_LINE(672)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(672)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(672)
									{
										HX_STACK_LINE(672)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(672)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(672)
											_this->_validate();
										}
									}
									HX_STACK_LINE(672)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",672);
								{
									HX_STACK_LINE(672)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(672)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(672)
									{
										HX_STACK_LINE(672)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(672)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(672)
											_this->_validate();
										}
									}
									HX_STACK_LINE(672)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(672)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)113)) && bool((_Function_3_2::Block(ret) == 26.5))))))){
							HX_STACK_LINE(672)
							{
								HX_STACK_LINE(672)
								ret->zpp_inner->x = (int)113;
								HX_STACK_LINE(672)
								ret->zpp_inner->y = 26.5;
								HX_STACK_LINE(672)
								{
								}
								HX_STACK_LINE(672)
								{
								}
							}
							HX_STACK_LINE(672)
							{
								HX_STACK_LINE(672)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(672)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(672)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(672)
						ret;
					}
					HX_STACK_LINE(672)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(672)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_171{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",672);
				{
					HX_STACK_LINE(672)
					{
					}
					HX_STACK_LINE(672)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(672)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(672)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(672)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(672)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(672)
						ret->zpp_pool = null();
						HX_STACK_LINE(672)
						ret->zpp_disp = false;
						HX_STACK_LINE(672)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(672)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(672)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",672);
								{
									HX_STACK_LINE(672)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(672)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(672)
									{
										HX_STACK_LINE(672)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(672)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(672)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(672)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(672)
											ret1->next = null();
										}
										HX_STACK_LINE(672)
										ret1->weak = false;
									}
									HX_STACK_LINE(672)
									ret1->_immutable = immutable;
									HX_STACK_LINE(672)
									{
										HX_STACK_LINE(672)
										ret1->x = 126.5;
										HX_STACK_LINE(672)
										ret1->y = (int)41;
										HX_STACK_LINE(672)
										{
										}
										HX_STACK_LINE(672)
										{
										}
									}
									HX_STACK_LINE(672)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(672)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(672)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(672)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(672)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(672)
						{
							HX_STACK_LINE(672)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(672)
							if ((_this->_immutable)){
								HX_STACK_LINE(672)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(672)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(672)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(672)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",672);
								{
									HX_STACK_LINE(672)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(672)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(672)
									{
										HX_STACK_LINE(672)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(672)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(672)
											_this->_validate();
										}
									}
									HX_STACK_LINE(672)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",672);
								{
									HX_STACK_LINE(672)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(672)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(672)
									{
										HX_STACK_LINE(672)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(672)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(672)
											_this->_validate();
										}
									}
									HX_STACK_LINE(672)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(672)
						if ((!(((bool((_Function_3_1::Block(ret) == 126.5)) && bool((_Function_3_2::Block(ret) == (int)41))))))){
							HX_STACK_LINE(672)
							{
								HX_STACK_LINE(672)
								ret->zpp_inner->x = 126.5;
								HX_STACK_LINE(672)
								ret->zpp_inner->y = (int)41;
								HX_STACK_LINE(672)
								{
								}
								HX_STACK_LINE(672)
								{
								}
							}
							HX_STACK_LINE(672)
							{
								HX_STACK_LINE(672)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(672)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(672)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(672)
						ret;
					}
					HX_STACK_LINE(672)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(672)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_172{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",672);
				{
					HX_STACK_LINE(672)
					{
					}
					HX_STACK_LINE(672)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(672)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(672)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(672)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(672)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(672)
						ret->zpp_pool = null();
						HX_STACK_LINE(672)
						ret->zpp_disp = false;
						HX_STACK_LINE(672)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(672)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(672)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",672);
								{
									HX_STACK_LINE(672)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(672)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(672)
									{
										HX_STACK_LINE(672)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(672)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(672)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(672)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(672)
											ret1->next = null();
										}
										HX_STACK_LINE(672)
										ret1->weak = false;
									}
									HX_STACK_LINE(672)
									ret1->_immutable = immutable;
									HX_STACK_LINE(672)
									{
										HX_STACK_LINE(672)
										ret1->x = (int)143;
										HX_STACK_LINE(672)
										ret1->y = -0.5;
										HX_STACK_LINE(672)
										{
										}
										HX_STACK_LINE(672)
										{
										}
									}
									HX_STACK_LINE(672)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(672)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(672)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(672)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(672)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(672)
						{
							HX_STACK_LINE(672)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(672)
							if ((_this->_immutable)){
								HX_STACK_LINE(672)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(672)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(672)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(672)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",672);
								{
									HX_STACK_LINE(672)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(672)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(672)
									{
										HX_STACK_LINE(672)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(672)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(672)
											_this->_validate();
										}
									}
									HX_STACK_LINE(672)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",672);
								{
									HX_STACK_LINE(672)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(672)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(672)
									{
										HX_STACK_LINE(672)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(672)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(672)
											_this->_validate();
										}
									}
									HX_STACK_LINE(672)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(672)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)143)) && bool((_Function_3_2::Block(ret) == -0.5))))))){
							HX_STACK_LINE(672)
							{
								HX_STACK_LINE(672)
								ret->zpp_inner->x = (int)143;
								HX_STACK_LINE(672)
								ret->zpp_inner->y = -0.5;
								HX_STACK_LINE(672)
								{
								}
								HX_STACK_LINE(672)
								{
								}
							}
							HX_STACK_LINE(672)
							{
								HX_STACK_LINE(672)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(672)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(672)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(672)
						ret;
					}
					HX_STACK_LINE(672)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(672)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_173{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",672);
				{
					HX_STACK_LINE(672)
					{
					}
					HX_STACK_LINE(672)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(672)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(672)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(672)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(672)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(672)
						ret->zpp_pool = null();
						HX_STACK_LINE(672)
						ret->zpp_disp = false;
						HX_STACK_LINE(672)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(672)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(672)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",672);
								{
									HX_STACK_LINE(672)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(672)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(672)
									{
										HX_STACK_LINE(672)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(672)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(672)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(672)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(672)
											ret1->next = null();
										}
										HX_STACK_LINE(672)
										ret1->weak = false;
									}
									HX_STACK_LINE(672)
									ret1->_immutable = immutable;
									HX_STACK_LINE(672)
									{
										HX_STACK_LINE(672)
										ret1->x = (int)142;
										HX_STACK_LINE(672)
										ret1->y = -0.5;
										HX_STACK_LINE(672)
										{
										}
										HX_STACK_LINE(672)
										{
										}
									}
									HX_STACK_LINE(672)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(672)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(672)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(672)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(672)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(672)
						{
							HX_STACK_LINE(672)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(672)
							if ((_this->_immutable)){
								HX_STACK_LINE(672)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(672)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(672)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(672)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",672);
								{
									HX_STACK_LINE(672)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(672)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(672)
									{
										HX_STACK_LINE(672)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(672)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(672)
											_this->_validate();
										}
									}
									HX_STACK_LINE(672)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",672);
								{
									HX_STACK_LINE(672)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(672)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(672)
									{
										HX_STACK_LINE(672)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(672)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(672)
											_this->_validate();
										}
									}
									HX_STACK_LINE(672)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(672)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)142)) && bool((_Function_3_2::Block(ret) == -0.5))))))){
							HX_STACK_LINE(672)
							{
								HX_STACK_LINE(672)
								ret->zpp_inner->x = (int)142;
								HX_STACK_LINE(672)
								ret->zpp_inner->y = -0.5;
								HX_STACK_LINE(672)
								{
								}
								HX_STACK_LINE(672)
								{
								}
							}
							HX_STACK_LINE(672)
							{
								HX_STACK_LINE(672)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(672)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(672)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(672)
						ret;
					}
					HX_STACK_LINE(672)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(672)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(671)
		::nape::shape::Polygon s32 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_170::Block()).Add(_Function_1_171::Block()).Add(_Function_1_172::Block()).Add(_Function_1_173::Block())),mat7,filt7);		HX_STACK_VAR(s32,"s32");
		HX_STACK_LINE(676)
		{
			HX_STACK_LINE(676)
			{
				HX_STACK_LINE(676)
				s32->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(676)
				if (((((  (((s32->zpp_inner->body != null()))) ? ::nape::phys::Body(s32->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body5))){
					HX_STACK_LINE(676)
					if (((s32->zpp_inner->body != null()))){
						HX_STACK_LINE(676)
						((  (((s32->zpp_inner->body != null()))) ? ::nape::phys::Body(s32->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s32);
					}
					HX_STACK_LINE(676)
					if (((body5 != null()))){
						HX_STACK_LINE(676)
						::nape::shape::ShapeList _this = body5->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(676)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(676)
							_this->push(s32);
						}
						else{
							HX_STACK_LINE(676)
							_this->unshift(s32);
						}
					}
				}
			}
			HX_STACK_LINE(676)
			if (((s32->zpp_inner->body != null()))){
				HX_STACK_LINE(676)
				s32->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(676)
				Dynamic();
			}
		}
		HX_STACK_LINE(677)
		{
			HX_STACK_LINE(677)
			{
				HX_STACK_LINE(677)
				s32->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(677)
				s32->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(677)
				s32->zpp_inner->wake();
			}
			HX_STACK_LINE(677)
			s32->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(678)
		{
			HX_STACK_LINE(678)
			{
				HX_STACK_LINE(678)
				s32->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(678)
				s32->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(678)
				{
				}
				HX_STACK_LINE(678)
				s32->zpp_inner->wake();
			}
			HX_STACK_LINE(678)
			s32->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(679)
		{
			HX_STACK_LINE(679)
			{
				HX_STACK_LINE(679)
				if (((prop7 == null()))){
					HX_STACK_LINE(679)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(679)
				s32->zpp_inner->setFluid(prop7->zpp_inner);
			}
			HX_STACK_LINE(679)
			{
				HX_STACK_LINE(679)
				s32->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(679)
				if (((s32->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(679)
					s32->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(679)
				s32->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(680)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s32){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",680);
					{
						HX_STACK_LINE(680)
						if (((s32->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(680)
							s32->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(680)
						return s32->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(680)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s32);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(680)
			{
				HX_STACK_LINE(680)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(680)
				while(((_g < _g1->length))){
					HX_STACK_LINE(680)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(680)
					++(_g);
					HX_STACK_LINE(680)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(680)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(680)
						continue;
					}
					HX_STACK_LINE(680)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(680)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(680)
					{
						HX_STACK_LINE(680)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(680)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(680)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(680)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_174{
			inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body5){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",685);
				{
					struct _Function_2_1{
						inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body5){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",685);
							{
								HX_STACK_LINE(685)
								if ((body5->zpp_inner->world)){
									HX_STACK_LINE(685)
									hx::Throw ((HX_CSTRING("Error: Space::world has no ") + HX_CSTRING("localCOM")));
								}
								HX_STACK_LINE(685)
								if (((body5->zpp_inner->wrap_localCOM == null()))){
									struct _Function_4_1{
										inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body5){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",685);
											{
												HX_STACK_LINE(685)
												Float x = body5->zpp_inner->localCOMx;		HX_STACK_VAR(x,"x");
												Float y = body5->zpp_inner->localCOMy;		HX_STACK_VAR(y,"y");
												bool weak = false;		HX_STACK_VAR(weak,"weak");
												HX_STACK_LINE(685)
												if (((bool((x != x)) || bool((y != y))))){
													HX_STACK_LINE(685)
													hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
												}
												HX_STACK_LINE(685)
												::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
												HX_STACK_LINE(685)
												if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
													HX_STACK_LINE(685)
													ret = ::nape::geom::Vec2_obj::__new(null(),null());
												}
												else{
													HX_STACK_LINE(685)
													ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
													HX_STACK_LINE(685)
													::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
													HX_STACK_LINE(685)
													ret->zpp_pool = null();
													HX_STACK_LINE(685)
													ret->zpp_disp = false;
													HX_STACK_LINE(685)
													if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
														HX_STACK_LINE(685)
														::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
													}
												}
												HX_STACK_LINE(685)
												if (((ret->zpp_inner == null()))){
													struct _Function_6_1{
														inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",685);
															{
																HX_STACK_LINE(685)
																bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
																HX_STACK_LINE(685)
																::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(685)
																{
																	HX_STACK_LINE(685)
																	if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
																		HX_STACK_LINE(685)
																		ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
																	}
																	else{
																		HX_STACK_LINE(685)
																		ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
																		HX_STACK_LINE(685)
																		::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
																		HX_STACK_LINE(685)
																		ret1->next = null();
																	}
																	HX_STACK_LINE(685)
																	ret1->weak = false;
																}
																HX_STACK_LINE(685)
																ret1->_immutable = immutable;
																HX_STACK_LINE(685)
																{
																	HX_STACK_LINE(685)
																	ret1->x = x;
																	HX_STACK_LINE(685)
																	ret1->y = y;
																	HX_STACK_LINE(685)
																	{
																	}
																	HX_STACK_LINE(685)
																	{
																	}
																}
																HX_STACK_LINE(685)
																return ret1;
															}
															return null();
														}
													};
													HX_STACK_LINE(685)
													ret->zpp_inner = _Function_6_1::Block(x,y);
													HX_STACK_LINE(685)
													ret->zpp_inner->outer = ret;
												}
												else{
													HX_STACK_LINE(685)
													if (((bool((ret != null())) && bool(ret->zpp_disp)))){
														HX_STACK_LINE(685)
														hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
													}
													HX_STACK_LINE(685)
													{
														HX_STACK_LINE(685)
														::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(685)
														if ((_this->_immutable)){
															HX_STACK_LINE(685)
															hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
														}
														HX_STACK_LINE(685)
														if (((_this->_isimmutable_dyn() != null()))){
															HX_STACK_LINE(685)
															_this->_isimmutable();
														}
													}
													HX_STACK_LINE(685)
													if (((bool((x != x)) || bool((y != y))))){
														HX_STACK_LINE(685)
														hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
													}
													struct _Function_6_1{
														inline static Float Block( ::nape::geom::Vec2 &ret){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",685);
															{
																HX_STACK_LINE(685)
																if (((bool((ret != null())) && bool(ret->zpp_disp)))){
																	HX_STACK_LINE(685)
																	hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
																}
																HX_STACK_LINE(685)
																{
																	HX_STACK_LINE(685)
																	::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(685)
																	if (((_this->_validate_dyn() != null()))){
																		HX_STACK_LINE(685)
																		_this->_validate();
																	}
																}
																HX_STACK_LINE(685)
																return ret->zpp_inner->x;
															}
															return null();
														}
													};
													struct _Function_6_2{
														inline static Float Block( ::nape::geom::Vec2 &ret){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",685);
															{
																HX_STACK_LINE(685)
																if (((bool((ret != null())) && bool(ret->zpp_disp)))){
																	HX_STACK_LINE(685)
																	hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
																}
																HX_STACK_LINE(685)
																{
																	HX_STACK_LINE(685)
																	::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(685)
																	if (((_this->_validate_dyn() != null()))){
																		HX_STACK_LINE(685)
																		_this->_validate();
																	}
																}
																HX_STACK_LINE(685)
																return ret->zpp_inner->y;
															}
															return null();
														}
													};
													HX_STACK_LINE(685)
													if ((!(((bool((_Function_6_1::Block(ret) == x)) && bool((_Function_6_2::Block(ret) == y))))))){
														HX_STACK_LINE(685)
														{
															HX_STACK_LINE(685)
															ret->zpp_inner->x = x;
															HX_STACK_LINE(685)
															ret->zpp_inner->y = y;
															HX_STACK_LINE(685)
															{
															}
															HX_STACK_LINE(685)
															{
															}
														}
														HX_STACK_LINE(685)
														{
															HX_STACK_LINE(685)
															::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(685)
															if (((_this->_invalidate_dyn() != null()))){
																HX_STACK_LINE(685)
																_this->_invalidate(_this);
															}
														}
													}
													HX_STACK_LINE(685)
													ret;
												}
												HX_STACK_LINE(685)
												ret->zpp_inner->weak = weak;
												HX_STACK_LINE(685)
												return ret;
											}
											return null();
										}
									};
									HX_STACK_LINE(685)
									body5->zpp_inner->wrap_localCOM = _Function_4_1::Block(body5);
									HX_STACK_LINE(685)
									body5->zpp_inner->wrap_localCOM->zpp_inner->_inuse = true;
									HX_STACK_LINE(685)
									body5->zpp_inner->wrap_localCOM->zpp_inner->_immutable = true;
									HX_STACK_LINE(685)
									body5->zpp_inner->wrap_localCOM->zpp_inner->_validate = body5->zpp_inner->getlocalCOM_dyn();
								}
								HX_STACK_LINE(685)
								return body5->zpp_inner->wrap_localCOM;
							}
							return null();
						}
					};
					HX_STACK_LINE(685)
					::nape::geom::Vec2 _this = _Function_2_1::Block(body5);		HX_STACK_VAR(_this,"_this");
					bool weak = false;		HX_STACK_VAR(weak,"weak");
					HX_STACK_LINE(685)
					if (((bool((_this != null())) && bool(_this->zpp_disp)))){
						HX_STACK_LINE(685)
						hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
					}
					struct _Function_2_2{
						inline static ::nape::geom::Vec2 Block( ::nape::geom::Vec2 &_this,bool &weak){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",685);
							{
								struct _Function_3_1{
									inline static Float Block( ::nape::geom::Vec2 &_this){
										HX_STACK_PUSH("*::closure","PhysicsData.hx",685);
										{
											HX_STACK_LINE(685)
											if ((_this->zpp_disp)){
												HX_STACK_LINE(685)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(685)
											{
												HX_STACK_LINE(685)
												::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
												HX_STACK_LINE(685)
												if (((_this1->_validate_dyn() != null()))){
													HX_STACK_LINE(685)
													_this1->_validate();
												}
											}
											HX_STACK_LINE(685)
											return _this->zpp_inner->x;
										}
										return null();
									}
								};
								struct _Function_3_2{
									inline static Float Block( ::nape::geom::Vec2 &_this){
										HX_STACK_PUSH("*::closure","PhysicsData.hx",685);
										{
											HX_STACK_LINE(685)
											if ((_this->zpp_disp)){
												HX_STACK_LINE(685)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(685)
											{
												HX_STACK_LINE(685)
												::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
												HX_STACK_LINE(685)
												if (((_this1->_validate_dyn() != null()))){
													HX_STACK_LINE(685)
													_this1->_validate();
												}
											}
											HX_STACK_LINE(685)
											return _this->zpp_inner->y;
										}
										return null();
									}
								};
								HX_STACK_LINE(685)
								Float x = _Function_3_1::Block(_this);		HX_STACK_VAR(x,"x");
								Float y = _Function_3_2::Block(_this);		HX_STACK_VAR(y,"y");
								HX_STACK_LINE(685)
								if (((bool((x != x)) || bool((y != y))))){
									HX_STACK_LINE(685)
									hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
								}
								HX_STACK_LINE(685)
								::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(685)
								if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
									HX_STACK_LINE(685)
									ret = ::nape::geom::Vec2_obj::__new(null(),null());
								}
								else{
									HX_STACK_LINE(685)
									ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
									HX_STACK_LINE(685)
									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
									HX_STACK_LINE(685)
									ret->zpp_pool = null();
									HX_STACK_LINE(685)
									ret->zpp_disp = false;
									HX_STACK_LINE(685)
									if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
										HX_STACK_LINE(685)
										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
									}
								}
								HX_STACK_LINE(685)
								if (((ret->zpp_inner == null()))){
									struct _Function_4_1{
										inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",685);
											{
												HX_STACK_LINE(685)
												bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
												HX_STACK_LINE(685)
												::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(685)
												{
													HX_STACK_LINE(685)
													if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
														HX_STACK_LINE(685)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
													}
													else{
														HX_STACK_LINE(685)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
														HX_STACK_LINE(685)
														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(685)
														ret1->next = null();
													}
													HX_STACK_LINE(685)
													ret1->weak = false;
												}
												HX_STACK_LINE(685)
												ret1->_immutable = immutable;
												HX_STACK_LINE(685)
												{
													HX_STACK_LINE(685)
													ret1->x = x;
													HX_STACK_LINE(685)
													ret1->y = y;
													HX_STACK_LINE(685)
													{
													}
													HX_STACK_LINE(685)
													{
													}
												}
												HX_STACK_LINE(685)
												return ret1;
											}
											return null();
										}
									};
									HX_STACK_LINE(685)
									ret->zpp_inner = _Function_4_1::Block(x,y);
									HX_STACK_LINE(685)
									ret->zpp_inner->outer = ret;
								}
								else{
									HX_STACK_LINE(685)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(685)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(685)
									{
										HX_STACK_LINE(685)
										::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
										HX_STACK_LINE(685)
										if ((_this1->_immutable)){
											HX_STACK_LINE(685)
											hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
										}
										HX_STACK_LINE(685)
										if (((_this1->_isimmutable_dyn() != null()))){
											HX_STACK_LINE(685)
											_this1->_isimmutable();
										}
									}
									HX_STACK_LINE(685)
									if (((bool((x != x)) || bool((y != y))))){
										HX_STACK_LINE(685)
										hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
									}
									struct _Function_4_1{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",685);
											{
												HX_STACK_LINE(685)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(685)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(685)
												{
													HX_STACK_LINE(685)
													::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(685)
													if (((_this1->_validate_dyn() != null()))){
														HX_STACK_LINE(685)
														_this1->_validate();
													}
												}
												HX_STACK_LINE(685)
												return ret->zpp_inner->x;
											}
											return null();
										}
									};
									struct _Function_4_2{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",685);
											{
												HX_STACK_LINE(685)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(685)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(685)
												{
													HX_STACK_LINE(685)
													::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(685)
													if (((_this1->_validate_dyn() != null()))){
														HX_STACK_LINE(685)
														_this1->_validate();
													}
												}
												HX_STACK_LINE(685)
												return ret->zpp_inner->y;
											}
											return null();
										}
									};
									HX_STACK_LINE(685)
									if ((!(((bool((_Function_4_1::Block(ret) == x)) && bool((_Function_4_2::Block(ret) == y))))))){
										HX_STACK_LINE(685)
										{
											HX_STACK_LINE(685)
											ret->zpp_inner->x = x;
											HX_STACK_LINE(685)
											ret->zpp_inner->y = y;
											HX_STACK_LINE(685)
											{
											}
											HX_STACK_LINE(685)
											{
											}
										}
										HX_STACK_LINE(685)
										{
											HX_STACK_LINE(685)
											::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
											HX_STACK_LINE(685)
											if (((_this1->_invalidate_dyn() != null()))){
												HX_STACK_LINE(685)
												_this1->_invalidate(_this1);
											}
										}
									}
									HX_STACK_LINE(685)
									ret;
								}
								HX_STACK_LINE(685)
								ret->zpp_inner->weak = weak;
								HX_STACK_LINE(685)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(685)
					return _Function_2_2::Block(_this,weak);
				}
				return null();
			}
		};
		HX_STACK_LINE(685)
		::nape::geom::Vec2 anchor5 = _Function_1_174::Block(body5);		HX_STACK_VAR(anchor5,"anchor5");
		struct _Function_1_175{
			inline static ::nape::geom::Vec2 Block( ::nape::geom::Vec2 &anchor5){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",686);
				{
					struct _Function_2_1{
						inline static Float Block( ::nape::geom::Vec2 &anchor5){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",686);
							{
								HX_STACK_LINE(686)
								if (((bool((anchor5 != null())) && bool(anchor5->zpp_disp)))){
									HX_STACK_LINE(686)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(686)
								{
									HX_STACK_LINE(686)
									::zpp_nape::geom::ZPP_Vec2 _this = anchor5->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(686)
									if (((_this->_validate_dyn() != null()))){
										HX_STACK_LINE(686)
										_this->_validate();
									}
								}
								HX_STACK_LINE(686)
								return anchor5->zpp_inner->x;
							}
							return null();
						}
					};
					struct _Function_2_2{
						inline static Float Block( ::nape::geom::Vec2 &anchor5){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",686);
							{
								HX_STACK_LINE(686)
								if (((bool((anchor5 != null())) && bool(anchor5->zpp_disp)))){
									HX_STACK_LINE(686)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(686)
								{
									HX_STACK_LINE(686)
									::zpp_nape::geom::ZPP_Vec2 _this = anchor5->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(686)
									if (((_this->_validate_dyn() != null()))){
										HX_STACK_LINE(686)
										_this->_validate();
									}
								}
								HX_STACK_LINE(686)
								return anchor5->zpp_inner->y;
							}
							return null();
						}
					};
					HX_STACK_LINE(686)
					Float x = -(_Function_2_1::Block(anchor5));		HX_STACK_VAR(x,"x");
					Float y = -(_Function_2_2::Block(anchor5));		HX_STACK_VAR(y,"y");
					struct _Function_2_3{
						inline static ::nape::geom::Vec2 Block( Float &x,Float &y){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",686);
							{
								HX_STACK_LINE(686)
								if (((bool((x != x)) || bool((y != y))))){
									HX_STACK_LINE(686)
									hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
								}
								HX_STACK_LINE(686)
								::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(686)
								if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
									HX_STACK_LINE(686)
									ret = ::nape::geom::Vec2_obj::__new(null(),null());
								}
								else{
									HX_STACK_LINE(686)
									ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
									HX_STACK_LINE(686)
									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
									HX_STACK_LINE(686)
									ret->zpp_pool = null();
									HX_STACK_LINE(686)
									ret->zpp_disp = false;
									HX_STACK_LINE(686)
									if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
										HX_STACK_LINE(686)
										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
									}
								}
								HX_STACK_LINE(686)
								if (((ret->zpp_inner == null()))){
									struct _Function_4_1{
										inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",686);
											{
												HX_STACK_LINE(686)
												bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
												HX_STACK_LINE(686)
												::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(686)
												{
													HX_STACK_LINE(686)
													if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
														HX_STACK_LINE(686)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
													}
													else{
														HX_STACK_LINE(686)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
														HX_STACK_LINE(686)
														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(686)
														ret1->next = null();
													}
													HX_STACK_LINE(686)
													ret1->weak = false;
												}
												HX_STACK_LINE(686)
												ret1->_immutable = immutable;
												HX_STACK_LINE(686)
												{
													HX_STACK_LINE(686)
													ret1->x = x;
													HX_STACK_LINE(686)
													ret1->y = y;
													HX_STACK_LINE(686)
													{
													}
													HX_STACK_LINE(686)
													{
													}
												}
												HX_STACK_LINE(686)
												return ret1;
											}
											return null();
										}
									};
									HX_STACK_LINE(686)
									ret->zpp_inner = _Function_4_1::Block(x,y);
									HX_STACK_LINE(686)
									ret->zpp_inner->outer = ret;
								}
								else{
									HX_STACK_LINE(686)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(686)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(686)
									{
										HX_STACK_LINE(686)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(686)
										if ((_this->_immutable)){
											HX_STACK_LINE(686)
											hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
										}
										HX_STACK_LINE(686)
										if (((_this->_isimmutable_dyn() != null()))){
											HX_STACK_LINE(686)
											_this->_isimmutable();
										}
									}
									HX_STACK_LINE(686)
									if (((bool((x != x)) || bool((y != y))))){
										HX_STACK_LINE(686)
										hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
									}
									struct _Function_4_1{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",686);
											{
												HX_STACK_LINE(686)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(686)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(686)
												{
													HX_STACK_LINE(686)
													::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(686)
													if (((_this->_validate_dyn() != null()))){
														HX_STACK_LINE(686)
														_this->_validate();
													}
												}
												HX_STACK_LINE(686)
												return ret->zpp_inner->x;
											}
											return null();
										}
									};
									struct _Function_4_2{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",686);
											{
												HX_STACK_LINE(686)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(686)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(686)
												{
													HX_STACK_LINE(686)
													::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(686)
													if (((_this->_validate_dyn() != null()))){
														HX_STACK_LINE(686)
														_this->_validate();
													}
												}
												HX_STACK_LINE(686)
												return ret->zpp_inner->y;
											}
											return null();
										}
									};
									HX_STACK_LINE(686)
									if ((!(((bool((_Function_4_1::Block(ret) == x)) && bool((_Function_4_2::Block(ret) == y))))))){
										HX_STACK_LINE(686)
										{
											HX_STACK_LINE(686)
											ret->zpp_inner->x = x;
											HX_STACK_LINE(686)
											ret->zpp_inner->y = y;
											HX_STACK_LINE(686)
											{
											}
											HX_STACK_LINE(686)
											{
											}
										}
										HX_STACK_LINE(686)
										{
											HX_STACK_LINE(686)
											::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(686)
											if (((_this->_invalidate_dyn() != null()))){
												HX_STACK_LINE(686)
												_this->_invalidate(_this);
											}
										}
									}
									HX_STACK_LINE(686)
									ret;
								}
								HX_STACK_LINE(686)
								ret->zpp_inner->weak = true;
								HX_STACK_LINE(686)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(686)
					return _Function_2_3::Block(x,y);
				}
				return null();
			}
		};
		HX_STACK_LINE(686)
		body5->translateShapes(_Function_1_175::Block(anchor5));
		HX_STACK_LINE(687)
		{
			struct _Function_2_1{
				inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body5){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",687);
					{
						HX_STACK_LINE(687)
						if (((body5->zpp_inner->wrap_pos == null()))){
							HX_STACK_LINE(687)
							body5->zpp_inner->setupPosition();
						}
						HX_STACK_LINE(687)
						return body5->zpp_inner->wrap_pos;
					}
					return null();
				}
			};
			HX_STACK_LINE(687)
			::nape::geom::Vec2 _this = _Function_2_1::Block(body5);		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(687)
			if (((bool((_this != null())) && bool(_this->zpp_disp)))){
				HX_STACK_LINE(687)
				hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
			}
			HX_STACK_LINE(687)
			{
				HX_STACK_LINE(687)
				::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
				HX_STACK_LINE(687)
				if ((_this1->_immutable)){
					HX_STACK_LINE(687)
					hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
				}
				HX_STACK_LINE(687)
				if (((_this1->_isimmutable_dyn() != null()))){
					HX_STACK_LINE(687)
					_this1->_isimmutable();
				}
			}
			HX_STACK_LINE(687)
			{
			}
			struct _Function_2_2{
				inline static Float Block( ::nape::geom::Vec2 &_this){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",687);
					{
						HX_STACK_LINE(687)
						if (((bool((_this != null())) && bool(_this->zpp_disp)))){
							HX_STACK_LINE(687)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(687)
						{
							HX_STACK_LINE(687)
							::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(687)
							if (((_this1->_validate_dyn() != null()))){
								HX_STACK_LINE(687)
								_this1->_validate();
							}
						}
						HX_STACK_LINE(687)
						return _this->zpp_inner->x;
					}
					return null();
				}
			};
			struct _Function_2_3{
				inline static Float Block( ::nape::geom::Vec2 &_this){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",687);
					{
						HX_STACK_LINE(687)
						if (((bool((_this != null())) && bool(_this->zpp_disp)))){
							HX_STACK_LINE(687)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(687)
						{
							HX_STACK_LINE(687)
							::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(687)
							if (((_this1->_validate_dyn() != null()))){
								HX_STACK_LINE(687)
								_this1->_validate();
							}
						}
						HX_STACK_LINE(687)
						return _this->zpp_inner->y;
					}
					return null();
				}
			};
			HX_STACK_LINE(687)
			if ((!(((bool((_Function_2_2::Block(_this) == (int)0)) && bool((_Function_2_3::Block(_this) == (int)0))))))){
				HX_STACK_LINE(687)
				{
					HX_STACK_LINE(687)
					_this->zpp_inner->x = (int)0;
					HX_STACK_LINE(687)
					_this->zpp_inner->y = (int)0;
					HX_STACK_LINE(687)
					{
					}
					HX_STACK_LINE(687)
					{
					}
				}
				HX_STACK_LINE(687)
				{
					HX_STACK_LINE(687)
					::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
					HX_STACK_LINE(687)
					if (((_this1->_invalidate_dyn() != null()))){
						HX_STACK_LINE(687)
						_this1->_invalidate(_this1);
					}
				}
			}
			HX_STACK_LINE(687)
			_this;
		}
		struct _Function_1_176{
			inline static Dynamic Block( ::nape::phys::Body &body5,::nape::geom::Vec2 &anchor5){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",689);
				{
					hx::Anon __result = hx::Anon_obj::Create();
					__result->Add(HX_CSTRING("body") , body5,false);
					__result->Add(HX_CSTRING("anchor") , anchor5,false);
					return __result;
				}
				return null();
			}
		};
		HX_STACK_LINE(689)
		::PhysicsData_obj::bodies->set(HX_CSTRING("pikachu"),_Function_1_176::Block(body5,anchor5));
		HX_STACK_LINE(691)
		::nape::phys::Body body6 = ::nape::phys::Body_obj::__new(null(),null());		HX_STACK_VAR(body6,"body6");
		HX_STACK_LINE(692)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::phys::Body &body6){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",692);
					{
						HX_STACK_LINE(692)
						if (((body6->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(692)
							body6->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(692)
						return body6->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(692)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(body6);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(692)
			{
				HX_STACK_LINE(692)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(692)
				while(((_g < _g1->length))){
					HX_STACK_LINE(692)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(692)
					++(_g);
					HX_STACK_LINE(692)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(692)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(692)
						continue;
					}
					HX_STACK_LINE(692)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(692)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(692)
					{
						HX_STACK_LINE(692)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(692)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(692)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(692)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		HX_STACK_LINE(695)
		::nape::phys::Material mat8 = ::nape::phys::Material_obj::__new(null(),null(),null(),null(),null());		HX_STACK_VAR(mat8,"mat8");
		HX_STACK_LINE(696)
		::nape::dynamics::InteractionFilter filt8 = ::nape::dynamics::InteractionFilter_obj::__new(null(),null(),null(),null(),null(),null());		HX_STACK_VAR(filt8,"filt8");
		HX_STACK_LINE(697)
		::nape::phys::FluidProperties prop8 = ::nape::phys::FluidProperties_obj::__new(null(),null());		HX_STACK_VAR(prop8,"prop8");
		struct _Function_1_177{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
				{
					HX_STACK_LINE(702)
					{
					}
					HX_STACK_LINE(702)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(702)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(702)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(702)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(702)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(702)
						ret->zpp_pool = null();
						HX_STACK_LINE(702)
						ret->zpp_disp = false;
						HX_STACK_LINE(702)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(702)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(702)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
								{
									HX_STACK_LINE(702)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(702)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(702)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(702)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(702)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(702)
											ret1->next = null();
										}
										HX_STACK_LINE(702)
										ret1->weak = false;
									}
									HX_STACK_LINE(702)
									ret1->_immutable = immutable;
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										ret1->x = (int)194;
										HX_STACK_LINE(702)
										ret1->y = 66.5;
										HX_STACK_LINE(702)
										{
										}
										HX_STACK_LINE(702)
										{
										}
									}
									HX_STACK_LINE(702)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(702)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(702)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(702)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(702)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(702)
						{
							HX_STACK_LINE(702)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(702)
							if ((_this->_immutable)){
								HX_STACK_LINE(702)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(702)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(702)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(702)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
								{
									HX_STACK_LINE(702)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(702)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(702)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(702)
											_this->_validate();
										}
									}
									HX_STACK_LINE(702)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
								{
									HX_STACK_LINE(702)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(702)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(702)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(702)
											_this->_validate();
										}
									}
									HX_STACK_LINE(702)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(702)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)194)) && bool((_Function_3_2::Block(ret) == 66.5))))))){
							HX_STACK_LINE(702)
							{
								HX_STACK_LINE(702)
								ret->zpp_inner->x = (int)194;
								HX_STACK_LINE(702)
								ret->zpp_inner->y = 66.5;
								HX_STACK_LINE(702)
								{
								}
								HX_STACK_LINE(702)
								{
								}
							}
							HX_STACK_LINE(702)
							{
								HX_STACK_LINE(702)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(702)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(702)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(702)
						ret;
					}
					HX_STACK_LINE(702)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(702)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_178{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
				{
					HX_STACK_LINE(702)
					{
					}
					HX_STACK_LINE(702)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(702)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(702)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(702)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(702)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(702)
						ret->zpp_pool = null();
						HX_STACK_LINE(702)
						ret->zpp_disp = false;
						HX_STACK_LINE(702)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(702)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(702)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
								{
									HX_STACK_LINE(702)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(702)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(702)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(702)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(702)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(702)
											ret1->next = null();
										}
										HX_STACK_LINE(702)
										ret1->weak = false;
									}
									HX_STACK_LINE(702)
									ret1->_immutable = immutable;
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										ret1->x = 134.5;
										HX_STACK_LINE(702)
										ret1->y = (int)82;
										HX_STACK_LINE(702)
										{
										}
										HX_STACK_LINE(702)
										{
										}
									}
									HX_STACK_LINE(702)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(702)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(702)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(702)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(702)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(702)
						{
							HX_STACK_LINE(702)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(702)
							if ((_this->_immutable)){
								HX_STACK_LINE(702)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(702)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(702)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(702)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
								{
									HX_STACK_LINE(702)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(702)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(702)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(702)
											_this->_validate();
										}
									}
									HX_STACK_LINE(702)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
								{
									HX_STACK_LINE(702)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(702)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(702)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(702)
											_this->_validate();
										}
									}
									HX_STACK_LINE(702)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(702)
						if ((!(((bool((_Function_3_1::Block(ret) == 134.5)) && bool((_Function_3_2::Block(ret) == (int)82))))))){
							HX_STACK_LINE(702)
							{
								HX_STACK_LINE(702)
								ret->zpp_inner->x = 134.5;
								HX_STACK_LINE(702)
								ret->zpp_inner->y = (int)82;
								HX_STACK_LINE(702)
								{
								}
								HX_STACK_LINE(702)
								{
								}
							}
							HX_STACK_LINE(702)
							{
								HX_STACK_LINE(702)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(702)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(702)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(702)
						ret;
					}
					HX_STACK_LINE(702)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(702)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_179{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
				{
					HX_STACK_LINE(702)
					{
					}
					HX_STACK_LINE(702)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(702)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(702)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(702)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(702)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(702)
						ret->zpp_pool = null();
						HX_STACK_LINE(702)
						ret->zpp_disp = false;
						HX_STACK_LINE(702)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(702)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(702)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
								{
									HX_STACK_LINE(702)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(702)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(702)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(702)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(702)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(702)
											ret1->next = null();
										}
										HX_STACK_LINE(702)
										ret1->weak = false;
									}
									HX_STACK_LINE(702)
									ret1->_immutable = immutable;
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										ret1->x = 111.5;
										HX_STACK_LINE(702)
										ret1->y = (int)146;
										HX_STACK_LINE(702)
										{
										}
										HX_STACK_LINE(702)
										{
										}
									}
									HX_STACK_LINE(702)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(702)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(702)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(702)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(702)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(702)
						{
							HX_STACK_LINE(702)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(702)
							if ((_this->_immutable)){
								HX_STACK_LINE(702)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(702)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(702)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(702)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
								{
									HX_STACK_LINE(702)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(702)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(702)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(702)
											_this->_validate();
										}
									}
									HX_STACK_LINE(702)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
								{
									HX_STACK_LINE(702)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(702)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(702)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(702)
											_this->_validate();
										}
									}
									HX_STACK_LINE(702)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(702)
						if ((!(((bool((_Function_3_1::Block(ret) == 111.5)) && bool((_Function_3_2::Block(ret) == (int)146))))))){
							HX_STACK_LINE(702)
							{
								HX_STACK_LINE(702)
								ret->zpp_inner->x = 111.5;
								HX_STACK_LINE(702)
								ret->zpp_inner->y = (int)146;
								HX_STACK_LINE(702)
								{
								}
								HX_STACK_LINE(702)
								{
								}
							}
							HX_STACK_LINE(702)
							{
								HX_STACK_LINE(702)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(702)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(702)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(702)
						ret;
					}
					HX_STACK_LINE(702)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(702)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_180{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
				{
					HX_STACK_LINE(702)
					{
					}
					HX_STACK_LINE(702)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(702)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(702)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(702)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(702)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(702)
						ret->zpp_pool = null();
						HX_STACK_LINE(702)
						ret->zpp_disp = false;
						HX_STACK_LINE(702)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(702)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(702)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
								{
									HX_STACK_LINE(702)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(702)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(702)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(702)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(702)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(702)
											ret1->next = null();
										}
										HX_STACK_LINE(702)
										ret1->weak = false;
									}
									HX_STACK_LINE(702)
									ret1->_immutable = immutable;
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										ret1->x = (int)131;
										HX_STACK_LINE(702)
										ret1->y = 151.5;
										HX_STACK_LINE(702)
										{
										}
										HX_STACK_LINE(702)
										{
										}
									}
									HX_STACK_LINE(702)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(702)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(702)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(702)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(702)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(702)
						{
							HX_STACK_LINE(702)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(702)
							if ((_this->_immutable)){
								HX_STACK_LINE(702)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(702)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(702)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(702)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
								{
									HX_STACK_LINE(702)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(702)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(702)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(702)
											_this->_validate();
										}
									}
									HX_STACK_LINE(702)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
								{
									HX_STACK_LINE(702)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(702)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(702)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(702)
											_this->_validate();
										}
									}
									HX_STACK_LINE(702)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(702)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)131)) && bool((_Function_3_2::Block(ret) == 151.5))))))){
							HX_STACK_LINE(702)
							{
								HX_STACK_LINE(702)
								ret->zpp_inner->x = (int)131;
								HX_STACK_LINE(702)
								ret->zpp_inner->y = 151.5;
								HX_STACK_LINE(702)
								{
								}
								HX_STACK_LINE(702)
								{
								}
							}
							HX_STACK_LINE(702)
							{
								HX_STACK_LINE(702)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(702)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(702)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(702)
						ret;
					}
					HX_STACK_LINE(702)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(702)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_181{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
				{
					HX_STACK_LINE(702)
					{
					}
					HX_STACK_LINE(702)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(702)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(702)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(702)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(702)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(702)
						ret->zpp_pool = null();
						HX_STACK_LINE(702)
						ret->zpp_disp = false;
						HX_STACK_LINE(702)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(702)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(702)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
								{
									HX_STACK_LINE(702)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(702)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(702)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(702)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(702)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(702)
											ret1->next = null();
										}
										HX_STACK_LINE(702)
										ret1->weak = false;
									}
									HX_STACK_LINE(702)
									ret1->_immutable = immutable;
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										ret1->x = (int)154;
										HX_STACK_LINE(702)
										ret1->y = 128.5;
										HX_STACK_LINE(702)
										{
										}
										HX_STACK_LINE(702)
										{
										}
									}
									HX_STACK_LINE(702)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(702)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(702)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(702)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(702)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(702)
						{
							HX_STACK_LINE(702)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(702)
							if ((_this->_immutable)){
								HX_STACK_LINE(702)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(702)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(702)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(702)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
								{
									HX_STACK_LINE(702)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(702)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(702)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(702)
											_this->_validate();
										}
									}
									HX_STACK_LINE(702)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
								{
									HX_STACK_LINE(702)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(702)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(702)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(702)
											_this->_validate();
										}
									}
									HX_STACK_LINE(702)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(702)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)154)) && bool((_Function_3_2::Block(ret) == 128.5))))))){
							HX_STACK_LINE(702)
							{
								HX_STACK_LINE(702)
								ret->zpp_inner->x = (int)154;
								HX_STACK_LINE(702)
								ret->zpp_inner->y = 128.5;
								HX_STACK_LINE(702)
								{
								}
								HX_STACK_LINE(702)
								{
								}
							}
							HX_STACK_LINE(702)
							{
								HX_STACK_LINE(702)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(702)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(702)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(702)
						ret;
					}
					HX_STACK_LINE(702)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(702)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_182{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
				{
					HX_STACK_LINE(702)
					{
					}
					HX_STACK_LINE(702)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(702)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(702)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(702)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(702)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(702)
						ret->zpp_pool = null();
						HX_STACK_LINE(702)
						ret->zpp_disp = false;
						HX_STACK_LINE(702)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(702)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(702)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
								{
									HX_STACK_LINE(702)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(702)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(702)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(702)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(702)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(702)
											ret1->next = null();
										}
										HX_STACK_LINE(702)
										ret1->weak = false;
									}
									HX_STACK_LINE(702)
									ret1->_immutable = immutable;
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										ret1->x = 172.5;
										HX_STACK_LINE(702)
										ret1->y = (int)107;
										HX_STACK_LINE(702)
										{
										}
										HX_STACK_LINE(702)
										{
										}
									}
									HX_STACK_LINE(702)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(702)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(702)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(702)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(702)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(702)
						{
							HX_STACK_LINE(702)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(702)
							if ((_this->_immutable)){
								HX_STACK_LINE(702)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(702)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(702)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(702)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
								{
									HX_STACK_LINE(702)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(702)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(702)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(702)
											_this->_validate();
										}
									}
									HX_STACK_LINE(702)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",702);
								{
									HX_STACK_LINE(702)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(702)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(702)
									{
										HX_STACK_LINE(702)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(702)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(702)
											_this->_validate();
										}
									}
									HX_STACK_LINE(702)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(702)
						if ((!(((bool((_Function_3_1::Block(ret) == 172.5)) && bool((_Function_3_2::Block(ret) == (int)107))))))){
							HX_STACK_LINE(702)
							{
								HX_STACK_LINE(702)
								ret->zpp_inner->x = 172.5;
								HX_STACK_LINE(702)
								ret->zpp_inner->y = (int)107;
								HX_STACK_LINE(702)
								{
								}
								HX_STACK_LINE(702)
								{
								}
							}
							HX_STACK_LINE(702)
							{
								HX_STACK_LINE(702)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(702)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(702)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(702)
						ret;
					}
					HX_STACK_LINE(702)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(702)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(701)
		::nape::shape::Polygon s33 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_177::Block()).Add(_Function_1_178::Block()).Add(_Function_1_179::Block()).Add(_Function_1_180::Block()).Add(_Function_1_181::Block()).Add(_Function_1_182::Block())),mat8,filt8);		HX_STACK_VAR(s33,"s33");
		HX_STACK_LINE(706)
		{
			HX_STACK_LINE(706)
			{
				HX_STACK_LINE(706)
				s33->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(706)
				if (((((  (((s33->zpp_inner->body != null()))) ? ::nape::phys::Body(s33->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body6))){
					HX_STACK_LINE(706)
					if (((s33->zpp_inner->body != null()))){
						HX_STACK_LINE(706)
						((  (((s33->zpp_inner->body != null()))) ? ::nape::phys::Body(s33->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s33);
					}
					HX_STACK_LINE(706)
					if (((body6 != null()))){
						HX_STACK_LINE(706)
						::nape::shape::ShapeList _this = body6->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(706)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(706)
							_this->push(s33);
						}
						else{
							HX_STACK_LINE(706)
							_this->unshift(s33);
						}
					}
				}
			}
			HX_STACK_LINE(706)
			if (((s33->zpp_inner->body != null()))){
				HX_STACK_LINE(706)
				s33->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(706)
				Dynamic();
			}
		}
		HX_STACK_LINE(707)
		{
			HX_STACK_LINE(707)
			{
				HX_STACK_LINE(707)
				s33->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(707)
				s33->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(707)
				s33->zpp_inner->wake();
			}
			HX_STACK_LINE(707)
			s33->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(708)
		{
			HX_STACK_LINE(708)
			{
				HX_STACK_LINE(708)
				s33->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(708)
				s33->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(708)
				{
				}
				HX_STACK_LINE(708)
				s33->zpp_inner->wake();
			}
			HX_STACK_LINE(708)
			s33->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(709)
		{
			HX_STACK_LINE(709)
			{
				HX_STACK_LINE(709)
				if (((prop8 == null()))){
					HX_STACK_LINE(709)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(709)
				s33->zpp_inner->setFluid(prop8->zpp_inner);
			}
			HX_STACK_LINE(709)
			{
				HX_STACK_LINE(709)
				s33->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(709)
				if (((s33->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(709)
					s33->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(709)
				s33->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(710)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s33){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",710);
					{
						HX_STACK_LINE(710)
						if (((s33->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(710)
							s33->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(710)
						return s33->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(710)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s33);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(710)
			{
				HX_STACK_LINE(710)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(710)
				while(((_g < _g1->length))){
					HX_STACK_LINE(710)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(710)
					++(_g);
					HX_STACK_LINE(710)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(710)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(710)
						continue;
					}
					HX_STACK_LINE(710)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(710)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(710)
					{
						HX_STACK_LINE(710)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(710)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(710)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(710)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_183{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",713);
				{
					HX_STACK_LINE(713)
					{
					}
					HX_STACK_LINE(713)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(713)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(713)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(713)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(713)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(713)
						ret->zpp_pool = null();
						HX_STACK_LINE(713)
						ret->zpp_disp = false;
						HX_STACK_LINE(713)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(713)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(713)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",713);
								{
									HX_STACK_LINE(713)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(713)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(713)
									{
										HX_STACK_LINE(713)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(713)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(713)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(713)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(713)
											ret1->next = null();
										}
										HX_STACK_LINE(713)
										ret1->weak = false;
									}
									HX_STACK_LINE(713)
									ret1->_immutable = immutable;
									HX_STACK_LINE(713)
									{
										HX_STACK_LINE(713)
										ret1->x = (int)8;
										HX_STACK_LINE(713)
										ret1->y = 59.5;
										HX_STACK_LINE(713)
										{
										}
										HX_STACK_LINE(713)
										{
										}
									}
									HX_STACK_LINE(713)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(713)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(713)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(713)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(713)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(713)
						{
							HX_STACK_LINE(713)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(713)
							if ((_this->_immutable)){
								HX_STACK_LINE(713)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(713)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(713)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(713)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",713);
								{
									HX_STACK_LINE(713)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(713)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(713)
									{
										HX_STACK_LINE(713)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(713)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(713)
											_this->_validate();
										}
									}
									HX_STACK_LINE(713)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",713);
								{
									HX_STACK_LINE(713)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(713)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(713)
									{
										HX_STACK_LINE(713)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(713)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(713)
											_this->_validate();
										}
									}
									HX_STACK_LINE(713)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(713)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)8)) && bool((_Function_3_2::Block(ret) == 59.5))))))){
							HX_STACK_LINE(713)
							{
								HX_STACK_LINE(713)
								ret->zpp_inner->x = (int)8;
								HX_STACK_LINE(713)
								ret->zpp_inner->y = 59.5;
								HX_STACK_LINE(713)
								{
								}
								HX_STACK_LINE(713)
								{
								}
							}
							HX_STACK_LINE(713)
							{
								HX_STACK_LINE(713)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(713)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(713)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(713)
						ret;
					}
					HX_STACK_LINE(713)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(713)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_184{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",713);
				{
					HX_STACK_LINE(713)
					{
					}
					HX_STACK_LINE(713)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(713)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(713)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(713)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(713)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(713)
						ret->zpp_pool = null();
						HX_STACK_LINE(713)
						ret->zpp_disp = false;
						HX_STACK_LINE(713)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(713)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(713)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",713);
								{
									HX_STACK_LINE(713)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(713)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(713)
									{
										HX_STACK_LINE(713)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(713)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(713)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(713)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(713)
											ret1->next = null();
										}
										HX_STACK_LINE(713)
										ret1->weak = false;
									}
									HX_STACK_LINE(713)
									ret1->_immutable = immutable;
									HX_STACK_LINE(713)
									{
										HX_STACK_LINE(713)
										ret1->x = 21.5;
										HX_STACK_LINE(713)
										ret1->y = (int)67;
										HX_STACK_LINE(713)
										{
										}
										HX_STACK_LINE(713)
										{
										}
									}
									HX_STACK_LINE(713)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(713)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(713)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(713)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(713)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(713)
						{
							HX_STACK_LINE(713)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(713)
							if ((_this->_immutable)){
								HX_STACK_LINE(713)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(713)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(713)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(713)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",713);
								{
									HX_STACK_LINE(713)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(713)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(713)
									{
										HX_STACK_LINE(713)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(713)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(713)
											_this->_validate();
										}
									}
									HX_STACK_LINE(713)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",713);
								{
									HX_STACK_LINE(713)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(713)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(713)
									{
										HX_STACK_LINE(713)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(713)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(713)
											_this->_validate();
										}
									}
									HX_STACK_LINE(713)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(713)
						if ((!(((bool((_Function_3_1::Block(ret) == 21.5)) && bool((_Function_3_2::Block(ret) == (int)67))))))){
							HX_STACK_LINE(713)
							{
								HX_STACK_LINE(713)
								ret->zpp_inner->x = 21.5;
								HX_STACK_LINE(713)
								ret->zpp_inner->y = (int)67;
								HX_STACK_LINE(713)
								{
								}
								HX_STACK_LINE(713)
								{
								}
							}
							HX_STACK_LINE(713)
							{
								HX_STACK_LINE(713)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(713)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(713)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(713)
						ret;
					}
					HX_STACK_LINE(713)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(713)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_185{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",713);
				{
					HX_STACK_LINE(713)
					{
					}
					HX_STACK_LINE(713)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(713)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(713)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(713)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(713)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(713)
						ret->zpp_pool = null();
						HX_STACK_LINE(713)
						ret->zpp_disp = false;
						HX_STACK_LINE(713)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(713)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(713)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",713);
								{
									HX_STACK_LINE(713)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(713)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(713)
									{
										HX_STACK_LINE(713)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(713)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(713)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(713)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(713)
											ret1->next = null();
										}
										HX_STACK_LINE(713)
										ret1->weak = false;
									}
									HX_STACK_LINE(713)
									ret1->_immutable = immutable;
									HX_STACK_LINE(713)
									{
										HX_STACK_LINE(713)
										ret1->x = (int)55;
										HX_STACK_LINE(713)
										ret1->y = 58.5;
										HX_STACK_LINE(713)
										{
										}
										HX_STACK_LINE(713)
										{
										}
									}
									HX_STACK_LINE(713)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(713)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(713)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(713)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(713)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(713)
						{
							HX_STACK_LINE(713)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(713)
							if ((_this->_immutable)){
								HX_STACK_LINE(713)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(713)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(713)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(713)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",713);
								{
									HX_STACK_LINE(713)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(713)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(713)
									{
										HX_STACK_LINE(713)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(713)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(713)
											_this->_validate();
										}
									}
									HX_STACK_LINE(713)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",713);
								{
									HX_STACK_LINE(713)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(713)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(713)
									{
										HX_STACK_LINE(713)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(713)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(713)
											_this->_validate();
										}
									}
									HX_STACK_LINE(713)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(713)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)55)) && bool((_Function_3_2::Block(ret) == 58.5))))))){
							HX_STACK_LINE(713)
							{
								HX_STACK_LINE(713)
								ret->zpp_inner->x = (int)55;
								HX_STACK_LINE(713)
								ret->zpp_inner->y = 58.5;
								HX_STACK_LINE(713)
								{
								}
								HX_STACK_LINE(713)
								{
								}
							}
							HX_STACK_LINE(713)
							{
								HX_STACK_LINE(713)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(713)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(713)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(713)
						ret;
					}
					HX_STACK_LINE(713)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(713)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_186{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",713);
				{
					HX_STACK_LINE(713)
					{
					}
					HX_STACK_LINE(713)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(713)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(713)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(713)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(713)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(713)
						ret->zpp_pool = null();
						HX_STACK_LINE(713)
						ret->zpp_disp = false;
						HX_STACK_LINE(713)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(713)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(713)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",713);
								{
									HX_STACK_LINE(713)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(713)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(713)
									{
										HX_STACK_LINE(713)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(713)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(713)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(713)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(713)
											ret1->next = null();
										}
										HX_STACK_LINE(713)
										ret1->weak = false;
									}
									HX_STACK_LINE(713)
									ret1->_immutable = immutable;
									HX_STACK_LINE(713)
									{
										HX_STACK_LINE(713)
										ret1->x = (int)15;
										HX_STACK_LINE(713)
										ret1->y = 53.5;
										HX_STACK_LINE(713)
										{
										}
										HX_STACK_LINE(713)
										{
										}
									}
									HX_STACK_LINE(713)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(713)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(713)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(713)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(713)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(713)
						{
							HX_STACK_LINE(713)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(713)
							if ((_this->_immutable)){
								HX_STACK_LINE(713)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(713)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(713)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(713)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",713);
								{
									HX_STACK_LINE(713)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(713)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(713)
									{
										HX_STACK_LINE(713)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(713)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(713)
											_this->_validate();
										}
									}
									HX_STACK_LINE(713)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",713);
								{
									HX_STACK_LINE(713)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(713)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(713)
									{
										HX_STACK_LINE(713)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(713)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(713)
											_this->_validate();
										}
									}
									HX_STACK_LINE(713)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(713)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)15)) && bool((_Function_3_2::Block(ret) == 53.5))))))){
							HX_STACK_LINE(713)
							{
								HX_STACK_LINE(713)
								ret->zpp_inner->x = (int)15;
								HX_STACK_LINE(713)
								ret->zpp_inner->y = 53.5;
								HX_STACK_LINE(713)
								{
								}
								HX_STACK_LINE(713)
								{
								}
							}
							HX_STACK_LINE(713)
							{
								HX_STACK_LINE(713)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(713)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(713)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(713)
						ret;
					}
					HX_STACK_LINE(713)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(713)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(712)
		::nape::shape::Polygon s34 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_183::Block()).Add(_Function_1_184::Block()).Add(_Function_1_185::Block()).Add(_Function_1_186::Block())),mat8,filt8);		HX_STACK_VAR(s34,"s34");
		HX_STACK_LINE(717)
		{
			HX_STACK_LINE(717)
			{
				HX_STACK_LINE(717)
				s34->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(717)
				if (((((  (((s34->zpp_inner->body != null()))) ? ::nape::phys::Body(s34->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body6))){
					HX_STACK_LINE(717)
					if (((s34->zpp_inner->body != null()))){
						HX_STACK_LINE(717)
						((  (((s34->zpp_inner->body != null()))) ? ::nape::phys::Body(s34->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s34);
					}
					HX_STACK_LINE(717)
					if (((body6 != null()))){
						HX_STACK_LINE(717)
						::nape::shape::ShapeList _this = body6->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(717)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(717)
							_this->push(s34);
						}
						else{
							HX_STACK_LINE(717)
							_this->unshift(s34);
						}
					}
				}
			}
			HX_STACK_LINE(717)
			if (((s34->zpp_inner->body != null()))){
				HX_STACK_LINE(717)
				s34->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(717)
				Dynamic();
			}
		}
		HX_STACK_LINE(718)
		{
			HX_STACK_LINE(718)
			{
				HX_STACK_LINE(718)
				s34->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(718)
				s34->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(718)
				s34->zpp_inner->wake();
			}
			HX_STACK_LINE(718)
			s34->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(719)
		{
			HX_STACK_LINE(719)
			{
				HX_STACK_LINE(719)
				s34->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(719)
				s34->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(719)
				{
				}
				HX_STACK_LINE(719)
				s34->zpp_inner->wake();
			}
			HX_STACK_LINE(719)
			s34->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(720)
		{
			HX_STACK_LINE(720)
			{
				HX_STACK_LINE(720)
				if (((prop8 == null()))){
					HX_STACK_LINE(720)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(720)
				s34->zpp_inner->setFluid(prop8->zpp_inner);
			}
			HX_STACK_LINE(720)
			{
				HX_STACK_LINE(720)
				s34->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(720)
				if (((s34->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(720)
					s34->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(720)
				s34->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(721)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s34){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",721);
					{
						HX_STACK_LINE(721)
						if (((s34->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(721)
							s34->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(721)
						return s34->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(721)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s34);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(721)
			{
				HX_STACK_LINE(721)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(721)
				while(((_g < _g1->length))){
					HX_STACK_LINE(721)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(721)
					++(_g);
					HX_STACK_LINE(721)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(721)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(721)
						continue;
					}
					HX_STACK_LINE(721)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(721)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(721)
					{
						HX_STACK_LINE(721)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(721)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(721)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(721)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_187{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",724);
				{
					HX_STACK_LINE(724)
					{
					}
					HX_STACK_LINE(724)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(724)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(724)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(724)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(724)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(724)
						ret->zpp_pool = null();
						HX_STACK_LINE(724)
						ret->zpp_disp = false;
						HX_STACK_LINE(724)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(724)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(724)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",724);
								{
									HX_STACK_LINE(724)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(724)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(724)
									{
										HX_STACK_LINE(724)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(724)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(724)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(724)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(724)
											ret1->next = null();
										}
										HX_STACK_LINE(724)
										ret1->weak = false;
									}
									HX_STACK_LINE(724)
									ret1->_immutable = immutable;
									HX_STACK_LINE(724)
									{
										HX_STACK_LINE(724)
										ret1->x = 166.5;
										HX_STACK_LINE(724)
										ret1->y = (int)143;
										HX_STACK_LINE(724)
										{
										}
										HX_STACK_LINE(724)
										{
										}
									}
									HX_STACK_LINE(724)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(724)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(724)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(724)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(724)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(724)
						{
							HX_STACK_LINE(724)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(724)
							if ((_this->_immutable)){
								HX_STACK_LINE(724)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(724)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(724)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(724)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",724);
								{
									HX_STACK_LINE(724)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(724)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(724)
									{
										HX_STACK_LINE(724)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(724)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(724)
											_this->_validate();
										}
									}
									HX_STACK_LINE(724)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",724);
								{
									HX_STACK_LINE(724)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(724)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(724)
									{
										HX_STACK_LINE(724)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(724)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(724)
											_this->_validate();
										}
									}
									HX_STACK_LINE(724)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(724)
						if ((!(((bool((_Function_3_1::Block(ret) == 166.5)) && bool((_Function_3_2::Block(ret) == (int)143))))))){
							HX_STACK_LINE(724)
							{
								HX_STACK_LINE(724)
								ret->zpp_inner->x = 166.5;
								HX_STACK_LINE(724)
								ret->zpp_inner->y = (int)143;
								HX_STACK_LINE(724)
								{
								}
								HX_STACK_LINE(724)
								{
								}
							}
							HX_STACK_LINE(724)
							{
								HX_STACK_LINE(724)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(724)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(724)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(724)
						ret;
					}
					HX_STACK_LINE(724)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(724)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_188{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",724);
				{
					HX_STACK_LINE(724)
					{
					}
					HX_STACK_LINE(724)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(724)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(724)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(724)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(724)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(724)
						ret->zpp_pool = null();
						HX_STACK_LINE(724)
						ret->zpp_disp = false;
						HX_STACK_LINE(724)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(724)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(724)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",724);
								{
									HX_STACK_LINE(724)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(724)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(724)
									{
										HX_STACK_LINE(724)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(724)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(724)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(724)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(724)
											ret1->next = null();
										}
										HX_STACK_LINE(724)
										ret1->weak = false;
									}
									HX_STACK_LINE(724)
									ret1->_immutable = immutable;
									HX_STACK_LINE(724)
									{
										HX_STACK_LINE(724)
										ret1->x = (int)154;
										HX_STACK_LINE(724)
										ret1->y = 128.5;
										HX_STACK_LINE(724)
										{
										}
										HX_STACK_LINE(724)
										{
										}
									}
									HX_STACK_LINE(724)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(724)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(724)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(724)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(724)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(724)
						{
							HX_STACK_LINE(724)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(724)
							if ((_this->_immutable)){
								HX_STACK_LINE(724)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(724)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(724)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(724)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",724);
								{
									HX_STACK_LINE(724)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(724)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(724)
									{
										HX_STACK_LINE(724)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(724)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(724)
											_this->_validate();
										}
									}
									HX_STACK_LINE(724)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",724);
								{
									HX_STACK_LINE(724)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(724)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(724)
									{
										HX_STACK_LINE(724)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(724)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(724)
											_this->_validate();
										}
									}
									HX_STACK_LINE(724)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(724)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)154)) && bool((_Function_3_2::Block(ret) == 128.5))))))){
							HX_STACK_LINE(724)
							{
								HX_STACK_LINE(724)
								ret->zpp_inner->x = (int)154;
								HX_STACK_LINE(724)
								ret->zpp_inner->y = 128.5;
								HX_STACK_LINE(724)
								{
								}
								HX_STACK_LINE(724)
								{
								}
							}
							HX_STACK_LINE(724)
							{
								HX_STACK_LINE(724)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(724)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(724)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(724)
						ret;
					}
					HX_STACK_LINE(724)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(724)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_189{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",724);
				{
					HX_STACK_LINE(724)
					{
					}
					HX_STACK_LINE(724)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(724)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(724)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(724)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(724)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(724)
						ret->zpp_pool = null();
						HX_STACK_LINE(724)
						ret->zpp_disp = false;
						HX_STACK_LINE(724)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(724)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(724)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",724);
								{
									HX_STACK_LINE(724)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(724)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(724)
									{
										HX_STACK_LINE(724)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(724)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(724)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(724)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(724)
											ret1->next = null();
										}
										HX_STACK_LINE(724)
										ret1->weak = false;
									}
									HX_STACK_LINE(724)
									ret1->_immutable = immutable;
									HX_STACK_LINE(724)
									{
										HX_STACK_LINE(724)
										ret1->x = (int)131;
										HX_STACK_LINE(724)
										ret1->y = 151.5;
										HX_STACK_LINE(724)
										{
										}
										HX_STACK_LINE(724)
										{
										}
									}
									HX_STACK_LINE(724)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(724)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(724)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(724)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(724)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(724)
						{
							HX_STACK_LINE(724)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(724)
							if ((_this->_immutable)){
								HX_STACK_LINE(724)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(724)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(724)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(724)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",724);
								{
									HX_STACK_LINE(724)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(724)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(724)
									{
										HX_STACK_LINE(724)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(724)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(724)
											_this->_validate();
										}
									}
									HX_STACK_LINE(724)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",724);
								{
									HX_STACK_LINE(724)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(724)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(724)
									{
										HX_STACK_LINE(724)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(724)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(724)
											_this->_validate();
										}
									}
									HX_STACK_LINE(724)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(724)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)131)) && bool((_Function_3_2::Block(ret) == 151.5))))))){
							HX_STACK_LINE(724)
							{
								HX_STACK_LINE(724)
								ret->zpp_inner->x = (int)131;
								HX_STACK_LINE(724)
								ret->zpp_inner->y = 151.5;
								HX_STACK_LINE(724)
								{
								}
								HX_STACK_LINE(724)
								{
								}
							}
							HX_STACK_LINE(724)
							{
								HX_STACK_LINE(724)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(724)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(724)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(724)
						ret;
					}
					HX_STACK_LINE(724)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(724)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(723)
		::nape::shape::Polygon s35 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_187::Block()).Add(_Function_1_188::Block()).Add(_Function_1_189::Block())),mat8,filt8);		HX_STACK_VAR(s35,"s35");
		HX_STACK_LINE(728)
		{
			HX_STACK_LINE(728)
			{
				HX_STACK_LINE(728)
				s35->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(728)
				if (((((  (((s35->zpp_inner->body != null()))) ? ::nape::phys::Body(s35->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body6))){
					HX_STACK_LINE(728)
					if (((s35->zpp_inner->body != null()))){
						HX_STACK_LINE(728)
						((  (((s35->zpp_inner->body != null()))) ? ::nape::phys::Body(s35->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s35);
					}
					HX_STACK_LINE(728)
					if (((body6 != null()))){
						HX_STACK_LINE(728)
						::nape::shape::ShapeList _this = body6->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(728)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(728)
							_this->push(s35);
						}
						else{
							HX_STACK_LINE(728)
							_this->unshift(s35);
						}
					}
				}
			}
			HX_STACK_LINE(728)
			if (((s35->zpp_inner->body != null()))){
				HX_STACK_LINE(728)
				s35->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(728)
				Dynamic();
			}
		}
		HX_STACK_LINE(729)
		{
			HX_STACK_LINE(729)
			{
				HX_STACK_LINE(729)
				s35->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(729)
				s35->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(729)
				s35->zpp_inner->wake();
			}
			HX_STACK_LINE(729)
			s35->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(730)
		{
			HX_STACK_LINE(730)
			{
				HX_STACK_LINE(730)
				s35->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(730)
				s35->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(730)
				{
				}
				HX_STACK_LINE(730)
				s35->zpp_inner->wake();
			}
			HX_STACK_LINE(730)
			s35->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(731)
		{
			HX_STACK_LINE(731)
			{
				HX_STACK_LINE(731)
				if (((prop8 == null()))){
					HX_STACK_LINE(731)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(731)
				s35->zpp_inner->setFluid(prop8->zpp_inner);
			}
			HX_STACK_LINE(731)
			{
				HX_STACK_LINE(731)
				s35->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(731)
				if (((s35->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(731)
					s35->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(731)
				s35->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(732)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s35){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",732);
					{
						HX_STACK_LINE(732)
						if (((s35->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(732)
							s35->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(732)
						return s35->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(732)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s35);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(732)
			{
				HX_STACK_LINE(732)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(732)
				while(((_g < _g1->length))){
					HX_STACK_LINE(732)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(732)
					++(_g);
					HX_STACK_LINE(732)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(732)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(732)
						continue;
					}
					HX_STACK_LINE(732)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(732)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(732)
					{
						HX_STACK_LINE(732)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(732)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(732)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(732)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_190{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",735);
				{
					HX_STACK_LINE(735)
					{
					}
					HX_STACK_LINE(735)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(735)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(735)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(735)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(735)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(735)
						ret->zpp_pool = null();
						HX_STACK_LINE(735)
						ret->zpp_disp = false;
						HX_STACK_LINE(735)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(735)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(735)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",735);
								{
									HX_STACK_LINE(735)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(735)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(735)
									{
										HX_STACK_LINE(735)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(735)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(735)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(735)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(735)
											ret1->next = null();
										}
										HX_STACK_LINE(735)
										ret1->weak = false;
									}
									HX_STACK_LINE(735)
									ret1->_immutable = immutable;
									HX_STACK_LINE(735)
									{
										HX_STACK_LINE(735)
										ret1->x = 73.5;
										HX_STACK_LINE(735)
										ret1->y = (int)37;
										HX_STACK_LINE(735)
										{
										}
										HX_STACK_LINE(735)
										{
										}
									}
									HX_STACK_LINE(735)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(735)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(735)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(735)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(735)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(735)
						{
							HX_STACK_LINE(735)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(735)
							if ((_this->_immutable)){
								HX_STACK_LINE(735)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(735)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(735)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(735)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",735);
								{
									HX_STACK_LINE(735)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(735)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(735)
									{
										HX_STACK_LINE(735)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(735)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(735)
											_this->_validate();
										}
									}
									HX_STACK_LINE(735)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",735);
								{
									HX_STACK_LINE(735)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(735)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(735)
									{
										HX_STACK_LINE(735)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(735)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(735)
											_this->_validate();
										}
									}
									HX_STACK_LINE(735)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(735)
						if ((!(((bool((_Function_3_1::Block(ret) == 73.5)) && bool((_Function_3_2::Block(ret) == (int)37))))))){
							HX_STACK_LINE(735)
							{
								HX_STACK_LINE(735)
								ret->zpp_inner->x = 73.5;
								HX_STACK_LINE(735)
								ret->zpp_inner->y = (int)37;
								HX_STACK_LINE(735)
								{
								}
								HX_STACK_LINE(735)
								{
								}
							}
							HX_STACK_LINE(735)
							{
								HX_STACK_LINE(735)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(735)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(735)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(735)
						ret;
					}
					HX_STACK_LINE(735)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(735)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_191{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",735);
				{
					HX_STACK_LINE(735)
					{
					}
					HX_STACK_LINE(735)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(735)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(735)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(735)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(735)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(735)
						ret->zpp_pool = null();
						HX_STACK_LINE(735)
						ret->zpp_disp = false;
						HX_STACK_LINE(735)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(735)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(735)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",735);
								{
									HX_STACK_LINE(735)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(735)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(735)
									{
										HX_STACK_LINE(735)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(735)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(735)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(735)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(735)
											ret1->next = null();
										}
										HX_STACK_LINE(735)
										ret1->weak = false;
									}
									HX_STACK_LINE(735)
									ret1->_immutable = immutable;
									HX_STACK_LINE(735)
									{
										HX_STACK_LINE(735)
										ret1->x = 80.5;
										HX_STACK_LINE(735)
										ret1->y = (int)67;
										HX_STACK_LINE(735)
										{
										}
										HX_STACK_LINE(735)
										{
										}
									}
									HX_STACK_LINE(735)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(735)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(735)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(735)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(735)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(735)
						{
							HX_STACK_LINE(735)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(735)
							if ((_this->_immutable)){
								HX_STACK_LINE(735)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(735)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(735)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(735)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",735);
								{
									HX_STACK_LINE(735)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(735)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(735)
									{
										HX_STACK_LINE(735)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(735)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(735)
											_this->_validate();
										}
									}
									HX_STACK_LINE(735)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",735);
								{
									HX_STACK_LINE(735)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(735)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(735)
									{
										HX_STACK_LINE(735)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(735)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(735)
											_this->_validate();
										}
									}
									HX_STACK_LINE(735)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(735)
						if ((!(((bool((_Function_3_1::Block(ret) == 80.5)) && bool((_Function_3_2::Block(ret) == (int)67))))))){
							HX_STACK_LINE(735)
							{
								HX_STACK_LINE(735)
								ret->zpp_inner->x = 80.5;
								HX_STACK_LINE(735)
								ret->zpp_inner->y = (int)67;
								HX_STACK_LINE(735)
								{
								}
								HX_STACK_LINE(735)
								{
								}
							}
							HX_STACK_LINE(735)
							{
								HX_STACK_LINE(735)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(735)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(735)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(735)
						ret;
					}
					HX_STACK_LINE(735)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(735)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_192{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",735);
				{
					HX_STACK_LINE(735)
					{
					}
					HX_STACK_LINE(735)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(735)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(735)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(735)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(735)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(735)
						ret->zpp_pool = null();
						HX_STACK_LINE(735)
						ret->zpp_disp = false;
						HX_STACK_LINE(735)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(735)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(735)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",735);
								{
									HX_STACK_LINE(735)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(735)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(735)
									{
										HX_STACK_LINE(735)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(735)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(735)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(735)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(735)
											ret1->next = null();
										}
										HX_STACK_LINE(735)
										ret1->weak = false;
									}
									HX_STACK_LINE(735)
									ret1->_immutable = immutable;
									HX_STACK_LINE(735)
									{
										HX_STACK_LINE(735)
										ret1->x = (int)89;
										HX_STACK_LINE(735)
										ret1->y = 36.5;
										HX_STACK_LINE(735)
										{
										}
										HX_STACK_LINE(735)
										{
										}
									}
									HX_STACK_LINE(735)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(735)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(735)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(735)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(735)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(735)
						{
							HX_STACK_LINE(735)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(735)
							if ((_this->_immutable)){
								HX_STACK_LINE(735)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(735)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(735)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(735)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",735);
								{
									HX_STACK_LINE(735)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(735)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(735)
									{
										HX_STACK_LINE(735)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(735)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(735)
											_this->_validate();
										}
									}
									HX_STACK_LINE(735)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",735);
								{
									HX_STACK_LINE(735)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(735)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(735)
									{
										HX_STACK_LINE(735)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(735)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(735)
											_this->_validate();
										}
									}
									HX_STACK_LINE(735)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(735)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)89)) && bool((_Function_3_2::Block(ret) == 36.5))))))){
							HX_STACK_LINE(735)
							{
								HX_STACK_LINE(735)
								ret->zpp_inner->x = (int)89;
								HX_STACK_LINE(735)
								ret->zpp_inner->y = 36.5;
								HX_STACK_LINE(735)
								{
								}
								HX_STACK_LINE(735)
								{
								}
							}
							HX_STACK_LINE(735)
							{
								HX_STACK_LINE(735)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(735)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(735)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(735)
						ret;
					}
					HX_STACK_LINE(735)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(735)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(734)
		::nape::shape::Polygon s36 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_190::Block()).Add(_Function_1_191::Block()).Add(_Function_1_192::Block())),mat8,filt8);		HX_STACK_VAR(s36,"s36");
		HX_STACK_LINE(739)
		{
			HX_STACK_LINE(739)
			{
				HX_STACK_LINE(739)
				s36->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(739)
				if (((((  (((s36->zpp_inner->body != null()))) ? ::nape::phys::Body(s36->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body6))){
					HX_STACK_LINE(739)
					if (((s36->zpp_inner->body != null()))){
						HX_STACK_LINE(739)
						((  (((s36->zpp_inner->body != null()))) ? ::nape::phys::Body(s36->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s36);
					}
					HX_STACK_LINE(739)
					if (((body6 != null()))){
						HX_STACK_LINE(739)
						::nape::shape::ShapeList _this = body6->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(739)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(739)
							_this->push(s36);
						}
						else{
							HX_STACK_LINE(739)
							_this->unshift(s36);
						}
					}
				}
			}
			HX_STACK_LINE(739)
			if (((s36->zpp_inner->body != null()))){
				HX_STACK_LINE(739)
				s36->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(739)
				Dynamic();
			}
		}
		HX_STACK_LINE(740)
		{
			HX_STACK_LINE(740)
			{
				HX_STACK_LINE(740)
				s36->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(740)
				s36->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(740)
				s36->zpp_inner->wake();
			}
			HX_STACK_LINE(740)
			s36->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(741)
		{
			HX_STACK_LINE(741)
			{
				HX_STACK_LINE(741)
				s36->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(741)
				s36->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(741)
				{
				}
				HX_STACK_LINE(741)
				s36->zpp_inner->wake();
			}
			HX_STACK_LINE(741)
			s36->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(742)
		{
			HX_STACK_LINE(742)
			{
				HX_STACK_LINE(742)
				if (((prop8 == null()))){
					HX_STACK_LINE(742)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(742)
				s36->zpp_inner->setFluid(prop8->zpp_inner);
			}
			HX_STACK_LINE(742)
			{
				HX_STACK_LINE(742)
				s36->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(742)
				if (((s36->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(742)
					s36->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(742)
				s36->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(743)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s36){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",743);
					{
						HX_STACK_LINE(743)
						if (((s36->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(743)
							s36->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(743)
						return s36->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(743)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s36);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(743)
			{
				HX_STACK_LINE(743)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(743)
				while(((_g < _g1->length))){
					HX_STACK_LINE(743)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(743)
					++(_g);
					HX_STACK_LINE(743)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(743)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(743)
						continue;
					}
					HX_STACK_LINE(743)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(743)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(743)
					{
						HX_STACK_LINE(743)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(743)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(743)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(743)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_193{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",746);
				{
					HX_STACK_LINE(746)
					{
					}
					HX_STACK_LINE(746)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(746)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(746)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(746)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(746)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(746)
						ret->zpp_pool = null();
						HX_STACK_LINE(746)
						ret->zpp_disp = false;
						HX_STACK_LINE(746)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(746)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(746)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",746);
								{
									HX_STACK_LINE(746)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(746)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(746)
									{
										HX_STACK_LINE(746)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(746)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(746)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(746)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(746)
											ret1->next = null();
										}
										HX_STACK_LINE(746)
										ret1->weak = false;
									}
									HX_STACK_LINE(746)
									ret1->_immutable = immutable;
									HX_STACK_LINE(746)
									{
										HX_STACK_LINE(746)
										ret1->x = 183.5;
										HX_STACK_LINE(746)
										ret1->y = (int)117;
										HX_STACK_LINE(746)
										{
										}
										HX_STACK_LINE(746)
										{
										}
									}
									HX_STACK_LINE(746)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(746)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(746)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(746)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(746)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(746)
						{
							HX_STACK_LINE(746)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(746)
							if ((_this->_immutable)){
								HX_STACK_LINE(746)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(746)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(746)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(746)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",746);
								{
									HX_STACK_LINE(746)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(746)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(746)
									{
										HX_STACK_LINE(746)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(746)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(746)
											_this->_validate();
										}
									}
									HX_STACK_LINE(746)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",746);
								{
									HX_STACK_LINE(746)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(746)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(746)
									{
										HX_STACK_LINE(746)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(746)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(746)
											_this->_validate();
										}
									}
									HX_STACK_LINE(746)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(746)
						if ((!(((bool((_Function_3_1::Block(ret) == 183.5)) && bool((_Function_3_2::Block(ret) == (int)117))))))){
							HX_STACK_LINE(746)
							{
								HX_STACK_LINE(746)
								ret->zpp_inner->x = 183.5;
								HX_STACK_LINE(746)
								ret->zpp_inner->y = (int)117;
								HX_STACK_LINE(746)
								{
								}
								HX_STACK_LINE(746)
								{
								}
							}
							HX_STACK_LINE(746)
							{
								HX_STACK_LINE(746)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(746)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(746)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(746)
						ret;
					}
					HX_STACK_LINE(746)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(746)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_194{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",746);
				{
					HX_STACK_LINE(746)
					{
					}
					HX_STACK_LINE(746)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(746)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(746)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(746)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(746)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(746)
						ret->zpp_pool = null();
						HX_STACK_LINE(746)
						ret->zpp_disp = false;
						HX_STACK_LINE(746)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(746)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(746)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",746);
								{
									HX_STACK_LINE(746)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(746)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(746)
									{
										HX_STACK_LINE(746)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(746)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(746)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(746)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(746)
											ret1->next = null();
										}
										HX_STACK_LINE(746)
										ret1->weak = false;
									}
									HX_STACK_LINE(746)
									ret1->_immutable = immutable;
									HX_STACK_LINE(746)
									{
										HX_STACK_LINE(746)
										ret1->x = 172.5;
										HX_STACK_LINE(746)
										ret1->y = (int)107;
										HX_STACK_LINE(746)
										{
										}
										HX_STACK_LINE(746)
										{
										}
									}
									HX_STACK_LINE(746)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(746)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(746)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(746)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(746)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(746)
						{
							HX_STACK_LINE(746)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(746)
							if ((_this->_immutable)){
								HX_STACK_LINE(746)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(746)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(746)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(746)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",746);
								{
									HX_STACK_LINE(746)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(746)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(746)
									{
										HX_STACK_LINE(746)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(746)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(746)
											_this->_validate();
										}
									}
									HX_STACK_LINE(746)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",746);
								{
									HX_STACK_LINE(746)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(746)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(746)
									{
										HX_STACK_LINE(746)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(746)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(746)
											_this->_validate();
										}
									}
									HX_STACK_LINE(746)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(746)
						if ((!(((bool((_Function_3_1::Block(ret) == 172.5)) && bool((_Function_3_2::Block(ret) == (int)107))))))){
							HX_STACK_LINE(746)
							{
								HX_STACK_LINE(746)
								ret->zpp_inner->x = 172.5;
								HX_STACK_LINE(746)
								ret->zpp_inner->y = (int)107;
								HX_STACK_LINE(746)
								{
								}
								HX_STACK_LINE(746)
								{
								}
							}
							HX_STACK_LINE(746)
							{
								HX_STACK_LINE(746)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(746)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(746)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(746)
						ret;
					}
					HX_STACK_LINE(746)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(746)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_195{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",746);
				{
					HX_STACK_LINE(746)
					{
					}
					HX_STACK_LINE(746)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(746)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(746)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(746)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(746)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(746)
						ret->zpp_pool = null();
						HX_STACK_LINE(746)
						ret->zpp_disp = false;
						HX_STACK_LINE(746)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(746)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(746)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",746);
								{
									HX_STACK_LINE(746)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(746)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(746)
									{
										HX_STACK_LINE(746)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(746)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(746)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(746)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(746)
											ret1->next = null();
										}
										HX_STACK_LINE(746)
										ret1->weak = false;
									}
									HX_STACK_LINE(746)
									ret1->_immutable = immutable;
									HX_STACK_LINE(746)
									{
										HX_STACK_LINE(746)
										ret1->x = (int)154;
										HX_STACK_LINE(746)
										ret1->y = 128.5;
										HX_STACK_LINE(746)
										{
										}
										HX_STACK_LINE(746)
										{
										}
									}
									HX_STACK_LINE(746)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(746)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(746)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(746)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(746)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(746)
						{
							HX_STACK_LINE(746)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(746)
							if ((_this->_immutable)){
								HX_STACK_LINE(746)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(746)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(746)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(746)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",746);
								{
									HX_STACK_LINE(746)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(746)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(746)
									{
										HX_STACK_LINE(746)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(746)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(746)
											_this->_validate();
										}
									}
									HX_STACK_LINE(746)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",746);
								{
									HX_STACK_LINE(746)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(746)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(746)
									{
										HX_STACK_LINE(746)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(746)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(746)
											_this->_validate();
										}
									}
									HX_STACK_LINE(746)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(746)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)154)) && bool((_Function_3_2::Block(ret) == 128.5))))))){
							HX_STACK_LINE(746)
							{
								HX_STACK_LINE(746)
								ret->zpp_inner->x = (int)154;
								HX_STACK_LINE(746)
								ret->zpp_inner->y = 128.5;
								HX_STACK_LINE(746)
								{
								}
								HX_STACK_LINE(746)
								{
								}
							}
							HX_STACK_LINE(746)
							{
								HX_STACK_LINE(746)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(746)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(746)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(746)
						ret;
					}
					HX_STACK_LINE(746)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(746)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(745)
		::nape::shape::Polygon s37 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_193::Block()).Add(_Function_1_194::Block()).Add(_Function_1_195::Block())),mat8,filt8);		HX_STACK_VAR(s37,"s37");
		HX_STACK_LINE(750)
		{
			HX_STACK_LINE(750)
			{
				HX_STACK_LINE(750)
				s37->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(750)
				if (((((  (((s37->zpp_inner->body != null()))) ? ::nape::phys::Body(s37->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body6))){
					HX_STACK_LINE(750)
					if (((s37->zpp_inner->body != null()))){
						HX_STACK_LINE(750)
						((  (((s37->zpp_inner->body != null()))) ? ::nape::phys::Body(s37->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s37);
					}
					HX_STACK_LINE(750)
					if (((body6 != null()))){
						HX_STACK_LINE(750)
						::nape::shape::ShapeList _this = body6->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(750)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(750)
							_this->push(s37);
						}
						else{
							HX_STACK_LINE(750)
							_this->unshift(s37);
						}
					}
				}
			}
			HX_STACK_LINE(750)
			if (((s37->zpp_inner->body != null()))){
				HX_STACK_LINE(750)
				s37->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(750)
				Dynamic();
			}
		}
		HX_STACK_LINE(751)
		{
			HX_STACK_LINE(751)
			{
				HX_STACK_LINE(751)
				s37->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(751)
				s37->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(751)
				s37->zpp_inner->wake();
			}
			HX_STACK_LINE(751)
			s37->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(752)
		{
			HX_STACK_LINE(752)
			{
				HX_STACK_LINE(752)
				s37->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(752)
				s37->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(752)
				{
				}
				HX_STACK_LINE(752)
				s37->zpp_inner->wake();
			}
			HX_STACK_LINE(752)
			s37->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(753)
		{
			HX_STACK_LINE(753)
			{
				HX_STACK_LINE(753)
				if (((prop8 == null()))){
					HX_STACK_LINE(753)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(753)
				s37->zpp_inner->setFluid(prop8->zpp_inner);
			}
			HX_STACK_LINE(753)
			{
				HX_STACK_LINE(753)
				s37->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(753)
				if (((s37->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(753)
					s37->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(753)
				s37->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(754)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s37){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",754);
					{
						HX_STACK_LINE(754)
						if (((s37->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(754)
							s37->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(754)
						return s37->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(754)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s37);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(754)
			{
				HX_STACK_LINE(754)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(754)
				while(((_g < _g1->length))){
					HX_STACK_LINE(754)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(754)
					++(_g);
					HX_STACK_LINE(754)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(754)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(754)
						continue;
					}
					HX_STACK_LINE(754)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(754)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(754)
					{
						HX_STACK_LINE(754)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(754)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(754)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(754)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_196{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",757);
				{
					HX_STACK_LINE(757)
					{
					}
					HX_STACK_LINE(757)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(757)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(757)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(757)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(757)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(757)
						ret->zpp_pool = null();
						HX_STACK_LINE(757)
						ret->zpp_disp = false;
						HX_STACK_LINE(757)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(757)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(757)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",757);
								{
									HX_STACK_LINE(757)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(757)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(757)
									{
										HX_STACK_LINE(757)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(757)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(757)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(757)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(757)
											ret1->next = null();
										}
										HX_STACK_LINE(757)
										ret1->weak = false;
									}
									HX_STACK_LINE(757)
									ret1->_immutable = immutable;
									HX_STACK_LINE(757)
									{
										HX_STACK_LINE(757)
										ret1->x = (int)36;
										HX_STACK_LINE(757)
										ret1->y = 145.5;
										HX_STACK_LINE(757)
										{
										}
										HX_STACK_LINE(757)
										{
										}
									}
									HX_STACK_LINE(757)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(757)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(757)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(757)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(757)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(757)
						{
							HX_STACK_LINE(757)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(757)
							if ((_this->_immutable)){
								HX_STACK_LINE(757)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(757)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(757)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(757)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",757);
								{
									HX_STACK_LINE(757)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(757)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(757)
									{
										HX_STACK_LINE(757)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(757)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(757)
											_this->_validate();
										}
									}
									HX_STACK_LINE(757)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",757);
								{
									HX_STACK_LINE(757)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(757)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(757)
									{
										HX_STACK_LINE(757)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(757)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(757)
											_this->_validate();
										}
									}
									HX_STACK_LINE(757)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(757)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)36)) && bool((_Function_3_2::Block(ret) == 145.5))))))){
							HX_STACK_LINE(757)
							{
								HX_STACK_LINE(757)
								ret->zpp_inner->x = (int)36;
								HX_STACK_LINE(757)
								ret->zpp_inner->y = 145.5;
								HX_STACK_LINE(757)
								{
								}
								HX_STACK_LINE(757)
								{
								}
							}
							HX_STACK_LINE(757)
							{
								HX_STACK_LINE(757)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(757)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(757)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(757)
						ret;
					}
					HX_STACK_LINE(757)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(757)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_197{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",757);
				{
					HX_STACK_LINE(757)
					{
					}
					HX_STACK_LINE(757)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(757)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(757)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(757)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(757)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(757)
						ret->zpp_pool = null();
						HX_STACK_LINE(757)
						ret->zpp_disp = false;
						HX_STACK_LINE(757)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(757)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(757)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",757);
								{
									HX_STACK_LINE(757)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(757)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(757)
									{
										HX_STACK_LINE(757)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(757)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(757)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(757)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(757)
											ret1->next = null();
										}
										HX_STACK_LINE(757)
										ret1->weak = false;
									}
									HX_STACK_LINE(757)
									ret1->_immutable = immutable;
									HX_STACK_LINE(757)
									{
										HX_STACK_LINE(757)
										ret1->x = 106.5;
										HX_STACK_LINE(757)
										ret1->y = (int)148;
										HX_STACK_LINE(757)
										{
										}
										HX_STACK_LINE(757)
										{
										}
									}
									HX_STACK_LINE(757)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(757)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(757)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(757)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(757)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(757)
						{
							HX_STACK_LINE(757)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(757)
							if ((_this->_immutable)){
								HX_STACK_LINE(757)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(757)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(757)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(757)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",757);
								{
									HX_STACK_LINE(757)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(757)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(757)
									{
										HX_STACK_LINE(757)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(757)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(757)
											_this->_validate();
										}
									}
									HX_STACK_LINE(757)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",757);
								{
									HX_STACK_LINE(757)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(757)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(757)
									{
										HX_STACK_LINE(757)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(757)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(757)
											_this->_validate();
										}
									}
									HX_STACK_LINE(757)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(757)
						if ((!(((bool((_Function_3_1::Block(ret) == 106.5)) && bool((_Function_3_2::Block(ret) == (int)148))))))){
							HX_STACK_LINE(757)
							{
								HX_STACK_LINE(757)
								ret->zpp_inner->x = 106.5;
								HX_STACK_LINE(757)
								ret->zpp_inner->y = (int)148;
								HX_STACK_LINE(757)
								{
								}
								HX_STACK_LINE(757)
								{
								}
							}
							HX_STACK_LINE(757)
							{
								HX_STACK_LINE(757)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(757)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(757)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(757)
						ret;
					}
					HX_STACK_LINE(757)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(757)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_198{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",757);
				{
					HX_STACK_LINE(757)
					{
					}
					HX_STACK_LINE(757)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(757)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(757)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(757)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(757)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(757)
						ret->zpp_pool = null();
						HX_STACK_LINE(757)
						ret->zpp_disp = false;
						HX_STACK_LINE(757)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(757)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(757)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",757);
								{
									HX_STACK_LINE(757)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(757)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(757)
									{
										HX_STACK_LINE(757)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(757)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(757)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(757)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(757)
											ret1->next = null();
										}
										HX_STACK_LINE(757)
										ret1->weak = false;
									}
									HX_STACK_LINE(757)
									ret1->_immutable = immutable;
									HX_STACK_LINE(757)
									{
										HX_STACK_LINE(757)
										ret1->x = (int)54;
										HX_STACK_LINE(757)
										ret1->y = 121.5;
										HX_STACK_LINE(757)
										{
										}
										HX_STACK_LINE(757)
										{
										}
									}
									HX_STACK_LINE(757)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(757)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(757)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(757)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(757)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(757)
						{
							HX_STACK_LINE(757)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(757)
							if ((_this->_immutable)){
								HX_STACK_LINE(757)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(757)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(757)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(757)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",757);
								{
									HX_STACK_LINE(757)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(757)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(757)
									{
										HX_STACK_LINE(757)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(757)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(757)
											_this->_validate();
										}
									}
									HX_STACK_LINE(757)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",757);
								{
									HX_STACK_LINE(757)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(757)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(757)
									{
										HX_STACK_LINE(757)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(757)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(757)
											_this->_validate();
										}
									}
									HX_STACK_LINE(757)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(757)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)54)) && bool((_Function_3_2::Block(ret) == 121.5))))))){
							HX_STACK_LINE(757)
							{
								HX_STACK_LINE(757)
								ret->zpp_inner->x = (int)54;
								HX_STACK_LINE(757)
								ret->zpp_inner->y = 121.5;
								HX_STACK_LINE(757)
								{
								}
								HX_STACK_LINE(757)
								{
								}
							}
							HX_STACK_LINE(757)
							{
								HX_STACK_LINE(757)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(757)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(757)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(757)
						ret;
					}
					HX_STACK_LINE(757)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(757)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(756)
		::nape::shape::Polygon s38 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_196::Block()).Add(_Function_1_197::Block()).Add(_Function_1_198::Block())),mat8,filt8);		HX_STACK_VAR(s38,"s38");
		HX_STACK_LINE(761)
		{
			HX_STACK_LINE(761)
			{
				HX_STACK_LINE(761)
				s38->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(761)
				if (((((  (((s38->zpp_inner->body != null()))) ? ::nape::phys::Body(s38->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body6))){
					HX_STACK_LINE(761)
					if (((s38->zpp_inner->body != null()))){
						HX_STACK_LINE(761)
						((  (((s38->zpp_inner->body != null()))) ? ::nape::phys::Body(s38->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s38);
					}
					HX_STACK_LINE(761)
					if (((body6 != null()))){
						HX_STACK_LINE(761)
						::nape::shape::ShapeList _this = body6->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(761)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(761)
							_this->push(s38);
						}
						else{
							HX_STACK_LINE(761)
							_this->unshift(s38);
						}
					}
				}
			}
			HX_STACK_LINE(761)
			if (((s38->zpp_inner->body != null()))){
				HX_STACK_LINE(761)
				s38->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(761)
				Dynamic();
			}
		}
		HX_STACK_LINE(762)
		{
			HX_STACK_LINE(762)
			{
				HX_STACK_LINE(762)
				s38->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(762)
				s38->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(762)
				s38->zpp_inner->wake();
			}
			HX_STACK_LINE(762)
			s38->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(763)
		{
			HX_STACK_LINE(763)
			{
				HX_STACK_LINE(763)
				s38->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(763)
				s38->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(763)
				{
				}
				HX_STACK_LINE(763)
				s38->zpp_inner->wake();
			}
			HX_STACK_LINE(763)
			s38->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(764)
		{
			HX_STACK_LINE(764)
			{
				HX_STACK_LINE(764)
				if (((prop8 == null()))){
					HX_STACK_LINE(764)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(764)
				s38->zpp_inner->setFluid(prop8->zpp_inner);
			}
			HX_STACK_LINE(764)
			{
				HX_STACK_LINE(764)
				s38->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(764)
				if (((s38->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(764)
					s38->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(764)
				s38->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(765)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s38){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",765);
					{
						HX_STACK_LINE(765)
						if (((s38->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(765)
							s38->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(765)
						return s38->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(765)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s38);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(765)
			{
				HX_STACK_LINE(765)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(765)
				while(((_g < _g1->length))){
					HX_STACK_LINE(765)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(765)
					++(_g);
					HX_STACK_LINE(765)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(765)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(765)
						continue;
					}
					HX_STACK_LINE(765)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(765)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(765)
					{
						HX_STACK_LINE(765)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(765)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(765)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(765)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_199{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",768);
				{
					HX_STACK_LINE(768)
					{
					}
					HX_STACK_LINE(768)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(768)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(768)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(768)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(768)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(768)
						ret->zpp_pool = null();
						HX_STACK_LINE(768)
						ret->zpp_disp = false;
						HX_STACK_LINE(768)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(768)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(768)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",768);
								{
									HX_STACK_LINE(768)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(768)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(768)
									{
										HX_STACK_LINE(768)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(768)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(768)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(768)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(768)
											ret1->next = null();
										}
										HX_STACK_LINE(768)
										ret1->weak = false;
									}
									HX_STACK_LINE(768)
									ret1->_immutable = immutable;
									HX_STACK_LINE(768)
									{
										HX_STACK_LINE(768)
										ret1->x = 13.5;
										HX_STACK_LINE(768)
										ret1->y = (int)98;
										HX_STACK_LINE(768)
										{
										}
										HX_STACK_LINE(768)
										{
										}
									}
									HX_STACK_LINE(768)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(768)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(768)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(768)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(768)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(768)
						{
							HX_STACK_LINE(768)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(768)
							if ((_this->_immutable)){
								HX_STACK_LINE(768)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(768)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(768)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(768)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",768);
								{
									HX_STACK_LINE(768)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(768)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(768)
									{
										HX_STACK_LINE(768)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(768)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(768)
											_this->_validate();
										}
									}
									HX_STACK_LINE(768)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",768);
								{
									HX_STACK_LINE(768)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(768)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(768)
									{
										HX_STACK_LINE(768)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(768)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(768)
											_this->_validate();
										}
									}
									HX_STACK_LINE(768)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(768)
						if ((!(((bool((_Function_3_1::Block(ret) == 13.5)) && bool((_Function_3_2::Block(ret) == (int)98))))))){
							HX_STACK_LINE(768)
							{
								HX_STACK_LINE(768)
								ret->zpp_inner->x = 13.5;
								HX_STACK_LINE(768)
								ret->zpp_inner->y = (int)98;
								HX_STACK_LINE(768)
								{
								}
								HX_STACK_LINE(768)
								{
								}
							}
							HX_STACK_LINE(768)
							{
								HX_STACK_LINE(768)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(768)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(768)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(768)
						ret;
					}
					HX_STACK_LINE(768)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(768)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_200{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",768);
				{
					HX_STACK_LINE(768)
					{
					}
					HX_STACK_LINE(768)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(768)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(768)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(768)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(768)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(768)
						ret->zpp_pool = null();
						HX_STACK_LINE(768)
						ret->zpp_disp = false;
						HX_STACK_LINE(768)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(768)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(768)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",768);
								{
									HX_STACK_LINE(768)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(768)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(768)
									{
										HX_STACK_LINE(768)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(768)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(768)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(768)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(768)
											ret1->next = null();
										}
										HX_STACK_LINE(768)
										ret1->weak = false;
									}
									HX_STACK_LINE(768)
									ret1->_immutable = immutable;
									HX_STACK_LINE(768)
									{
										HX_STACK_LINE(768)
										ret1->x = (int)54;
										HX_STACK_LINE(768)
										ret1->y = 121.5;
										HX_STACK_LINE(768)
										{
										}
										HX_STACK_LINE(768)
										{
										}
									}
									HX_STACK_LINE(768)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(768)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(768)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(768)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(768)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(768)
						{
							HX_STACK_LINE(768)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(768)
							if ((_this->_immutable)){
								HX_STACK_LINE(768)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(768)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(768)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(768)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",768);
								{
									HX_STACK_LINE(768)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(768)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(768)
									{
										HX_STACK_LINE(768)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(768)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(768)
											_this->_validate();
										}
									}
									HX_STACK_LINE(768)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",768);
								{
									HX_STACK_LINE(768)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(768)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(768)
									{
										HX_STACK_LINE(768)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(768)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(768)
											_this->_validate();
										}
									}
									HX_STACK_LINE(768)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(768)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)54)) && bool((_Function_3_2::Block(ret) == 121.5))))))){
							HX_STACK_LINE(768)
							{
								HX_STACK_LINE(768)
								ret->zpp_inner->x = (int)54;
								HX_STACK_LINE(768)
								ret->zpp_inner->y = 121.5;
								HX_STACK_LINE(768)
								{
								}
								HX_STACK_LINE(768)
								{
								}
							}
							HX_STACK_LINE(768)
							{
								HX_STACK_LINE(768)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(768)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(768)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(768)
						ret;
					}
					HX_STACK_LINE(768)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(768)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_201{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",768);
				{
					HX_STACK_LINE(768)
					{
					}
					HX_STACK_LINE(768)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(768)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(768)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(768)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(768)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(768)
						ret->zpp_pool = null();
						HX_STACK_LINE(768)
						ret->zpp_disp = false;
						HX_STACK_LINE(768)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(768)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(768)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",768);
								{
									HX_STACK_LINE(768)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(768)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(768)
									{
										HX_STACK_LINE(768)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(768)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(768)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(768)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(768)
											ret1->next = null();
										}
										HX_STACK_LINE(768)
										ret1->weak = false;
									}
									HX_STACK_LINE(768)
									ret1->_immutable = immutable;
									HX_STACK_LINE(768)
									{
										HX_STACK_LINE(768)
										ret1->x = (int)28;
										HX_STACK_LINE(768)
										ret1->y = 86.5;
										HX_STACK_LINE(768)
										{
										}
										HX_STACK_LINE(768)
										{
										}
									}
									HX_STACK_LINE(768)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(768)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(768)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(768)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(768)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(768)
						{
							HX_STACK_LINE(768)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(768)
							if ((_this->_immutable)){
								HX_STACK_LINE(768)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(768)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(768)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(768)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",768);
								{
									HX_STACK_LINE(768)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(768)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(768)
									{
										HX_STACK_LINE(768)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(768)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(768)
											_this->_validate();
										}
									}
									HX_STACK_LINE(768)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",768);
								{
									HX_STACK_LINE(768)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(768)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(768)
									{
										HX_STACK_LINE(768)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(768)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(768)
											_this->_validate();
										}
									}
									HX_STACK_LINE(768)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(768)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)28)) && bool((_Function_3_2::Block(ret) == 86.5))))))){
							HX_STACK_LINE(768)
							{
								HX_STACK_LINE(768)
								ret->zpp_inner->x = (int)28;
								HX_STACK_LINE(768)
								ret->zpp_inner->y = 86.5;
								HX_STACK_LINE(768)
								{
								}
								HX_STACK_LINE(768)
								{
								}
							}
							HX_STACK_LINE(768)
							{
								HX_STACK_LINE(768)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(768)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(768)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(768)
						ret;
					}
					HX_STACK_LINE(768)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(768)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(767)
		::nape::shape::Polygon s39 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_199::Block()).Add(_Function_1_200::Block()).Add(_Function_1_201::Block())),mat8,filt8);		HX_STACK_VAR(s39,"s39");
		HX_STACK_LINE(772)
		{
			HX_STACK_LINE(772)
			{
				HX_STACK_LINE(772)
				s39->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(772)
				if (((((  (((s39->zpp_inner->body != null()))) ? ::nape::phys::Body(s39->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body6))){
					HX_STACK_LINE(772)
					if (((s39->zpp_inner->body != null()))){
						HX_STACK_LINE(772)
						((  (((s39->zpp_inner->body != null()))) ? ::nape::phys::Body(s39->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s39);
					}
					HX_STACK_LINE(772)
					if (((body6 != null()))){
						HX_STACK_LINE(772)
						::nape::shape::ShapeList _this = body6->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(772)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(772)
							_this->push(s39);
						}
						else{
							HX_STACK_LINE(772)
							_this->unshift(s39);
						}
					}
				}
			}
			HX_STACK_LINE(772)
			if (((s39->zpp_inner->body != null()))){
				HX_STACK_LINE(772)
				s39->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(772)
				Dynamic();
			}
		}
		HX_STACK_LINE(773)
		{
			HX_STACK_LINE(773)
			{
				HX_STACK_LINE(773)
				s39->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(773)
				s39->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(773)
				s39->zpp_inner->wake();
			}
			HX_STACK_LINE(773)
			s39->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(774)
		{
			HX_STACK_LINE(774)
			{
				HX_STACK_LINE(774)
				s39->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(774)
				s39->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(774)
				{
				}
				HX_STACK_LINE(774)
				s39->zpp_inner->wake();
			}
			HX_STACK_LINE(774)
			s39->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(775)
		{
			HX_STACK_LINE(775)
			{
				HX_STACK_LINE(775)
				if (((prop8 == null()))){
					HX_STACK_LINE(775)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(775)
				s39->zpp_inner->setFluid(prop8->zpp_inner);
			}
			HX_STACK_LINE(775)
			{
				HX_STACK_LINE(775)
				s39->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(775)
				if (((s39->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(775)
					s39->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(775)
				s39->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(776)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s39){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",776);
					{
						HX_STACK_LINE(776)
						if (((s39->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(776)
							s39->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(776)
						return s39->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(776)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s39);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(776)
			{
				HX_STACK_LINE(776)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(776)
				while(((_g < _g1->length))){
					HX_STACK_LINE(776)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(776)
					++(_g);
					HX_STACK_LINE(776)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(776)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(776)
						continue;
					}
					HX_STACK_LINE(776)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(776)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(776)
					{
						HX_STACK_LINE(776)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(776)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(776)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(776)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_202{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
				{
					HX_STACK_LINE(779)
					{
					}
					HX_STACK_LINE(779)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(779)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(779)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(779)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(779)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(779)
						ret->zpp_pool = null();
						HX_STACK_LINE(779)
						ret->zpp_disp = false;
						HX_STACK_LINE(779)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(779)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(779)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
								{
									HX_STACK_LINE(779)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(779)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(779)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(779)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(779)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(779)
											ret1->next = null();
										}
										HX_STACK_LINE(779)
										ret1->weak = false;
									}
									HX_STACK_LINE(779)
									ret1->_immutable = immutable;
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										ret1->x = 21.5;
										HX_STACK_LINE(779)
										ret1->y = (int)67;
										HX_STACK_LINE(779)
										{
										}
										HX_STACK_LINE(779)
										{
										}
									}
									HX_STACK_LINE(779)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(779)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(779)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(779)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(779)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(779)
						{
							HX_STACK_LINE(779)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(779)
							if ((_this->_immutable)){
								HX_STACK_LINE(779)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(779)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(779)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(779)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
								{
									HX_STACK_LINE(779)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(779)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(779)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(779)
											_this->_validate();
										}
									}
									HX_STACK_LINE(779)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
								{
									HX_STACK_LINE(779)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(779)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(779)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(779)
											_this->_validate();
										}
									}
									HX_STACK_LINE(779)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(779)
						if ((!(((bool((_Function_3_1::Block(ret) == 21.5)) && bool((_Function_3_2::Block(ret) == (int)67))))))){
							HX_STACK_LINE(779)
							{
								HX_STACK_LINE(779)
								ret->zpp_inner->x = 21.5;
								HX_STACK_LINE(779)
								ret->zpp_inner->y = (int)67;
								HX_STACK_LINE(779)
								{
								}
								HX_STACK_LINE(779)
								{
								}
							}
							HX_STACK_LINE(779)
							{
								HX_STACK_LINE(779)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(779)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(779)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(779)
						ret;
					}
					HX_STACK_LINE(779)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(779)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_203{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
				{
					HX_STACK_LINE(779)
					{
					}
					HX_STACK_LINE(779)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(779)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(779)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(779)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(779)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(779)
						ret->zpp_pool = null();
						HX_STACK_LINE(779)
						ret->zpp_disp = false;
						HX_STACK_LINE(779)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(779)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(779)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
								{
									HX_STACK_LINE(779)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(779)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(779)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(779)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(779)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(779)
											ret1->next = null();
										}
										HX_STACK_LINE(779)
										ret1->weak = false;
									}
									HX_STACK_LINE(779)
									ret1->_immutable = immutable;
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										ret1->x = (int)28;
										HX_STACK_LINE(779)
										ret1->y = 86.5;
										HX_STACK_LINE(779)
										{
										}
										HX_STACK_LINE(779)
										{
										}
									}
									HX_STACK_LINE(779)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(779)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(779)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(779)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(779)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(779)
						{
							HX_STACK_LINE(779)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(779)
							if ((_this->_immutable)){
								HX_STACK_LINE(779)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(779)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(779)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(779)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
								{
									HX_STACK_LINE(779)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(779)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(779)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(779)
											_this->_validate();
										}
									}
									HX_STACK_LINE(779)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
								{
									HX_STACK_LINE(779)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(779)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(779)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(779)
											_this->_validate();
										}
									}
									HX_STACK_LINE(779)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(779)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)28)) && bool((_Function_3_2::Block(ret) == 86.5))))))){
							HX_STACK_LINE(779)
							{
								HX_STACK_LINE(779)
								ret->zpp_inner->x = (int)28;
								HX_STACK_LINE(779)
								ret->zpp_inner->y = 86.5;
								HX_STACK_LINE(779)
								{
								}
								HX_STACK_LINE(779)
								{
								}
							}
							HX_STACK_LINE(779)
							{
								HX_STACK_LINE(779)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(779)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(779)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(779)
						ret;
					}
					HX_STACK_LINE(779)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(779)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_204{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
				{
					HX_STACK_LINE(779)
					{
					}
					HX_STACK_LINE(779)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(779)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(779)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(779)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(779)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(779)
						ret->zpp_pool = null();
						HX_STACK_LINE(779)
						ret->zpp_disp = false;
						HX_STACK_LINE(779)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(779)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(779)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
								{
									HX_STACK_LINE(779)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(779)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(779)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(779)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(779)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(779)
											ret1->next = null();
										}
										HX_STACK_LINE(779)
										ret1->weak = false;
									}
									HX_STACK_LINE(779)
									ret1->_immutable = immutable;
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										ret1->x = (int)54;
										HX_STACK_LINE(779)
										ret1->y = 121.5;
										HX_STACK_LINE(779)
										{
										}
										HX_STACK_LINE(779)
										{
										}
									}
									HX_STACK_LINE(779)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(779)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(779)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(779)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(779)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(779)
						{
							HX_STACK_LINE(779)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(779)
							if ((_this->_immutable)){
								HX_STACK_LINE(779)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(779)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(779)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(779)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
								{
									HX_STACK_LINE(779)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(779)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(779)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(779)
											_this->_validate();
										}
									}
									HX_STACK_LINE(779)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
								{
									HX_STACK_LINE(779)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(779)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(779)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(779)
											_this->_validate();
										}
									}
									HX_STACK_LINE(779)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(779)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)54)) && bool((_Function_3_2::Block(ret) == 121.5))))))){
							HX_STACK_LINE(779)
							{
								HX_STACK_LINE(779)
								ret->zpp_inner->x = (int)54;
								HX_STACK_LINE(779)
								ret->zpp_inner->y = 121.5;
								HX_STACK_LINE(779)
								{
								}
								HX_STACK_LINE(779)
								{
								}
							}
							HX_STACK_LINE(779)
							{
								HX_STACK_LINE(779)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(779)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(779)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(779)
						ret;
					}
					HX_STACK_LINE(779)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(779)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_205{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
				{
					HX_STACK_LINE(779)
					{
					}
					HX_STACK_LINE(779)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(779)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(779)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(779)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(779)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(779)
						ret->zpp_pool = null();
						HX_STACK_LINE(779)
						ret->zpp_disp = false;
						HX_STACK_LINE(779)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(779)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(779)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
								{
									HX_STACK_LINE(779)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(779)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(779)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(779)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(779)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(779)
											ret1->next = null();
										}
										HX_STACK_LINE(779)
										ret1->weak = false;
									}
									HX_STACK_LINE(779)
									ret1->_immutable = immutable;
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										ret1->x = 106.5;
										HX_STACK_LINE(779)
										ret1->y = (int)148;
										HX_STACK_LINE(779)
										{
										}
										HX_STACK_LINE(779)
										{
										}
									}
									HX_STACK_LINE(779)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(779)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(779)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(779)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(779)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(779)
						{
							HX_STACK_LINE(779)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(779)
							if ((_this->_immutable)){
								HX_STACK_LINE(779)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(779)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(779)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(779)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
								{
									HX_STACK_LINE(779)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(779)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(779)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(779)
											_this->_validate();
										}
									}
									HX_STACK_LINE(779)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
								{
									HX_STACK_LINE(779)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(779)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(779)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(779)
											_this->_validate();
										}
									}
									HX_STACK_LINE(779)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(779)
						if ((!(((bool((_Function_3_1::Block(ret) == 106.5)) && bool((_Function_3_2::Block(ret) == (int)148))))))){
							HX_STACK_LINE(779)
							{
								HX_STACK_LINE(779)
								ret->zpp_inner->x = 106.5;
								HX_STACK_LINE(779)
								ret->zpp_inner->y = (int)148;
								HX_STACK_LINE(779)
								{
								}
								HX_STACK_LINE(779)
								{
								}
							}
							HX_STACK_LINE(779)
							{
								HX_STACK_LINE(779)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(779)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(779)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(779)
						ret;
					}
					HX_STACK_LINE(779)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(779)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_206{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
				{
					HX_STACK_LINE(779)
					{
					}
					HX_STACK_LINE(779)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(779)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(779)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(779)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(779)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(779)
						ret->zpp_pool = null();
						HX_STACK_LINE(779)
						ret->zpp_disp = false;
						HX_STACK_LINE(779)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(779)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(779)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
								{
									HX_STACK_LINE(779)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(779)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(779)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(779)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(779)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(779)
											ret1->next = null();
										}
										HX_STACK_LINE(779)
										ret1->weak = false;
									}
									HX_STACK_LINE(779)
									ret1->_immutable = immutable;
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										ret1->x = 75.5;
										HX_STACK_LINE(779)
										ret1->y = (int)75;
										HX_STACK_LINE(779)
										{
										}
										HX_STACK_LINE(779)
										{
										}
									}
									HX_STACK_LINE(779)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(779)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(779)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(779)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(779)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(779)
						{
							HX_STACK_LINE(779)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(779)
							if ((_this->_immutable)){
								HX_STACK_LINE(779)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(779)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(779)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(779)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
								{
									HX_STACK_LINE(779)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(779)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(779)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(779)
											_this->_validate();
										}
									}
									HX_STACK_LINE(779)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
								{
									HX_STACK_LINE(779)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(779)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(779)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(779)
											_this->_validate();
										}
									}
									HX_STACK_LINE(779)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(779)
						if ((!(((bool((_Function_3_1::Block(ret) == 75.5)) && bool((_Function_3_2::Block(ret) == (int)75))))))){
							HX_STACK_LINE(779)
							{
								HX_STACK_LINE(779)
								ret->zpp_inner->x = 75.5;
								HX_STACK_LINE(779)
								ret->zpp_inner->y = (int)75;
								HX_STACK_LINE(779)
								{
								}
								HX_STACK_LINE(779)
								{
								}
							}
							HX_STACK_LINE(779)
							{
								HX_STACK_LINE(779)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(779)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(779)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(779)
						ret;
					}
					HX_STACK_LINE(779)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(779)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_207{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
				{
					HX_STACK_LINE(779)
					{
					}
					HX_STACK_LINE(779)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(779)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(779)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(779)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(779)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(779)
						ret->zpp_pool = null();
						HX_STACK_LINE(779)
						ret->zpp_disp = false;
						HX_STACK_LINE(779)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(779)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(779)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
								{
									HX_STACK_LINE(779)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(779)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(779)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(779)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(779)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(779)
											ret1->next = null();
										}
										HX_STACK_LINE(779)
										ret1->weak = false;
									}
									HX_STACK_LINE(779)
									ret1->_immutable = immutable;
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										ret1->x = (int)55;
										HX_STACK_LINE(779)
										ret1->y = 58.5;
										HX_STACK_LINE(779)
										{
										}
										HX_STACK_LINE(779)
										{
										}
									}
									HX_STACK_LINE(779)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(779)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(779)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(779)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(779)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(779)
						{
							HX_STACK_LINE(779)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(779)
							if ((_this->_immutable)){
								HX_STACK_LINE(779)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(779)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(779)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(779)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
								{
									HX_STACK_LINE(779)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(779)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(779)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(779)
											_this->_validate();
										}
									}
									HX_STACK_LINE(779)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",779);
								{
									HX_STACK_LINE(779)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(779)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(779)
									{
										HX_STACK_LINE(779)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(779)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(779)
											_this->_validate();
										}
									}
									HX_STACK_LINE(779)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(779)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)55)) && bool((_Function_3_2::Block(ret) == 58.5))))))){
							HX_STACK_LINE(779)
							{
								HX_STACK_LINE(779)
								ret->zpp_inner->x = (int)55;
								HX_STACK_LINE(779)
								ret->zpp_inner->y = 58.5;
								HX_STACK_LINE(779)
								{
								}
								HX_STACK_LINE(779)
								{
								}
							}
							HX_STACK_LINE(779)
							{
								HX_STACK_LINE(779)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(779)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(779)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(779)
						ret;
					}
					HX_STACK_LINE(779)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(779)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(778)
		::nape::shape::Polygon s40 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_202::Block()).Add(_Function_1_203::Block()).Add(_Function_1_204::Block()).Add(_Function_1_205::Block()).Add(_Function_1_206::Block()).Add(_Function_1_207::Block())),mat8,filt8);		HX_STACK_VAR(s40,"s40");
		HX_STACK_LINE(783)
		{
			HX_STACK_LINE(783)
			{
				HX_STACK_LINE(783)
				s40->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(783)
				if (((((  (((s40->zpp_inner->body != null()))) ? ::nape::phys::Body(s40->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body6))){
					HX_STACK_LINE(783)
					if (((s40->zpp_inner->body != null()))){
						HX_STACK_LINE(783)
						((  (((s40->zpp_inner->body != null()))) ? ::nape::phys::Body(s40->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s40);
					}
					HX_STACK_LINE(783)
					if (((body6 != null()))){
						HX_STACK_LINE(783)
						::nape::shape::ShapeList _this = body6->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(783)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(783)
							_this->push(s40);
						}
						else{
							HX_STACK_LINE(783)
							_this->unshift(s40);
						}
					}
				}
			}
			HX_STACK_LINE(783)
			if (((s40->zpp_inner->body != null()))){
				HX_STACK_LINE(783)
				s40->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(783)
				Dynamic();
			}
		}
		HX_STACK_LINE(784)
		{
			HX_STACK_LINE(784)
			{
				HX_STACK_LINE(784)
				s40->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(784)
				s40->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(784)
				s40->zpp_inner->wake();
			}
			HX_STACK_LINE(784)
			s40->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(785)
		{
			HX_STACK_LINE(785)
			{
				HX_STACK_LINE(785)
				s40->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(785)
				s40->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(785)
				{
				}
				HX_STACK_LINE(785)
				s40->zpp_inner->wake();
			}
			HX_STACK_LINE(785)
			s40->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(786)
		{
			HX_STACK_LINE(786)
			{
				HX_STACK_LINE(786)
				if (((prop8 == null()))){
					HX_STACK_LINE(786)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(786)
				s40->zpp_inner->setFluid(prop8->zpp_inner);
			}
			HX_STACK_LINE(786)
			{
				HX_STACK_LINE(786)
				s40->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(786)
				if (((s40->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(786)
					s40->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(786)
				s40->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(787)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s40){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",787);
					{
						HX_STACK_LINE(787)
						if (((s40->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(787)
							s40->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(787)
						return s40->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(787)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s40);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(787)
			{
				HX_STACK_LINE(787)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(787)
				while(((_g < _g1->length))){
					HX_STACK_LINE(787)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(787)
					++(_g);
					HX_STACK_LINE(787)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(787)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(787)
						continue;
					}
					HX_STACK_LINE(787)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(787)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(787)
					{
						HX_STACK_LINE(787)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(787)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(787)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(787)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_208{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",790);
				{
					HX_STACK_LINE(790)
					{
					}
					HX_STACK_LINE(790)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(790)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(790)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(790)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(790)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(790)
						ret->zpp_pool = null();
						HX_STACK_LINE(790)
						ret->zpp_disp = false;
						HX_STACK_LINE(790)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(790)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(790)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",790);
								{
									HX_STACK_LINE(790)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(790)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(790)
									{
										HX_STACK_LINE(790)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(790)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(790)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(790)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(790)
											ret1->next = null();
										}
										HX_STACK_LINE(790)
										ret1->weak = false;
									}
									HX_STACK_LINE(790)
									ret1->_immutable = immutable;
									HX_STACK_LINE(790)
									{
										HX_STACK_LINE(790)
										ret1->x = (int)138;
										HX_STACK_LINE(790)
										ret1->y = 36.5;
										HX_STACK_LINE(790)
										{
										}
										HX_STACK_LINE(790)
										{
										}
									}
									HX_STACK_LINE(790)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(790)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(790)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(790)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(790)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(790)
						{
							HX_STACK_LINE(790)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(790)
							if ((_this->_immutable)){
								HX_STACK_LINE(790)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(790)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(790)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(790)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",790);
								{
									HX_STACK_LINE(790)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(790)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(790)
									{
										HX_STACK_LINE(790)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(790)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(790)
											_this->_validate();
										}
									}
									HX_STACK_LINE(790)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",790);
								{
									HX_STACK_LINE(790)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(790)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(790)
									{
										HX_STACK_LINE(790)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(790)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(790)
											_this->_validate();
										}
									}
									HX_STACK_LINE(790)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(790)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)138)) && bool((_Function_3_2::Block(ret) == 36.5))))))){
							HX_STACK_LINE(790)
							{
								HX_STACK_LINE(790)
								ret->zpp_inner->x = (int)138;
								HX_STACK_LINE(790)
								ret->zpp_inner->y = 36.5;
								HX_STACK_LINE(790)
								{
								}
								HX_STACK_LINE(790)
								{
								}
							}
							HX_STACK_LINE(790)
							{
								HX_STACK_LINE(790)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(790)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(790)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(790)
						ret;
					}
					HX_STACK_LINE(790)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(790)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_209{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",790);
				{
					HX_STACK_LINE(790)
					{
					}
					HX_STACK_LINE(790)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(790)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(790)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(790)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(790)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(790)
						ret->zpp_pool = null();
						HX_STACK_LINE(790)
						ret->zpp_disp = false;
						HX_STACK_LINE(790)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(790)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(790)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",790);
								{
									HX_STACK_LINE(790)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(790)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(790)
									{
										HX_STACK_LINE(790)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(790)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(790)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(790)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(790)
											ret1->next = null();
										}
										HX_STACK_LINE(790)
										ret1->weak = false;
									}
									HX_STACK_LINE(790)
									ret1->_immutable = immutable;
									HX_STACK_LINE(790)
									{
										HX_STACK_LINE(790)
										ret1->x = (int)129;
										HX_STACK_LINE(790)
										ret1->y = 41.5;
										HX_STACK_LINE(790)
										{
										}
										HX_STACK_LINE(790)
										{
										}
									}
									HX_STACK_LINE(790)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(790)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(790)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(790)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(790)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(790)
						{
							HX_STACK_LINE(790)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(790)
							if ((_this->_immutable)){
								HX_STACK_LINE(790)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(790)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(790)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(790)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",790);
								{
									HX_STACK_LINE(790)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(790)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(790)
									{
										HX_STACK_LINE(790)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(790)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(790)
											_this->_validate();
										}
									}
									HX_STACK_LINE(790)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",790);
								{
									HX_STACK_LINE(790)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(790)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(790)
									{
										HX_STACK_LINE(790)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(790)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(790)
											_this->_validate();
										}
									}
									HX_STACK_LINE(790)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(790)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)129)) && bool((_Function_3_2::Block(ret) == 41.5))))))){
							HX_STACK_LINE(790)
							{
								HX_STACK_LINE(790)
								ret->zpp_inner->x = (int)129;
								HX_STACK_LINE(790)
								ret->zpp_inner->y = 41.5;
								HX_STACK_LINE(790)
								{
								}
								HX_STACK_LINE(790)
								{
								}
							}
							HX_STACK_LINE(790)
							{
								HX_STACK_LINE(790)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(790)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(790)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(790)
						ret;
					}
					HX_STACK_LINE(790)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(790)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_210{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",790);
				{
					HX_STACK_LINE(790)
					{
					}
					HX_STACK_LINE(790)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(790)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(790)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(790)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(790)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(790)
						ret->zpp_pool = null();
						HX_STACK_LINE(790)
						ret->zpp_disp = false;
						HX_STACK_LINE(790)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(790)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(790)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",790);
								{
									HX_STACK_LINE(790)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(790)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(790)
									{
										HX_STACK_LINE(790)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(790)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(790)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(790)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(790)
											ret1->next = null();
										}
										HX_STACK_LINE(790)
										ret1->weak = false;
									}
									HX_STACK_LINE(790)
									ret1->_immutable = immutable;
									HX_STACK_LINE(790)
									{
										HX_STACK_LINE(790)
										ret1->x = 134.5;
										HX_STACK_LINE(790)
										ret1->y = (int)82;
										HX_STACK_LINE(790)
										{
										}
										HX_STACK_LINE(790)
										{
										}
									}
									HX_STACK_LINE(790)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(790)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(790)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(790)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(790)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(790)
						{
							HX_STACK_LINE(790)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(790)
							if ((_this->_immutable)){
								HX_STACK_LINE(790)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(790)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(790)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(790)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",790);
								{
									HX_STACK_LINE(790)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(790)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(790)
									{
										HX_STACK_LINE(790)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(790)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(790)
											_this->_validate();
										}
									}
									HX_STACK_LINE(790)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",790);
								{
									HX_STACK_LINE(790)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(790)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(790)
									{
										HX_STACK_LINE(790)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(790)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(790)
											_this->_validate();
										}
									}
									HX_STACK_LINE(790)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(790)
						if ((!(((bool((_Function_3_1::Block(ret) == 134.5)) && bool((_Function_3_2::Block(ret) == (int)82))))))){
							HX_STACK_LINE(790)
							{
								HX_STACK_LINE(790)
								ret->zpp_inner->x = 134.5;
								HX_STACK_LINE(790)
								ret->zpp_inner->y = (int)82;
								HX_STACK_LINE(790)
								{
								}
								HX_STACK_LINE(790)
								{
								}
							}
							HX_STACK_LINE(790)
							{
								HX_STACK_LINE(790)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(790)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(790)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(790)
						ret;
					}
					HX_STACK_LINE(790)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(790)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(789)
		::nape::shape::Polygon s41 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_208::Block()).Add(_Function_1_209::Block()).Add(_Function_1_210::Block())),mat8,filt8);		HX_STACK_VAR(s41,"s41");
		HX_STACK_LINE(794)
		{
			HX_STACK_LINE(794)
			{
				HX_STACK_LINE(794)
				s41->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(794)
				if (((((  (((s41->zpp_inner->body != null()))) ? ::nape::phys::Body(s41->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body6))){
					HX_STACK_LINE(794)
					if (((s41->zpp_inner->body != null()))){
						HX_STACK_LINE(794)
						((  (((s41->zpp_inner->body != null()))) ? ::nape::phys::Body(s41->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s41);
					}
					HX_STACK_LINE(794)
					if (((body6 != null()))){
						HX_STACK_LINE(794)
						::nape::shape::ShapeList _this = body6->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(794)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(794)
							_this->push(s41);
						}
						else{
							HX_STACK_LINE(794)
							_this->unshift(s41);
						}
					}
				}
			}
			HX_STACK_LINE(794)
			if (((s41->zpp_inner->body != null()))){
				HX_STACK_LINE(794)
				s41->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(794)
				Dynamic();
			}
		}
		HX_STACK_LINE(795)
		{
			HX_STACK_LINE(795)
			{
				HX_STACK_LINE(795)
				s41->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(795)
				s41->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(795)
				s41->zpp_inner->wake();
			}
			HX_STACK_LINE(795)
			s41->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(796)
		{
			HX_STACK_LINE(796)
			{
				HX_STACK_LINE(796)
				s41->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(796)
				s41->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(796)
				{
				}
				HX_STACK_LINE(796)
				s41->zpp_inner->wake();
			}
			HX_STACK_LINE(796)
			s41->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(797)
		{
			HX_STACK_LINE(797)
			{
				HX_STACK_LINE(797)
				if (((prop8 == null()))){
					HX_STACK_LINE(797)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(797)
				s41->zpp_inner->setFluid(prop8->zpp_inner);
			}
			HX_STACK_LINE(797)
			{
				HX_STACK_LINE(797)
				s41->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(797)
				if (((s41->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(797)
					s41->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(797)
				s41->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(798)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s41){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",798);
					{
						HX_STACK_LINE(798)
						if (((s41->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(798)
							s41->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(798)
						return s41->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(798)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s41);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(798)
			{
				HX_STACK_LINE(798)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(798)
				while(((_g < _g1->length))){
					HX_STACK_LINE(798)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(798)
					++(_g);
					HX_STACK_LINE(798)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(798)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(798)
						continue;
					}
					HX_STACK_LINE(798)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(798)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(798)
					{
						HX_STACK_LINE(798)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(798)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(798)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(798)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_211{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
				{
					HX_STACK_LINE(801)
					{
					}
					HX_STACK_LINE(801)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(801)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(801)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(801)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(801)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(801)
						ret->zpp_pool = null();
						HX_STACK_LINE(801)
						ret->zpp_disp = false;
						HX_STACK_LINE(801)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(801)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(801)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
								{
									HX_STACK_LINE(801)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(801)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(801)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(801)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(801)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(801)
											ret1->next = null();
										}
										HX_STACK_LINE(801)
										ret1->weak = false;
									}
									HX_STACK_LINE(801)
									ret1->_immutable = immutable;
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										ret1->x = (int)129;
										HX_STACK_LINE(801)
										ret1->y = 41.5;
										HX_STACK_LINE(801)
										{
										}
										HX_STACK_LINE(801)
										{
										}
									}
									HX_STACK_LINE(801)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(801)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(801)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(801)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(801)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(801)
						{
							HX_STACK_LINE(801)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(801)
							if ((_this->_immutable)){
								HX_STACK_LINE(801)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(801)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(801)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(801)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
								{
									HX_STACK_LINE(801)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(801)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(801)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(801)
											_this->_validate();
										}
									}
									HX_STACK_LINE(801)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
								{
									HX_STACK_LINE(801)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(801)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(801)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(801)
											_this->_validate();
										}
									}
									HX_STACK_LINE(801)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(801)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)129)) && bool((_Function_3_2::Block(ret) == 41.5))))))){
							HX_STACK_LINE(801)
							{
								HX_STACK_LINE(801)
								ret->zpp_inner->x = (int)129;
								HX_STACK_LINE(801)
								ret->zpp_inner->y = 41.5;
								HX_STACK_LINE(801)
								{
								}
								HX_STACK_LINE(801)
								{
								}
							}
							HX_STACK_LINE(801)
							{
								HX_STACK_LINE(801)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(801)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(801)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(801)
						ret;
					}
					HX_STACK_LINE(801)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(801)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_212{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
				{
					HX_STACK_LINE(801)
					{
					}
					HX_STACK_LINE(801)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(801)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(801)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(801)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(801)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(801)
						ret->zpp_pool = null();
						HX_STACK_LINE(801)
						ret->zpp_disp = false;
						HX_STACK_LINE(801)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(801)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(801)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
								{
									HX_STACK_LINE(801)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(801)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(801)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(801)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(801)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(801)
											ret1->next = null();
										}
										HX_STACK_LINE(801)
										ret1->weak = false;
									}
									HX_STACK_LINE(801)
									ret1->_immutable = immutable;
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										ret1->x = 111.5;
										HX_STACK_LINE(801)
										ret1->y = (int)23;
										HX_STACK_LINE(801)
										{
										}
										HX_STACK_LINE(801)
										{
										}
									}
									HX_STACK_LINE(801)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(801)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(801)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(801)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(801)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(801)
						{
							HX_STACK_LINE(801)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(801)
							if ((_this->_immutable)){
								HX_STACK_LINE(801)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(801)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(801)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(801)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
								{
									HX_STACK_LINE(801)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(801)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(801)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(801)
											_this->_validate();
										}
									}
									HX_STACK_LINE(801)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
								{
									HX_STACK_LINE(801)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(801)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(801)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(801)
											_this->_validate();
										}
									}
									HX_STACK_LINE(801)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(801)
						if ((!(((bool((_Function_3_1::Block(ret) == 111.5)) && bool((_Function_3_2::Block(ret) == (int)23))))))){
							HX_STACK_LINE(801)
							{
								HX_STACK_LINE(801)
								ret->zpp_inner->x = 111.5;
								HX_STACK_LINE(801)
								ret->zpp_inner->y = (int)23;
								HX_STACK_LINE(801)
								{
								}
								HX_STACK_LINE(801)
								{
								}
							}
							HX_STACK_LINE(801)
							{
								HX_STACK_LINE(801)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(801)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(801)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(801)
						ret;
					}
					HX_STACK_LINE(801)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(801)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_213{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
				{
					HX_STACK_LINE(801)
					{
					}
					HX_STACK_LINE(801)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(801)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(801)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(801)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(801)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(801)
						ret->zpp_pool = null();
						HX_STACK_LINE(801)
						ret->zpp_disp = false;
						HX_STACK_LINE(801)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(801)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(801)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
								{
									HX_STACK_LINE(801)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(801)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(801)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(801)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(801)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(801)
											ret1->next = null();
										}
										HX_STACK_LINE(801)
										ret1->weak = false;
									}
									HX_STACK_LINE(801)
									ret1->_immutable = immutable;
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										ret1->x = 106.5;
										HX_STACK_LINE(801)
										ret1->y = (int)148;
										HX_STACK_LINE(801)
										{
										}
										HX_STACK_LINE(801)
										{
										}
									}
									HX_STACK_LINE(801)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(801)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(801)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(801)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(801)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(801)
						{
							HX_STACK_LINE(801)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(801)
							if ((_this->_immutable)){
								HX_STACK_LINE(801)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(801)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(801)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(801)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
								{
									HX_STACK_LINE(801)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(801)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(801)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(801)
											_this->_validate();
										}
									}
									HX_STACK_LINE(801)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
								{
									HX_STACK_LINE(801)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(801)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(801)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(801)
											_this->_validate();
										}
									}
									HX_STACK_LINE(801)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(801)
						if ((!(((bool((_Function_3_1::Block(ret) == 106.5)) && bool((_Function_3_2::Block(ret) == (int)148))))))){
							HX_STACK_LINE(801)
							{
								HX_STACK_LINE(801)
								ret->zpp_inner->x = 106.5;
								HX_STACK_LINE(801)
								ret->zpp_inner->y = (int)148;
								HX_STACK_LINE(801)
								{
								}
								HX_STACK_LINE(801)
								{
								}
							}
							HX_STACK_LINE(801)
							{
								HX_STACK_LINE(801)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(801)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(801)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(801)
						ret;
					}
					HX_STACK_LINE(801)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(801)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_214{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
				{
					HX_STACK_LINE(801)
					{
					}
					HX_STACK_LINE(801)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(801)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(801)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(801)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(801)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(801)
						ret->zpp_pool = null();
						HX_STACK_LINE(801)
						ret->zpp_disp = false;
						HX_STACK_LINE(801)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(801)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(801)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
								{
									HX_STACK_LINE(801)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(801)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(801)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(801)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(801)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(801)
											ret1->next = null();
										}
										HX_STACK_LINE(801)
										ret1->weak = false;
									}
									HX_STACK_LINE(801)
									ret1->_immutable = immutable;
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										ret1->x = 111.5;
										HX_STACK_LINE(801)
										ret1->y = (int)146;
										HX_STACK_LINE(801)
										{
										}
										HX_STACK_LINE(801)
										{
										}
									}
									HX_STACK_LINE(801)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(801)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(801)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(801)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(801)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(801)
						{
							HX_STACK_LINE(801)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(801)
							if ((_this->_immutable)){
								HX_STACK_LINE(801)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(801)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(801)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(801)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
								{
									HX_STACK_LINE(801)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(801)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(801)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(801)
											_this->_validate();
										}
									}
									HX_STACK_LINE(801)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
								{
									HX_STACK_LINE(801)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(801)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(801)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(801)
											_this->_validate();
										}
									}
									HX_STACK_LINE(801)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(801)
						if ((!(((bool((_Function_3_1::Block(ret) == 111.5)) && bool((_Function_3_2::Block(ret) == (int)146))))))){
							HX_STACK_LINE(801)
							{
								HX_STACK_LINE(801)
								ret->zpp_inner->x = 111.5;
								HX_STACK_LINE(801)
								ret->zpp_inner->y = (int)146;
								HX_STACK_LINE(801)
								{
								}
								HX_STACK_LINE(801)
								{
								}
							}
							HX_STACK_LINE(801)
							{
								HX_STACK_LINE(801)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(801)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(801)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(801)
						ret;
					}
					HX_STACK_LINE(801)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(801)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_215{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
				{
					HX_STACK_LINE(801)
					{
					}
					HX_STACK_LINE(801)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(801)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(801)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(801)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(801)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(801)
						ret->zpp_pool = null();
						HX_STACK_LINE(801)
						ret->zpp_disp = false;
						HX_STACK_LINE(801)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(801)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(801)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
								{
									HX_STACK_LINE(801)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(801)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(801)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(801)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(801)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(801)
											ret1->next = null();
										}
										HX_STACK_LINE(801)
										ret1->weak = false;
									}
									HX_STACK_LINE(801)
									ret1->_immutable = immutable;
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										ret1->x = 134.5;
										HX_STACK_LINE(801)
										ret1->y = (int)82;
										HX_STACK_LINE(801)
										{
										}
										HX_STACK_LINE(801)
										{
										}
									}
									HX_STACK_LINE(801)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(801)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(801)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(801)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(801)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(801)
						{
							HX_STACK_LINE(801)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(801)
							if ((_this->_immutable)){
								HX_STACK_LINE(801)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(801)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(801)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(801)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
								{
									HX_STACK_LINE(801)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(801)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(801)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(801)
											_this->_validate();
										}
									}
									HX_STACK_LINE(801)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",801);
								{
									HX_STACK_LINE(801)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(801)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(801)
									{
										HX_STACK_LINE(801)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(801)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(801)
											_this->_validate();
										}
									}
									HX_STACK_LINE(801)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(801)
						if ((!(((bool((_Function_3_1::Block(ret) == 134.5)) && bool((_Function_3_2::Block(ret) == (int)82))))))){
							HX_STACK_LINE(801)
							{
								HX_STACK_LINE(801)
								ret->zpp_inner->x = 134.5;
								HX_STACK_LINE(801)
								ret->zpp_inner->y = (int)82;
								HX_STACK_LINE(801)
								{
								}
								HX_STACK_LINE(801)
								{
								}
							}
							HX_STACK_LINE(801)
							{
								HX_STACK_LINE(801)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(801)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(801)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(801)
						ret;
					}
					HX_STACK_LINE(801)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(801)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(800)
		::nape::shape::Polygon s42 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_211::Block()).Add(_Function_1_212::Block()).Add(_Function_1_213::Block()).Add(_Function_1_214::Block()).Add(_Function_1_215::Block())),mat8,filt8);		HX_STACK_VAR(s42,"s42");
		HX_STACK_LINE(805)
		{
			HX_STACK_LINE(805)
			{
				HX_STACK_LINE(805)
				s42->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(805)
				if (((((  (((s42->zpp_inner->body != null()))) ? ::nape::phys::Body(s42->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body6))){
					HX_STACK_LINE(805)
					if (((s42->zpp_inner->body != null()))){
						HX_STACK_LINE(805)
						((  (((s42->zpp_inner->body != null()))) ? ::nape::phys::Body(s42->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s42);
					}
					HX_STACK_LINE(805)
					if (((body6 != null()))){
						HX_STACK_LINE(805)
						::nape::shape::ShapeList _this = body6->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(805)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(805)
							_this->push(s42);
						}
						else{
							HX_STACK_LINE(805)
							_this->unshift(s42);
						}
					}
				}
			}
			HX_STACK_LINE(805)
			if (((s42->zpp_inner->body != null()))){
				HX_STACK_LINE(805)
				s42->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(805)
				Dynamic();
			}
		}
		HX_STACK_LINE(806)
		{
			HX_STACK_LINE(806)
			{
				HX_STACK_LINE(806)
				s42->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(806)
				s42->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(806)
				s42->zpp_inner->wake();
			}
			HX_STACK_LINE(806)
			s42->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(807)
		{
			HX_STACK_LINE(807)
			{
				HX_STACK_LINE(807)
				s42->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(807)
				s42->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(807)
				{
				}
				HX_STACK_LINE(807)
				s42->zpp_inner->wake();
			}
			HX_STACK_LINE(807)
			s42->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(808)
		{
			HX_STACK_LINE(808)
			{
				HX_STACK_LINE(808)
				if (((prop8 == null()))){
					HX_STACK_LINE(808)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(808)
				s42->zpp_inner->setFluid(prop8->zpp_inner);
			}
			HX_STACK_LINE(808)
			{
				HX_STACK_LINE(808)
				s42->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(808)
				if (((s42->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(808)
					s42->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(808)
				s42->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(809)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s42){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",809);
					{
						HX_STACK_LINE(809)
						if (((s42->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(809)
							s42->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(809)
						return s42->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(809)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s42);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(809)
			{
				HX_STACK_LINE(809)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(809)
				while(((_g < _g1->length))){
					HX_STACK_LINE(809)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(809)
					++(_g);
					HX_STACK_LINE(809)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(809)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(809)
						continue;
					}
					HX_STACK_LINE(809)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(809)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(809)
					{
						HX_STACK_LINE(809)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(809)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(809)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(809)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_216{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
				{
					HX_STACK_LINE(812)
					{
					}
					HX_STACK_LINE(812)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(812)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(812)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(812)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(812)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(812)
						ret->zpp_pool = null();
						HX_STACK_LINE(812)
						ret->zpp_disp = false;
						HX_STACK_LINE(812)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(812)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(812)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
								{
									HX_STACK_LINE(812)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(812)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(812)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(812)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(812)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(812)
											ret1->next = null();
										}
										HX_STACK_LINE(812)
										ret1->weak = false;
									}
									HX_STACK_LINE(812)
									ret1->_immutable = immutable;
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										ret1->x = (int)89;
										HX_STACK_LINE(812)
										ret1->y = 36.5;
										HX_STACK_LINE(812)
										{
										}
										HX_STACK_LINE(812)
										{
										}
									}
									HX_STACK_LINE(812)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(812)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(812)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(812)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(812)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(812)
						{
							HX_STACK_LINE(812)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(812)
							if ((_this->_immutable)){
								HX_STACK_LINE(812)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(812)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(812)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(812)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
								{
									HX_STACK_LINE(812)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(812)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(812)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(812)
											_this->_validate();
										}
									}
									HX_STACK_LINE(812)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
								{
									HX_STACK_LINE(812)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(812)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(812)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(812)
											_this->_validate();
										}
									}
									HX_STACK_LINE(812)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(812)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)89)) && bool((_Function_3_2::Block(ret) == 36.5))))))){
							HX_STACK_LINE(812)
							{
								HX_STACK_LINE(812)
								ret->zpp_inner->x = (int)89;
								HX_STACK_LINE(812)
								ret->zpp_inner->y = 36.5;
								HX_STACK_LINE(812)
								{
								}
								HX_STACK_LINE(812)
								{
								}
							}
							HX_STACK_LINE(812)
							{
								HX_STACK_LINE(812)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(812)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(812)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(812)
						ret;
					}
					HX_STACK_LINE(812)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(812)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_217{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
				{
					HX_STACK_LINE(812)
					{
					}
					HX_STACK_LINE(812)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(812)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(812)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(812)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(812)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(812)
						ret->zpp_pool = null();
						HX_STACK_LINE(812)
						ret->zpp_disp = false;
						HX_STACK_LINE(812)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(812)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(812)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
								{
									HX_STACK_LINE(812)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(812)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(812)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(812)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(812)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(812)
											ret1->next = null();
										}
										HX_STACK_LINE(812)
										ret1->weak = false;
									}
									HX_STACK_LINE(812)
									ret1->_immutable = immutable;
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										ret1->x = 80.5;
										HX_STACK_LINE(812)
										ret1->y = (int)67;
										HX_STACK_LINE(812)
										{
										}
										HX_STACK_LINE(812)
										{
										}
									}
									HX_STACK_LINE(812)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(812)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(812)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(812)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(812)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(812)
						{
							HX_STACK_LINE(812)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(812)
							if ((_this->_immutable)){
								HX_STACK_LINE(812)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(812)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(812)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(812)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
								{
									HX_STACK_LINE(812)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(812)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(812)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(812)
											_this->_validate();
										}
									}
									HX_STACK_LINE(812)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
								{
									HX_STACK_LINE(812)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(812)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(812)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(812)
											_this->_validate();
										}
									}
									HX_STACK_LINE(812)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(812)
						if ((!(((bool((_Function_3_1::Block(ret) == 80.5)) && bool((_Function_3_2::Block(ret) == (int)67))))))){
							HX_STACK_LINE(812)
							{
								HX_STACK_LINE(812)
								ret->zpp_inner->x = 80.5;
								HX_STACK_LINE(812)
								ret->zpp_inner->y = (int)67;
								HX_STACK_LINE(812)
								{
								}
								HX_STACK_LINE(812)
								{
								}
							}
							HX_STACK_LINE(812)
							{
								HX_STACK_LINE(812)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(812)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(812)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(812)
						ret;
					}
					HX_STACK_LINE(812)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(812)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_218{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
				{
					HX_STACK_LINE(812)
					{
					}
					HX_STACK_LINE(812)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(812)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(812)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(812)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(812)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(812)
						ret->zpp_pool = null();
						HX_STACK_LINE(812)
						ret->zpp_disp = false;
						HX_STACK_LINE(812)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(812)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(812)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
								{
									HX_STACK_LINE(812)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(812)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(812)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(812)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(812)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(812)
											ret1->next = null();
										}
										HX_STACK_LINE(812)
										ret1->weak = false;
									}
									HX_STACK_LINE(812)
									ret1->_immutable = immutable;
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										ret1->x = 106.5;
										HX_STACK_LINE(812)
										ret1->y = (int)148;
										HX_STACK_LINE(812)
										{
										}
										HX_STACK_LINE(812)
										{
										}
									}
									HX_STACK_LINE(812)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(812)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(812)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(812)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(812)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(812)
						{
							HX_STACK_LINE(812)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(812)
							if ((_this->_immutable)){
								HX_STACK_LINE(812)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(812)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(812)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(812)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
								{
									HX_STACK_LINE(812)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(812)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(812)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(812)
											_this->_validate();
										}
									}
									HX_STACK_LINE(812)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
								{
									HX_STACK_LINE(812)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(812)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(812)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(812)
											_this->_validate();
										}
									}
									HX_STACK_LINE(812)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(812)
						if ((!(((bool((_Function_3_1::Block(ret) == 106.5)) && bool((_Function_3_2::Block(ret) == (int)148))))))){
							HX_STACK_LINE(812)
							{
								HX_STACK_LINE(812)
								ret->zpp_inner->x = 106.5;
								HX_STACK_LINE(812)
								ret->zpp_inner->y = (int)148;
								HX_STACK_LINE(812)
								{
								}
								HX_STACK_LINE(812)
								{
								}
							}
							HX_STACK_LINE(812)
							{
								HX_STACK_LINE(812)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(812)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(812)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(812)
						ret;
					}
					HX_STACK_LINE(812)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(812)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_219{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
				{
					HX_STACK_LINE(812)
					{
					}
					HX_STACK_LINE(812)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(812)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(812)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(812)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(812)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(812)
						ret->zpp_pool = null();
						HX_STACK_LINE(812)
						ret->zpp_disp = false;
						HX_STACK_LINE(812)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(812)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(812)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
								{
									HX_STACK_LINE(812)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(812)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(812)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(812)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(812)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(812)
											ret1->next = null();
										}
										HX_STACK_LINE(812)
										ret1->weak = false;
									}
									HX_STACK_LINE(812)
									ret1->_immutable = immutable;
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										ret1->x = (int)112;
										HX_STACK_LINE(812)
										ret1->y = 3.5;
										HX_STACK_LINE(812)
										{
										}
										HX_STACK_LINE(812)
										{
										}
									}
									HX_STACK_LINE(812)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(812)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(812)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(812)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(812)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(812)
						{
							HX_STACK_LINE(812)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(812)
							if ((_this->_immutable)){
								HX_STACK_LINE(812)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(812)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(812)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(812)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
								{
									HX_STACK_LINE(812)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(812)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(812)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(812)
											_this->_validate();
										}
									}
									HX_STACK_LINE(812)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
								{
									HX_STACK_LINE(812)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(812)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(812)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(812)
											_this->_validate();
										}
									}
									HX_STACK_LINE(812)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(812)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)112)) && bool((_Function_3_2::Block(ret) == 3.5))))))){
							HX_STACK_LINE(812)
							{
								HX_STACK_LINE(812)
								ret->zpp_inner->x = (int)112;
								HX_STACK_LINE(812)
								ret->zpp_inner->y = 3.5;
								HX_STACK_LINE(812)
								{
								}
								HX_STACK_LINE(812)
								{
								}
							}
							HX_STACK_LINE(812)
							{
								HX_STACK_LINE(812)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(812)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(812)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(812)
						ret;
					}
					HX_STACK_LINE(812)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(812)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_220{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
				{
					HX_STACK_LINE(812)
					{
					}
					HX_STACK_LINE(812)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(812)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(812)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(812)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(812)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(812)
						ret->zpp_pool = null();
						HX_STACK_LINE(812)
						ret->zpp_disp = false;
						HX_STACK_LINE(812)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(812)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(812)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
								{
									HX_STACK_LINE(812)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(812)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(812)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(812)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(812)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(812)
											ret1->next = null();
										}
										HX_STACK_LINE(812)
										ret1->weak = false;
									}
									HX_STACK_LINE(812)
									ret1->_immutable = immutable;
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										ret1->x = (int)111;
										HX_STACK_LINE(812)
										ret1->y = 3.5;
										HX_STACK_LINE(812)
										{
										}
										HX_STACK_LINE(812)
										{
										}
									}
									HX_STACK_LINE(812)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(812)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(812)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(812)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(812)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(812)
						{
							HX_STACK_LINE(812)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(812)
							if ((_this->_immutable)){
								HX_STACK_LINE(812)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(812)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(812)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(812)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
								{
									HX_STACK_LINE(812)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(812)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(812)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(812)
											_this->_validate();
										}
									}
									HX_STACK_LINE(812)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",812);
								{
									HX_STACK_LINE(812)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(812)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(812)
									{
										HX_STACK_LINE(812)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(812)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(812)
											_this->_validate();
										}
									}
									HX_STACK_LINE(812)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(812)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)111)) && bool((_Function_3_2::Block(ret) == 3.5))))))){
							HX_STACK_LINE(812)
							{
								HX_STACK_LINE(812)
								ret->zpp_inner->x = (int)111;
								HX_STACK_LINE(812)
								ret->zpp_inner->y = 3.5;
								HX_STACK_LINE(812)
								{
								}
								HX_STACK_LINE(812)
								{
								}
							}
							HX_STACK_LINE(812)
							{
								HX_STACK_LINE(812)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(812)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(812)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(812)
						ret;
					}
					HX_STACK_LINE(812)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(812)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(811)
		::nape::shape::Polygon s43 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_216::Block()).Add(_Function_1_217::Block()).Add(_Function_1_218::Block()).Add(_Function_1_219::Block()).Add(_Function_1_220::Block())),mat8,filt8);		HX_STACK_VAR(s43,"s43");
		HX_STACK_LINE(816)
		{
			HX_STACK_LINE(816)
			{
				HX_STACK_LINE(816)
				s43->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(816)
				if (((((  (((s43->zpp_inner->body != null()))) ? ::nape::phys::Body(s43->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body6))){
					HX_STACK_LINE(816)
					if (((s43->zpp_inner->body != null()))){
						HX_STACK_LINE(816)
						((  (((s43->zpp_inner->body != null()))) ? ::nape::phys::Body(s43->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s43);
					}
					HX_STACK_LINE(816)
					if (((body6 != null()))){
						HX_STACK_LINE(816)
						::nape::shape::ShapeList _this = body6->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(816)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(816)
							_this->push(s43);
						}
						else{
							HX_STACK_LINE(816)
							_this->unshift(s43);
						}
					}
				}
			}
			HX_STACK_LINE(816)
			if (((s43->zpp_inner->body != null()))){
				HX_STACK_LINE(816)
				s43->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(816)
				Dynamic();
			}
		}
		HX_STACK_LINE(817)
		{
			HX_STACK_LINE(817)
			{
				HX_STACK_LINE(817)
				s43->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(817)
				s43->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(817)
				s43->zpp_inner->wake();
			}
			HX_STACK_LINE(817)
			s43->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(818)
		{
			HX_STACK_LINE(818)
			{
				HX_STACK_LINE(818)
				s43->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(818)
				s43->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(818)
				{
				}
				HX_STACK_LINE(818)
				s43->zpp_inner->wake();
			}
			HX_STACK_LINE(818)
			s43->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(819)
		{
			HX_STACK_LINE(819)
			{
				HX_STACK_LINE(819)
				if (((prop8 == null()))){
					HX_STACK_LINE(819)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(819)
				s43->zpp_inner->setFluid(prop8->zpp_inner);
			}
			HX_STACK_LINE(819)
			{
				HX_STACK_LINE(819)
				s43->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(819)
				if (((s43->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(819)
					s43->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(819)
				s43->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(820)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s43){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",820);
					{
						HX_STACK_LINE(820)
						if (((s43->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(820)
							s43->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(820)
						return s43->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(820)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s43);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(820)
			{
				HX_STACK_LINE(820)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(820)
				while(((_g < _g1->length))){
					HX_STACK_LINE(820)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(820)
					++(_g);
					HX_STACK_LINE(820)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(820)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(820)
						continue;
					}
					HX_STACK_LINE(820)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(820)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(820)
					{
						HX_STACK_LINE(820)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(820)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(820)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(820)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_221{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",823);
				{
					HX_STACK_LINE(823)
					{
					}
					HX_STACK_LINE(823)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(823)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(823)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(823)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(823)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(823)
						ret->zpp_pool = null();
						HX_STACK_LINE(823)
						ret->zpp_disp = false;
						HX_STACK_LINE(823)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(823)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(823)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",823);
								{
									HX_STACK_LINE(823)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(823)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(823)
									{
										HX_STACK_LINE(823)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(823)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(823)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(823)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(823)
											ret1->next = null();
										}
										HX_STACK_LINE(823)
										ret1->weak = false;
									}
									HX_STACK_LINE(823)
									ret1->_immutable = immutable;
									HX_STACK_LINE(823)
									{
										HX_STACK_LINE(823)
										ret1->x = 127.5;
										HX_STACK_LINE(823)
										ret1->y = (int)189;
										HX_STACK_LINE(823)
										{
										}
										HX_STACK_LINE(823)
										{
										}
									}
									HX_STACK_LINE(823)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(823)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(823)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(823)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(823)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(823)
						{
							HX_STACK_LINE(823)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(823)
							if ((_this->_immutable)){
								HX_STACK_LINE(823)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(823)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(823)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(823)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",823);
								{
									HX_STACK_LINE(823)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(823)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(823)
									{
										HX_STACK_LINE(823)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(823)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(823)
											_this->_validate();
										}
									}
									HX_STACK_LINE(823)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",823);
								{
									HX_STACK_LINE(823)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(823)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(823)
									{
										HX_STACK_LINE(823)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(823)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(823)
											_this->_validate();
										}
									}
									HX_STACK_LINE(823)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(823)
						if ((!(((bool((_Function_3_1::Block(ret) == 127.5)) && bool((_Function_3_2::Block(ret) == (int)189))))))){
							HX_STACK_LINE(823)
							{
								HX_STACK_LINE(823)
								ret->zpp_inner->x = 127.5;
								HX_STACK_LINE(823)
								ret->zpp_inner->y = (int)189;
								HX_STACK_LINE(823)
								{
								}
								HX_STACK_LINE(823)
								{
								}
							}
							HX_STACK_LINE(823)
							{
								HX_STACK_LINE(823)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(823)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(823)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(823)
						ret;
					}
					HX_STACK_LINE(823)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(823)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_222{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",823);
				{
					HX_STACK_LINE(823)
					{
					}
					HX_STACK_LINE(823)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(823)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(823)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(823)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(823)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(823)
						ret->zpp_pool = null();
						HX_STACK_LINE(823)
						ret->zpp_disp = false;
						HX_STACK_LINE(823)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(823)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(823)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",823);
								{
									HX_STACK_LINE(823)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(823)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(823)
									{
										HX_STACK_LINE(823)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(823)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(823)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(823)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(823)
											ret1->next = null();
										}
										HX_STACK_LINE(823)
										ret1->weak = false;
									}
									HX_STACK_LINE(823)
									ret1->_immutable = immutable;
									HX_STACK_LINE(823)
									{
										HX_STACK_LINE(823)
										ret1->x = 111.5;
										HX_STACK_LINE(823)
										ret1->y = (int)146;
										HX_STACK_LINE(823)
										{
										}
										HX_STACK_LINE(823)
										{
										}
									}
									HX_STACK_LINE(823)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(823)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(823)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(823)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(823)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(823)
						{
							HX_STACK_LINE(823)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(823)
							if ((_this->_immutable)){
								HX_STACK_LINE(823)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(823)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(823)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(823)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",823);
								{
									HX_STACK_LINE(823)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(823)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(823)
									{
										HX_STACK_LINE(823)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(823)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(823)
											_this->_validate();
										}
									}
									HX_STACK_LINE(823)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",823);
								{
									HX_STACK_LINE(823)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(823)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(823)
									{
										HX_STACK_LINE(823)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(823)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(823)
											_this->_validate();
										}
									}
									HX_STACK_LINE(823)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(823)
						if ((!(((bool((_Function_3_1::Block(ret) == 111.5)) && bool((_Function_3_2::Block(ret) == (int)146))))))){
							HX_STACK_LINE(823)
							{
								HX_STACK_LINE(823)
								ret->zpp_inner->x = 111.5;
								HX_STACK_LINE(823)
								ret->zpp_inner->y = (int)146;
								HX_STACK_LINE(823)
								{
								}
								HX_STACK_LINE(823)
								{
								}
							}
							HX_STACK_LINE(823)
							{
								HX_STACK_LINE(823)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(823)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(823)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(823)
						ret;
					}
					HX_STACK_LINE(823)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(823)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_223{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",823);
				{
					HX_STACK_LINE(823)
					{
					}
					HX_STACK_LINE(823)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(823)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(823)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(823)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(823)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(823)
						ret->zpp_pool = null();
						HX_STACK_LINE(823)
						ret->zpp_disp = false;
						HX_STACK_LINE(823)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(823)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(823)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",823);
								{
									HX_STACK_LINE(823)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(823)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(823)
									{
										HX_STACK_LINE(823)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(823)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(823)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(823)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(823)
											ret1->next = null();
										}
										HX_STACK_LINE(823)
										ret1->weak = false;
									}
									HX_STACK_LINE(823)
									ret1->_immutable = immutable;
									HX_STACK_LINE(823)
									{
										HX_STACK_LINE(823)
										ret1->x = 106.5;
										HX_STACK_LINE(823)
										ret1->y = (int)148;
										HX_STACK_LINE(823)
										{
										}
										HX_STACK_LINE(823)
										{
										}
									}
									HX_STACK_LINE(823)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(823)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(823)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(823)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(823)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(823)
						{
							HX_STACK_LINE(823)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(823)
							if ((_this->_immutable)){
								HX_STACK_LINE(823)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(823)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(823)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(823)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",823);
								{
									HX_STACK_LINE(823)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(823)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(823)
									{
										HX_STACK_LINE(823)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(823)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(823)
											_this->_validate();
										}
									}
									HX_STACK_LINE(823)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",823);
								{
									HX_STACK_LINE(823)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(823)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(823)
									{
										HX_STACK_LINE(823)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(823)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(823)
											_this->_validate();
										}
									}
									HX_STACK_LINE(823)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(823)
						if ((!(((bool((_Function_3_1::Block(ret) == 106.5)) && bool((_Function_3_2::Block(ret) == (int)148))))))){
							HX_STACK_LINE(823)
							{
								HX_STACK_LINE(823)
								ret->zpp_inner->x = 106.5;
								HX_STACK_LINE(823)
								ret->zpp_inner->y = (int)148;
								HX_STACK_LINE(823)
								{
								}
								HX_STACK_LINE(823)
								{
								}
							}
							HX_STACK_LINE(823)
							{
								HX_STACK_LINE(823)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(823)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(823)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(823)
						ret;
					}
					HX_STACK_LINE(823)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(823)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(822)
		::nape::shape::Polygon s44 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_221::Block()).Add(_Function_1_222::Block()).Add(_Function_1_223::Block())),mat8,filt8);		HX_STACK_VAR(s44,"s44");
		HX_STACK_LINE(827)
		{
			HX_STACK_LINE(827)
			{
				HX_STACK_LINE(827)
				s44->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(827)
				if (((((  (((s44->zpp_inner->body != null()))) ? ::nape::phys::Body(s44->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body6))){
					HX_STACK_LINE(827)
					if (((s44->zpp_inner->body != null()))){
						HX_STACK_LINE(827)
						((  (((s44->zpp_inner->body != null()))) ? ::nape::phys::Body(s44->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s44);
					}
					HX_STACK_LINE(827)
					if (((body6 != null()))){
						HX_STACK_LINE(827)
						::nape::shape::ShapeList _this = body6->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(827)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(827)
							_this->push(s44);
						}
						else{
							HX_STACK_LINE(827)
							_this->unshift(s44);
						}
					}
				}
			}
			HX_STACK_LINE(827)
			if (((s44->zpp_inner->body != null()))){
				HX_STACK_LINE(827)
				s44->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(827)
				Dynamic();
			}
		}
		HX_STACK_LINE(828)
		{
			HX_STACK_LINE(828)
			{
				HX_STACK_LINE(828)
				s44->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(828)
				s44->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(828)
				s44->zpp_inner->wake();
			}
			HX_STACK_LINE(828)
			s44->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(829)
		{
			HX_STACK_LINE(829)
			{
				HX_STACK_LINE(829)
				s44->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(829)
				s44->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(829)
				{
				}
				HX_STACK_LINE(829)
				s44->zpp_inner->wake();
			}
			HX_STACK_LINE(829)
			s44->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(830)
		{
			HX_STACK_LINE(830)
			{
				HX_STACK_LINE(830)
				if (((prop8 == null()))){
					HX_STACK_LINE(830)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(830)
				s44->zpp_inner->setFluid(prop8->zpp_inner);
			}
			HX_STACK_LINE(830)
			{
				HX_STACK_LINE(830)
				s44->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(830)
				if (((s44->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(830)
					s44->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(830)
				s44->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(831)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s44){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",831);
					{
						HX_STACK_LINE(831)
						if (((s44->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(831)
							s44->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(831)
						return s44->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(831)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s44);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(831)
			{
				HX_STACK_LINE(831)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(831)
				while(((_g < _g1->length))){
					HX_STACK_LINE(831)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(831)
					++(_g);
					HX_STACK_LINE(831)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(831)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(831)
						continue;
					}
					HX_STACK_LINE(831)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(831)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(831)
					{
						HX_STACK_LINE(831)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(831)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(831)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(831)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_224{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",834);
				{
					HX_STACK_LINE(834)
					{
					}
					HX_STACK_LINE(834)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(834)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(834)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(834)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(834)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(834)
						ret->zpp_pool = null();
						HX_STACK_LINE(834)
						ret->zpp_disp = false;
						HX_STACK_LINE(834)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(834)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(834)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",834);
								{
									HX_STACK_LINE(834)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(834)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(834)
									{
										HX_STACK_LINE(834)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(834)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(834)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(834)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(834)
											ret1->next = null();
										}
										HX_STACK_LINE(834)
										ret1->weak = false;
									}
									HX_STACK_LINE(834)
									ret1->_immutable = immutable;
									HX_STACK_LINE(834)
									{
										HX_STACK_LINE(834)
										ret1->x = 75.5;
										HX_STACK_LINE(834)
										ret1->y = (int)75;
										HX_STACK_LINE(834)
										{
										}
										HX_STACK_LINE(834)
										{
										}
									}
									HX_STACK_LINE(834)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(834)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(834)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(834)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(834)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(834)
						{
							HX_STACK_LINE(834)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(834)
							if ((_this->_immutable)){
								HX_STACK_LINE(834)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(834)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(834)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(834)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",834);
								{
									HX_STACK_LINE(834)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(834)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(834)
									{
										HX_STACK_LINE(834)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(834)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(834)
											_this->_validate();
										}
									}
									HX_STACK_LINE(834)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",834);
								{
									HX_STACK_LINE(834)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(834)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(834)
									{
										HX_STACK_LINE(834)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(834)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(834)
											_this->_validate();
										}
									}
									HX_STACK_LINE(834)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(834)
						if ((!(((bool((_Function_3_1::Block(ret) == 75.5)) && bool((_Function_3_2::Block(ret) == (int)75))))))){
							HX_STACK_LINE(834)
							{
								HX_STACK_LINE(834)
								ret->zpp_inner->x = 75.5;
								HX_STACK_LINE(834)
								ret->zpp_inner->y = (int)75;
								HX_STACK_LINE(834)
								{
								}
								HX_STACK_LINE(834)
								{
								}
							}
							HX_STACK_LINE(834)
							{
								HX_STACK_LINE(834)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(834)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(834)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(834)
						ret;
					}
					HX_STACK_LINE(834)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(834)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_225{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",834);
				{
					HX_STACK_LINE(834)
					{
					}
					HX_STACK_LINE(834)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(834)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(834)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(834)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(834)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(834)
						ret->zpp_pool = null();
						HX_STACK_LINE(834)
						ret->zpp_disp = false;
						HX_STACK_LINE(834)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(834)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(834)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",834);
								{
									HX_STACK_LINE(834)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(834)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(834)
									{
										HX_STACK_LINE(834)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(834)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(834)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(834)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(834)
											ret1->next = null();
										}
										HX_STACK_LINE(834)
										ret1->weak = false;
									}
									HX_STACK_LINE(834)
									ret1->_immutable = immutable;
									HX_STACK_LINE(834)
									{
										HX_STACK_LINE(834)
										ret1->x = 106.5;
										HX_STACK_LINE(834)
										ret1->y = (int)148;
										HX_STACK_LINE(834)
										{
										}
										HX_STACK_LINE(834)
										{
										}
									}
									HX_STACK_LINE(834)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(834)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(834)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(834)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(834)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(834)
						{
							HX_STACK_LINE(834)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(834)
							if ((_this->_immutable)){
								HX_STACK_LINE(834)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(834)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(834)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(834)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",834);
								{
									HX_STACK_LINE(834)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(834)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(834)
									{
										HX_STACK_LINE(834)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(834)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(834)
											_this->_validate();
										}
									}
									HX_STACK_LINE(834)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",834);
								{
									HX_STACK_LINE(834)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(834)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(834)
									{
										HX_STACK_LINE(834)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(834)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(834)
											_this->_validate();
										}
									}
									HX_STACK_LINE(834)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(834)
						if ((!(((bool((_Function_3_1::Block(ret) == 106.5)) && bool((_Function_3_2::Block(ret) == (int)148))))))){
							HX_STACK_LINE(834)
							{
								HX_STACK_LINE(834)
								ret->zpp_inner->x = 106.5;
								HX_STACK_LINE(834)
								ret->zpp_inner->y = (int)148;
								HX_STACK_LINE(834)
								{
								}
								HX_STACK_LINE(834)
								{
								}
							}
							HX_STACK_LINE(834)
							{
								HX_STACK_LINE(834)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(834)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(834)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(834)
						ret;
					}
					HX_STACK_LINE(834)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(834)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_226{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",834);
				{
					HX_STACK_LINE(834)
					{
					}
					HX_STACK_LINE(834)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(834)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(834)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(834)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(834)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(834)
						ret->zpp_pool = null();
						HX_STACK_LINE(834)
						ret->zpp_disp = false;
						HX_STACK_LINE(834)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(834)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(834)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",834);
								{
									HX_STACK_LINE(834)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(834)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(834)
									{
										HX_STACK_LINE(834)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(834)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(834)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(834)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(834)
											ret1->next = null();
										}
										HX_STACK_LINE(834)
										ret1->weak = false;
									}
									HX_STACK_LINE(834)
									ret1->_immutable = immutable;
									HX_STACK_LINE(834)
									{
										HX_STACK_LINE(834)
										ret1->x = 80.5;
										HX_STACK_LINE(834)
										ret1->y = (int)67;
										HX_STACK_LINE(834)
										{
										}
										HX_STACK_LINE(834)
										{
										}
									}
									HX_STACK_LINE(834)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(834)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(834)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(834)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(834)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(834)
						{
							HX_STACK_LINE(834)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(834)
							if ((_this->_immutable)){
								HX_STACK_LINE(834)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(834)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(834)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(834)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",834);
								{
									HX_STACK_LINE(834)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(834)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(834)
									{
										HX_STACK_LINE(834)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(834)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(834)
											_this->_validate();
										}
									}
									HX_STACK_LINE(834)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",834);
								{
									HX_STACK_LINE(834)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(834)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(834)
									{
										HX_STACK_LINE(834)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(834)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(834)
											_this->_validate();
										}
									}
									HX_STACK_LINE(834)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(834)
						if ((!(((bool((_Function_3_1::Block(ret) == 80.5)) && bool((_Function_3_2::Block(ret) == (int)67))))))){
							HX_STACK_LINE(834)
							{
								HX_STACK_LINE(834)
								ret->zpp_inner->x = 80.5;
								HX_STACK_LINE(834)
								ret->zpp_inner->y = (int)67;
								HX_STACK_LINE(834)
								{
								}
								HX_STACK_LINE(834)
								{
								}
							}
							HX_STACK_LINE(834)
							{
								HX_STACK_LINE(834)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(834)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(834)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(834)
						ret;
					}
					HX_STACK_LINE(834)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(834)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(833)
		::nape::shape::Polygon s45 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_224::Block()).Add(_Function_1_225::Block()).Add(_Function_1_226::Block())),mat8,filt8);		HX_STACK_VAR(s45,"s45");
		HX_STACK_LINE(838)
		{
			HX_STACK_LINE(838)
			{
				HX_STACK_LINE(838)
				s45->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(838)
				if (((((  (((s45->zpp_inner->body != null()))) ? ::nape::phys::Body(s45->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body6))){
					HX_STACK_LINE(838)
					if (((s45->zpp_inner->body != null()))){
						HX_STACK_LINE(838)
						((  (((s45->zpp_inner->body != null()))) ? ::nape::phys::Body(s45->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s45);
					}
					HX_STACK_LINE(838)
					if (((body6 != null()))){
						HX_STACK_LINE(838)
						::nape::shape::ShapeList _this = body6->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(838)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(838)
							_this->push(s45);
						}
						else{
							HX_STACK_LINE(838)
							_this->unshift(s45);
						}
					}
				}
			}
			HX_STACK_LINE(838)
			if (((s45->zpp_inner->body != null()))){
				HX_STACK_LINE(838)
				s45->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(838)
				Dynamic();
			}
		}
		HX_STACK_LINE(839)
		{
			HX_STACK_LINE(839)
			{
				HX_STACK_LINE(839)
				s45->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(839)
				s45->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(839)
				s45->zpp_inner->wake();
			}
			HX_STACK_LINE(839)
			s45->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(840)
		{
			HX_STACK_LINE(840)
			{
				HX_STACK_LINE(840)
				s45->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(840)
				s45->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(840)
				{
				}
				HX_STACK_LINE(840)
				s45->zpp_inner->wake();
			}
			HX_STACK_LINE(840)
			s45->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(841)
		{
			HX_STACK_LINE(841)
			{
				HX_STACK_LINE(841)
				if (((prop8 == null()))){
					HX_STACK_LINE(841)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(841)
				s45->zpp_inner->setFluid(prop8->zpp_inner);
			}
			HX_STACK_LINE(841)
			{
				HX_STACK_LINE(841)
				s45->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(841)
				if (((s45->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(841)
					s45->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(841)
				s45->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(842)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s45){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",842);
					{
						HX_STACK_LINE(842)
						if (((s45->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(842)
							s45->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(842)
						return s45->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(842)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s45);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(842)
			{
				HX_STACK_LINE(842)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(842)
				while(((_g < _g1->length))){
					HX_STACK_LINE(842)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(842)
					++(_g);
					HX_STACK_LINE(842)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(842)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(842)
						continue;
					}
					HX_STACK_LINE(842)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(842)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(842)
					{
						HX_STACK_LINE(842)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(842)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(842)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(842)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_227{
			inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body6){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",847);
				{
					struct _Function_2_1{
						inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body6){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",847);
							{
								HX_STACK_LINE(847)
								if ((body6->zpp_inner->world)){
									HX_STACK_LINE(847)
									hx::Throw ((HX_CSTRING("Error: Space::world has no ") + HX_CSTRING("localCOM")));
								}
								HX_STACK_LINE(847)
								if (((body6->zpp_inner->wrap_localCOM == null()))){
									struct _Function_4_1{
										inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body6){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",847);
											{
												HX_STACK_LINE(847)
												Float x = body6->zpp_inner->localCOMx;		HX_STACK_VAR(x,"x");
												Float y = body6->zpp_inner->localCOMy;		HX_STACK_VAR(y,"y");
												bool weak = false;		HX_STACK_VAR(weak,"weak");
												HX_STACK_LINE(847)
												if (((bool((x != x)) || bool((y != y))))){
													HX_STACK_LINE(847)
													hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
												}
												HX_STACK_LINE(847)
												::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
												HX_STACK_LINE(847)
												if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
													HX_STACK_LINE(847)
													ret = ::nape::geom::Vec2_obj::__new(null(),null());
												}
												else{
													HX_STACK_LINE(847)
													ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
													HX_STACK_LINE(847)
													::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
													HX_STACK_LINE(847)
													ret->zpp_pool = null();
													HX_STACK_LINE(847)
													ret->zpp_disp = false;
													HX_STACK_LINE(847)
													if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
														HX_STACK_LINE(847)
														::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
													}
												}
												HX_STACK_LINE(847)
												if (((ret->zpp_inner == null()))){
													struct _Function_6_1{
														inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",847);
															{
																HX_STACK_LINE(847)
																bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
																HX_STACK_LINE(847)
																::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(847)
																{
																	HX_STACK_LINE(847)
																	if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
																		HX_STACK_LINE(847)
																		ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
																	}
																	else{
																		HX_STACK_LINE(847)
																		ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
																		HX_STACK_LINE(847)
																		::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
																		HX_STACK_LINE(847)
																		ret1->next = null();
																	}
																	HX_STACK_LINE(847)
																	ret1->weak = false;
																}
																HX_STACK_LINE(847)
																ret1->_immutable = immutable;
																HX_STACK_LINE(847)
																{
																	HX_STACK_LINE(847)
																	ret1->x = x;
																	HX_STACK_LINE(847)
																	ret1->y = y;
																	HX_STACK_LINE(847)
																	{
																	}
																	HX_STACK_LINE(847)
																	{
																	}
																}
																HX_STACK_LINE(847)
																return ret1;
															}
															return null();
														}
													};
													HX_STACK_LINE(847)
													ret->zpp_inner = _Function_6_1::Block(x,y);
													HX_STACK_LINE(847)
													ret->zpp_inner->outer = ret;
												}
												else{
													HX_STACK_LINE(847)
													if (((bool((ret != null())) && bool(ret->zpp_disp)))){
														HX_STACK_LINE(847)
														hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
													}
													HX_STACK_LINE(847)
													{
														HX_STACK_LINE(847)
														::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(847)
														if ((_this->_immutable)){
															HX_STACK_LINE(847)
															hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
														}
														HX_STACK_LINE(847)
														if (((_this->_isimmutable_dyn() != null()))){
															HX_STACK_LINE(847)
															_this->_isimmutable();
														}
													}
													HX_STACK_LINE(847)
													if (((bool((x != x)) || bool((y != y))))){
														HX_STACK_LINE(847)
														hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
													}
													struct _Function_6_1{
														inline static Float Block( ::nape::geom::Vec2 &ret){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",847);
															{
																HX_STACK_LINE(847)
																if (((bool((ret != null())) && bool(ret->zpp_disp)))){
																	HX_STACK_LINE(847)
																	hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
																}
																HX_STACK_LINE(847)
																{
																	HX_STACK_LINE(847)
																	::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(847)
																	if (((_this->_validate_dyn() != null()))){
																		HX_STACK_LINE(847)
																		_this->_validate();
																	}
																}
																HX_STACK_LINE(847)
																return ret->zpp_inner->x;
															}
															return null();
														}
													};
													struct _Function_6_2{
														inline static Float Block( ::nape::geom::Vec2 &ret){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",847);
															{
																HX_STACK_LINE(847)
																if (((bool((ret != null())) && bool(ret->zpp_disp)))){
																	HX_STACK_LINE(847)
																	hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
																}
																HX_STACK_LINE(847)
																{
																	HX_STACK_LINE(847)
																	::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(847)
																	if (((_this->_validate_dyn() != null()))){
																		HX_STACK_LINE(847)
																		_this->_validate();
																	}
																}
																HX_STACK_LINE(847)
																return ret->zpp_inner->y;
															}
															return null();
														}
													};
													HX_STACK_LINE(847)
													if ((!(((bool((_Function_6_1::Block(ret) == x)) && bool((_Function_6_2::Block(ret) == y))))))){
														HX_STACK_LINE(847)
														{
															HX_STACK_LINE(847)
															ret->zpp_inner->x = x;
															HX_STACK_LINE(847)
															ret->zpp_inner->y = y;
															HX_STACK_LINE(847)
															{
															}
															HX_STACK_LINE(847)
															{
															}
														}
														HX_STACK_LINE(847)
														{
															HX_STACK_LINE(847)
															::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(847)
															if (((_this->_invalidate_dyn() != null()))){
																HX_STACK_LINE(847)
																_this->_invalidate(_this);
															}
														}
													}
													HX_STACK_LINE(847)
													ret;
												}
												HX_STACK_LINE(847)
												ret->zpp_inner->weak = weak;
												HX_STACK_LINE(847)
												return ret;
											}
											return null();
										}
									};
									HX_STACK_LINE(847)
									body6->zpp_inner->wrap_localCOM = _Function_4_1::Block(body6);
									HX_STACK_LINE(847)
									body6->zpp_inner->wrap_localCOM->zpp_inner->_inuse = true;
									HX_STACK_LINE(847)
									body6->zpp_inner->wrap_localCOM->zpp_inner->_immutable = true;
									HX_STACK_LINE(847)
									body6->zpp_inner->wrap_localCOM->zpp_inner->_validate = body6->zpp_inner->getlocalCOM_dyn();
								}
								HX_STACK_LINE(847)
								return body6->zpp_inner->wrap_localCOM;
							}
							return null();
						}
					};
					HX_STACK_LINE(847)
					::nape::geom::Vec2 _this = _Function_2_1::Block(body6);		HX_STACK_VAR(_this,"_this");
					bool weak = false;		HX_STACK_VAR(weak,"weak");
					HX_STACK_LINE(847)
					if (((bool((_this != null())) && bool(_this->zpp_disp)))){
						HX_STACK_LINE(847)
						hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
					}
					struct _Function_2_2{
						inline static ::nape::geom::Vec2 Block( ::nape::geom::Vec2 &_this,bool &weak){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",847);
							{
								struct _Function_3_1{
									inline static Float Block( ::nape::geom::Vec2 &_this){
										HX_STACK_PUSH("*::closure","PhysicsData.hx",847);
										{
											HX_STACK_LINE(847)
											if ((_this->zpp_disp)){
												HX_STACK_LINE(847)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(847)
											{
												HX_STACK_LINE(847)
												::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
												HX_STACK_LINE(847)
												if (((_this1->_validate_dyn() != null()))){
													HX_STACK_LINE(847)
													_this1->_validate();
												}
											}
											HX_STACK_LINE(847)
											return _this->zpp_inner->x;
										}
										return null();
									}
								};
								struct _Function_3_2{
									inline static Float Block( ::nape::geom::Vec2 &_this){
										HX_STACK_PUSH("*::closure","PhysicsData.hx",847);
										{
											HX_STACK_LINE(847)
											if ((_this->zpp_disp)){
												HX_STACK_LINE(847)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(847)
											{
												HX_STACK_LINE(847)
												::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
												HX_STACK_LINE(847)
												if (((_this1->_validate_dyn() != null()))){
													HX_STACK_LINE(847)
													_this1->_validate();
												}
											}
											HX_STACK_LINE(847)
											return _this->zpp_inner->y;
										}
										return null();
									}
								};
								HX_STACK_LINE(847)
								Float x = _Function_3_1::Block(_this);		HX_STACK_VAR(x,"x");
								Float y = _Function_3_2::Block(_this);		HX_STACK_VAR(y,"y");
								HX_STACK_LINE(847)
								if (((bool((x != x)) || bool((y != y))))){
									HX_STACK_LINE(847)
									hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
								}
								HX_STACK_LINE(847)
								::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(847)
								if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
									HX_STACK_LINE(847)
									ret = ::nape::geom::Vec2_obj::__new(null(),null());
								}
								else{
									HX_STACK_LINE(847)
									ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
									HX_STACK_LINE(847)
									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
									HX_STACK_LINE(847)
									ret->zpp_pool = null();
									HX_STACK_LINE(847)
									ret->zpp_disp = false;
									HX_STACK_LINE(847)
									if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
										HX_STACK_LINE(847)
										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
									}
								}
								HX_STACK_LINE(847)
								if (((ret->zpp_inner == null()))){
									struct _Function_4_1{
										inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",847);
											{
												HX_STACK_LINE(847)
												bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
												HX_STACK_LINE(847)
												::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(847)
												{
													HX_STACK_LINE(847)
													if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
														HX_STACK_LINE(847)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
													}
													else{
														HX_STACK_LINE(847)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
														HX_STACK_LINE(847)
														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(847)
														ret1->next = null();
													}
													HX_STACK_LINE(847)
													ret1->weak = false;
												}
												HX_STACK_LINE(847)
												ret1->_immutable = immutable;
												HX_STACK_LINE(847)
												{
													HX_STACK_LINE(847)
													ret1->x = x;
													HX_STACK_LINE(847)
													ret1->y = y;
													HX_STACK_LINE(847)
													{
													}
													HX_STACK_LINE(847)
													{
													}
												}
												HX_STACK_LINE(847)
												return ret1;
											}
											return null();
										}
									};
									HX_STACK_LINE(847)
									ret->zpp_inner = _Function_4_1::Block(x,y);
									HX_STACK_LINE(847)
									ret->zpp_inner->outer = ret;
								}
								else{
									HX_STACK_LINE(847)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(847)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(847)
									{
										HX_STACK_LINE(847)
										::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
										HX_STACK_LINE(847)
										if ((_this1->_immutable)){
											HX_STACK_LINE(847)
											hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
										}
										HX_STACK_LINE(847)
										if (((_this1->_isimmutable_dyn() != null()))){
											HX_STACK_LINE(847)
											_this1->_isimmutable();
										}
									}
									HX_STACK_LINE(847)
									if (((bool((x != x)) || bool((y != y))))){
										HX_STACK_LINE(847)
										hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
									}
									struct _Function_4_1{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",847);
											{
												HX_STACK_LINE(847)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(847)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(847)
												{
													HX_STACK_LINE(847)
													::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(847)
													if (((_this1->_validate_dyn() != null()))){
														HX_STACK_LINE(847)
														_this1->_validate();
													}
												}
												HX_STACK_LINE(847)
												return ret->zpp_inner->x;
											}
											return null();
										}
									};
									struct _Function_4_2{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",847);
											{
												HX_STACK_LINE(847)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(847)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(847)
												{
													HX_STACK_LINE(847)
													::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(847)
													if (((_this1->_validate_dyn() != null()))){
														HX_STACK_LINE(847)
														_this1->_validate();
													}
												}
												HX_STACK_LINE(847)
												return ret->zpp_inner->y;
											}
											return null();
										}
									};
									HX_STACK_LINE(847)
									if ((!(((bool((_Function_4_1::Block(ret) == x)) && bool((_Function_4_2::Block(ret) == y))))))){
										HX_STACK_LINE(847)
										{
											HX_STACK_LINE(847)
											ret->zpp_inner->x = x;
											HX_STACK_LINE(847)
											ret->zpp_inner->y = y;
											HX_STACK_LINE(847)
											{
											}
											HX_STACK_LINE(847)
											{
											}
										}
										HX_STACK_LINE(847)
										{
											HX_STACK_LINE(847)
											::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
											HX_STACK_LINE(847)
											if (((_this1->_invalidate_dyn() != null()))){
												HX_STACK_LINE(847)
												_this1->_invalidate(_this1);
											}
										}
									}
									HX_STACK_LINE(847)
									ret;
								}
								HX_STACK_LINE(847)
								ret->zpp_inner->weak = weak;
								HX_STACK_LINE(847)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(847)
					return _Function_2_2::Block(_this,weak);
				}
				return null();
			}
		};
		HX_STACK_LINE(847)
		::nape::geom::Vec2 anchor6 = _Function_1_227::Block(body6);		HX_STACK_VAR(anchor6,"anchor6");
		struct _Function_1_228{
			inline static ::nape::geom::Vec2 Block( ::nape::geom::Vec2 &anchor6){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",848);
				{
					struct _Function_2_1{
						inline static Float Block( ::nape::geom::Vec2 &anchor6){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",848);
							{
								HX_STACK_LINE(848)
								if (((bool((anchor6 != null())) && bool(anchor6->zpp_disp)))){
									HX_STACK_LINE(848)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(848)
								{
									HX_STACK_LINE(848)
									::zpp_nape::geom::ZPP_Vec2 _this = anchor6->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(848)
									if (((_this->_validate_dyn() != null()))){
										HX_STACK_LINE(848)
										_this->_validate();
									}
								}
								HX_STACK_LINE(848)
								return anchor6->zpp_inner->x;
							}
							return null();
						}
					};
					struct _Function_2_2{
						inline static Float Block( ::nape::geom::Vec2 &anchor6){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",848);
							{
								HX_STACK_LINE(848)
								if (((bool((anchor6 != null())) && bool(anchor6->zpp_disp)))){
									HX_STACK_LINE(848)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(848)
								{
									HX_STACK_LINE(848)
									::zpp_nape::geom::ZPP_Vec2 _this = anchor6->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(848)
									if (((_this->_validate_dyn() != null()))){
										HX_STACK_LINE(848)
										_this->_validate();
									}
								}
								HX_STACK_LINE(848)
								return anchor6->zpp_inner->y;
							}
							return null();
						}
					};
					HX_STACK_LINE(848)
					Float x = -(_Function_2_1::Block(anchor6));		HX_STACK_VAR(x,"x");
					Float y = -(_Function_2_2::Block(anchor6));		HX_STACK_VAR(y,"y");
					struct _Function_2_3{
						inline static ::nape::geom::Vec2 Block( Float &x,Float &y){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",848);
							{
								HX_STACK_LINE(848)
								if (((bool((x != x)) || bool((y != y))))){
									HX_STACK_LINE(848)
									hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
								}
								HX_STACK_LINE(848)
								::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(848)
								if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
									HX_STACK_LINE(848)
									ret = ::nape::geom::Vec2_obj::__new(null(),null());
								}
								else{
									HX_STACK_LINE(848)
									ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
									HX_STACK_LINE(848)
									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
									HX_STACK_LINE(848)
									ret->zpp_pool = null();
									HX_STACK_LINE(848)
									ret->zpp_disp = false;
									HX_STACK_LINE(848)
									if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
										HX_STACK_LINE(848)
										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
									}
								}
								HX_STACK_LINE(848)
								if (((ret->zpp_inner == null()))){
									struct _Function_4_1{
										inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",848);
											{
												HX_STACK_LINE(848)
												bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
												HX_STACK_LINE(848)
												::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(848)
												{
													HX_STACK_LINE(848)
													if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
														HX_STACK_LINE(848)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
													}
													else{
														HX_STACK_LINE(848)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
														HX_STACK_LINE(848)
														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(848)
														ret1->next = null();
													}
													HX_STACK_LINE(848)
													ret1->weak = false;
												}
												HX_STACK_LINE(848)
												ret1->_immutable = immutable;
												HX_STACK_LINE(848)
												{
													HX_STACK_LINE(848)
													ret1->x = x;
													HX_STACK_LINE(848)
													ret1->y = y;
													HX_STACK_LINE(848)
													{
													}
													HX_STACK_LINE(848)
													{
													}
												}
												HX_STACK_LINE(848)
												return ret1;
											}
											return null();
										}
									};
									HX_STACK_LINE(848)
									ret->zpp_inner = _Function_4_1::Block(x,y);
									HX_STACK_LINE(848)
									ret->zpp_inner->outer = ret;
								}
								else{
									HX_STACK_LINE(848)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(848)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(848)
									{
										HX_STACK_LINE(848)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(848)
										if ((_this->_immutable)){
											HX_STACK_LINE(848)
											hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
										}
										HX_STACK_LINE(848)
										if (((_this->_isimmutable_dyn() != null()))){
											HX_STACK_LINE(848)
											_this->_isimmutable();
										}
									}
									HX_STACK_LINE(848)
									if (((bool((x != x)) || bool((y != y))))){
										HX_STACK_LINE(848)
										hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
									}
									struct _Function_4_1{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",848);
											{
												HX_STACK_LINE(848)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(848)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(848)
												{
													HX_STACK_LINE(848)
													::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(848)
													if (((_this->_validate_dyn() != null()))){
														HX_STACK_LINE(848)
														_this->_validate();
													}
												}
												HX_STACK_LINE(848)
												return ret->zpp_inner->x;
											}
											return null();
										}
									};
									struct _Function_4_2{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",848);
											{
												HX_STACK_LINE(848)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(848)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(848)
												{
													HX_STACK_LINE(848)
													::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(848)
													if (((_this->_validate_dyn() != null()))){
														HX_STACK_LINE(848)
														_this->_validate();
													}
												}
												HX_STACK_LINE(848)
												return ret->zpp_inner->y;
											}
											return null();
										}
									};
									HX_STACK_LINE(848)
									if ((!(((bool((_Function_4_1::Block(ret) == x)) && bool((_Function_4_2::Block(ret) == y))))))){
										HX_STACK_LINE(848)
										{
											HX_STACK_LINE(848)
											ret->zpp_inner->x = x;
											HX_STACK_LINE(848)
											ret->zpp_inner->y = y;
											HX_STACK_LINE(848)
											{
											}
											HX_STACK_LINE(848)
											{
											}
										}
										HX_STACK_LINE(848)
										{
											HX_STACK_LINE(848)
											::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(848)
											if (((_this->_invalidate_dyn() != null()))){
												HX_STACK_LINE(848)
												_this->_invalidate(_this);
											}
										}
									}
									HX_STACK_LINE(848)
									ret;
								}
								HX_STACK_LINE(848)
								ret->zpp_inner->weak = true;
								HX_STACK_LINE(848)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(848)
					return _Function_2_3::Block(x,y);
				}
				return null();
			}
		};
		HX_STACK_LINE(848)
		body6->translateShapes(_Function_1_228::Block(anchor6));
		HX_STACK_LINE(849)
		{
			struct _Function_2_1{
				inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body6){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",849);
					{
						HX_STACK_LINE(849)
						if (((body6->zpp_inner->wrap_pos == null()))){
							HX_STACK_LINE(849)
							body6->zpp_inner->setupPosition();
						}
						HX_STACK_LINE(849)
						return body6->zpp_inner->wrap_pos;
					}
					return null();
				}
			};
			HX_STACK_LINE(849)
			::nape::geom::Vec2 _this = _Function_2_1::Block(body6);		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(849)
			if (((bool((_this != null())) && bool(_this->zpp_disp)))){
				HX_STACK_LINE(849)
				hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
			}
			HX_STACK_LINE(849)
			{
				HX_STACK_LINE(849)
				::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
				HX_STACK_LINE(849)
				if ((_this1->_immutable)){
					HX_STACK_LINE(849)
					hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
				}
				HX_STACK_LINE(849)
				if (((_this1->_isimmutable_dyn() != null()))){
					HX_STACK_LINE(849)
					_this1->_isimmutable();
				}
			}
			HX_STACK_LINE(849)
			{
			}
			struct _Function_2_2{
				inline static Float Block( ::nape::geom::Vec2 &_this){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",849);
					{
						HX_STACK_LINE(849)
						if (((bool((_this != null())) && bool(_this->zpp_disp)))){
							HX_STACK_LINE(849)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(849)
						{
							HX_STACK_LINE(849)
							::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(849)
							if (((_this1->_validate_dyn() != null()))){
								HX_STACK_LINE(849)
								_this1->_validate();
							}
						}
						HX_STACK_LINE(849)
						return _this->zpp_inner->x;
					}
					return null();
				}
			};
			struct _Function_2_3{
				inline static Float Block( ::nape::geom::Vec2 &_this){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",849);
					{
						HX_STACK_LINE(849)
						if (((bool((_this != null())) && bool(_this->zpp_disp)))){
							HX_STACK_LINE(849)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(849)
						{
							HX_STACK_LINE(849)
							::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(849)
							if (((_this1->_validate_dyn() != null()))){
								HX_STACK_LINE(849)
								_this1->_validate();
							}
						}
						HX_STACK_LINE(849)
						return _this->zpp_inner->y;
					}
					return null();
				}
			};
			HX_STACK_LINE(849)
			if ((!(((bool((_Function_2_2::Block(_this) == (int)0)) && bool((_Function_2_3::Block(_this) == (int)0))))))){
				HX_STACK_LINE(849)
				{
					HX_STACK_LINE(849)
					_this->zpp_inner->x = (int)0;
					HX_STACK_LINE(849)
					_this->zpp_inner->y = (int)0;
					HX_STACK_LINE(849)
					{
					}
					HX_STACK_LINE(849)
					{
					}
				}
				HX_STACK_LINE(849)
				{
					HX_STACK_LINE(849)
					::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
					HX_STACK_LINE(849)
					if (((_this1->_invalidate_dyn() != null()))){
						HX_STACK_LINE(849)
						_this1->_invalidate(_this1);
					}
				}
			}
			HX_STACK_LINE(849)
			_this;
		}
		struct _Function_1_229{
			inline static Dynamic Block( ::nape::phys::Body &body6,::nape::geom::Vec2 &anchor6){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",851);
				{
					hx::Anon __result = hx::Anon_obj::Create();
					__result->Add(HX_CSTRING("body") , body6,false);
					__result->Add(HX_CSTRING("anchor") , anchor6,false);
					return __result;
				}
				return null();
			}
		};
		HX_STACK_LINE(851)
		::PhysicsData_obj::bodies->set(HX_CSTRING("redleaf"),_Function_1_229::Block(body6,anchor6));
		HX_STACK_LINE(853)
		::nape::phys::Body body7 = ::nape::phys::Body_obj::__new(null(),null());		HX_STACK_VAR(body7,"body7");
		HX_STACK_LINE(854)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::phys::Body &body7){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",854);
					{
						HX_STACK_LINE(854)
						if (((body7->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(854)
							body7->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(854)
						return body7->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(854)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(body7);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(854)
			{
				HX_STACK_LINE(854)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(854)
				while(((_g < _g1->length))){
					HX_STACK_LINE(854)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(854)
					++(_g);
					HX_STACK_LINE(854)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(854)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(854)
						continue;
					}
					HX_STACK_LINE(854)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(854)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(854)
					{
						HX_STACK_LINE(854)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(854)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(854)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(854)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		HX_STACK_LINE(857)
		::nape::phys::Material mat9 = ::nape::phys::Material_obj::__new(null(),null(),null(),null(),null());		HX_STACK_VAR(mat9,"mat9");
		HX_STACK_LINE(858)
		::nape::dynamics::InteractionFilter filt9 = ::nape::dynamics::InteractionFilter_obj::__new(null(),null(),null(),null(),null(),null());		HX_STACK_VAR(filt9,"filt9");
		HX_STACK_LINE(859)
		::nape::phys::FluidProperties prop9 = ::nape::phys::FluidProperties_obj::__new(null(),null());		HX_STACK_VAR(prop9,"prop9");
		struct _Function_1_230{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",864);
				{
					HX_STACK_LINE(864)
					{
					}
					HX_STACK_LINE(864)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(864)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(864)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(864)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(864)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(864)
						ret->zpp_pool = null();
						HX_STACK_LINE(864)
						ret->zpp_disp = false;
						HX_STACK_LINE(864)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(864)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(864)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",864);
								{
									HX_STACK_LINE(864)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(864)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(864)
									{
										HX_STACK_LINE(864)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(864)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(864)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(864)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(864)
											ret1->next = null();
										}
										HX_STACK_LINE(864)
										ret1->weak = false;
									}
									HX_STACK_LINE(864)
									ret1->_immutable = immutable;
									HX_STACK_LINE(864)
									{
										HX_STACK_LINE(864)
										ret1->x = 25.1428571428571;
										HX_STACK_LINE(864)
										ret1->y = 24.7142857142857;
										HX_STACK_LINE(864)
										{
										}
										HX_STACK_LINE(864)
										{
										}
									}
									HX_STACK_LINE(864)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(864)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(864)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(864)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(864)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(864)
						{
							HX_STACK_LINE(864)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(864)
							if ((_this->_immutable)){
								HX_STACK_LINE(864)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(864)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(864)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(864)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",864);
								{
									HX_STACK_LINE(864)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(864)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(864)
									{
										HX_STACK_LINE(864)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(864)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(864)
											_this->_validate();
										}
									}
									HX_STACK_LINE(864)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",864);
								{
									HX_STACK_LINE(864)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(864)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(864)
									{
										HX_STACK_LINE(864)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(864)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(864)
											_this->_validate();
										}
									}
									HX_STACK_LINE(864)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(864)
						if ((!(((bool((_Function_3_1::Block(ret) == 25.1428571428571)) && bool((_Function_3_2::Block(ret) == 24.7142857142857))))))){
							HX_STACK_LINE(864)
							{
								HX_STACK_LINE(864)
								ret->zpp_inner->x = 25.1428571428571;
								HX_STACK_LINE(864)
								ret->zpp_inner->y = 24.7142857142857;
								HX_STACK_LINE(864)
								{
								}
								HX_STACK_LINE(864)
								{
								}
							}
							HX_STACK_LINE(864)
							{
								HX_STACK_LINE(864)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(864)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(864)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(864)
						ret;
					}
					HX_STACK_LINE(864)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(864)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(862)
		::nape::shape::Circle s46 = ::nape::shape::Circle_obj::__new((int)25,_Function_1_230::Block(),mat9,filt9);		HX_STACK_VAR(s46,"s46");
		HX_STACK_LINE(868)
		{
			HX_STACK_LINE(868)
			{
				HX_STACK_LINE(868)
				s46->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(868)
				if (((((  (((s46->zpp_inner->body != null()))) ? ::nape::phys::Body(s46->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body7))){
					HX_STACK_LINE(868)
					if (((s46->zpp_inner->body != null()))){
						HX_STACK_LINE(868)
						((  (((s46->zpp_inner->body != null()))) ? ::nape::phys::Body(s46->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s46);
					}
					HX_STACK_LINE(868)
					if (((body7 != null()))){
						HX_STACK_LINE(868)
						::nape::shape::ShapeList _this = body7->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(868)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(868)
							_this->push(s46);
						}
						else{
							HX_STACK_LINE(868)
							_this->unshift(s46);
						}
					}
				}
			}
			HX_STACK_LINE(868)
			if (((s46->zpp_inner->body != null()))){
				HX_STACK_LINE(868)
				s46->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(868)
				Dynamic();
			}
		}
		HX_STACK_LINE(869)
		{
			HX_STACK_LINE(869)
			{
				HX_STACK_LINE(869)
				s46->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(869)
				s46->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(869)
				s46->zpp_inner->wake();
			}
			HX_STACK_LINE(869)
			s46->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(870)
		{
			HX_STACK_LINE(870)
			{
				HX_STACK_LINE(870)
				s46->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(870)
				s46->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(870)
				{
				}
				HX_STACK_LINE(870)
				s46->zpp_inner->wake();
			}
			HX_STACK_LINE(870)
			s46->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(871)
		{
			HX_STACK_LINE(871)
			{
				HX_STACK_LINE(871)
				if (((prop9 == null()))){
					HX_STACK_LINE(871)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(871)
				s46->zpp_inner->setFluid(prop9->zpp_inner);
			}
			HX_STACK_LINE(871)
			{
				HX_STACK_LINE(871)
				s46->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(871)
				if (((s46->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(871)
					s46->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(871)
				s46->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(872)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Circle &s46){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",872);
					{
						HX_STACK_LINE(872)
						if (((s46->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(872)
							s46->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(872)
						return s46->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(872)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s46);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(872)
			{
				HX_STACK_LINE(872)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(872)
				while(((_g < _g1->length))){
					HX_STACK_LINE(872)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(872)
					++(_g);
					HX_STACK_LINE(872)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(872)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(872)
						continue;
					}
					HX_STACK_LINE(872)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(872)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(872)
					{
						HX_STACK_LINE(872)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(872)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(872)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(872)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		HX_STACK_LINE(875)
		::nape::phys::Material mat10 = ::nape::phys::Material_obj::__new(null(),null(),null(),null(),null());		HX_STACK_VAR(mat10,"mat10");
		HX_STACK_LINE(876)
		::nape::dynamics::InteractionFilter filt10 = ::nape::dynamics::InteractionFilter_obj::__new(null(),null(),null(),null(),null(),null());		HX_STACK_VAR(filt10,"filt10");
		HX_STACK_LINE(877)
		::nape::phys::FluidProperties prop10 = ::nape::phys::FluidProperties_obj::__new(null(),null());		HX_STACK_VAR(prop10,"prop10");
		struct _Function_1_231{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
				{
					HX_STACK_LINE(882)
					{
					}
					HX_STACK_LINE(882)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(882)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(882)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(882)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(882)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(882)
						ret->zpp_pool = null();
						HX_STACK_LINE(882)
						ret->zpp_disp = false;
						HX_STACK_LINE(882)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(882)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(882)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(882)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(882)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(882)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(882)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(882)
											ret1->next = null();
										}
										HX_STACK_LINE(882)
										ret1->weak = false;
									}
									HX_STACK_LINE(882)
									ret1->_immutable = immutable;
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										ret1->x = 1.5;
										HX_STACK_LINE(882)
										ret1->y = (int)13;
										HX_STACK_LINE(882)
										{
										}
										HX_STACK_LINE(882)
										{
										}
									}
									HX_STACK_LINE(882)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(882)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(882)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(882)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(882)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(882)
						{
							HX_STACK_LINE(882)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(882)
							if ((_this->_immutable)){
								HX_STACK_LINE(882)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(882)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(882)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(882)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(882)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(882)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(882)
											_this->_validate();
										}
									}
									HX_STACK_LINE(882)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(882)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(882)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(882)
											_this->_validate();
										}
									}
									HX_STACK_LINE(882)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(882)
						if ((!(((bool((_Function_3_1::Block(ret) == 1.5)) && bool((_Function_3_2::Block(ret) == (int)13))))))){
							HX_STACK_LINE(882)
							{
								HX_STACK_LINE(882)
								ret->zpp_inner->x = 1.5;
								HX_STACK_LINE(882)
								ret->zpp_inner->y = (int)13;
								HX_STACK_LINE(882)
								{
								}
								HX_STACK_LINE(882)
								{
								}
							}
							HX_STACK_LINE(882)
							{
								HX_STACK_LINE(882)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(882)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(882)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(882)
						ret;
					}
					HX_STACK_LINE(882)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(882)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_232{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
				{
					HX_STACK_LINE(882)
					{
					}
					HX_STACK_LINE(882)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(882)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(882)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(882)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(882)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(882)
						ret->zpp_pool = null();
						HX_STACK_LINE(882)
						ret->zpp_disp = false;
						HX_STACK_LINE(882)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(882)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(882)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(882)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(882)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(882)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(882)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(882)
											ret1->next = null();
										}
										HX_STACK_LINE(882)
										ret1->weak = false;
									}
									HX_STACK_LINE(882)
									ret1->_immutable = immutable;
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										ret1->x = 0.5;
										HX_STACK_LINE(882)
										ret1->y = (int)33;
										HX_STACK_LINE(882)
										{
										}
										HX_STACK_LINE(882)
										{
										}
									}
									HX_STACK_LINE(882)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(882)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(882)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(882)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(882)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(882)
						{
							HX_STACK_LINE(882)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(882)
							if ((_this->_immutable)){
								HX_STACK_LINE(882)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(882)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(882)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(882)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(882)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(882)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(882)
											_this->_validate();
										}
									}
									HX_STACK_LINE(882)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(882)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(882)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(882)
											_this->_validate();
										}
									}
									HX_STACK_LINE(882)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(882)
						if ((!(((bool((_Function_3_1::Block(ret) == 0.5)) && bool((_Function_3_2::Block(ret) == (int)33))))))){
							HX_STACK_LINE(882)
							{
								HX_STACK_LINE(882)
								ret->zpp_inner->x = 0.5;
								HX_STACK_LINE(882)
								ret->zpp_inner->y = (int)33;
								HX_STACK_LINE(882)
								{
								}
								HX_STACK_LINE(882)
								{
								}
							}
							HX_STACK_LINE(882)
							{
								HX_STACK_LINE(882)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(882)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(882)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(882)
						ret;
					}
					HX_STACK_LINE(882)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(882)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_233{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
				{
					HX_STACK_LINE(882)
					{
					}
					HX_STACK_LINE(882)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(882)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(882)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(882)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(882)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(882)
						ret->zpp_pool = null();
						HX_STACK_LINE(882)
						ret->zpp_disp = false;
						HX_STACK_LINE(882)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(882)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(882)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(882)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(882)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(882)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(882)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(882)
											ret1->next = null();
										}
										HX_STACK_LINE(882)
										ret1->weak = false;
									}
									HX_STACK_LINE(882)
									ret1->_immutable = immutable;
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										ret1->x = 10.5;
										HX_STACK_LINE(882)
										ret1->y = (int)46;
										HX_STACK_LINE(882)
										{
										}
										HX_STACK_LINE(882)
										{
										}
									}
									HX_STACK_LINE(882)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(882)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(882)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(882)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(882)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(882)
						{
							HX_STACK_LINE(882)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(882)
							if ((_this->_immutable)){
								HX_STACK_LINE(882)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(882)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(882)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(882)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(882)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(882)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(882)
											_this->_validate();
										}
									}
									HX_STACK_LINE(882)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(882)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(882)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(882)
											_this->_validate();
										}
									}
									HX_STACK_LINE(882)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(882)
						if ((!(((bool((_Function_3_1::Block(ret) == 10.5)) && bool((_Function_3_2::Block(ret) == (int)46))))))){
							HX_STACK_LINE(882)
							{
								HX_STACK_LINE(882)
								ret->zpp_inner->x = 10.5;
								HX_STACK_LINE(882)
								ret->zpp_inner->y = (int)46;
								HX_STACK_LINE(882)
								{
								}
								HX_STACK_LINE(882)
								{
								}
							}
							HX_STACK_LINE(882)
							{
								HX_STACK_LINE(882)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(882)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(882)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(882)
						ret;
					}
					HX_STACK_LINE(882)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(882)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_234{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
				{
					HX_STACK_LINE(882)
					{
					}
					HX_STACK_LINE(882)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(882)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(882)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(882)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(882)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(882)
						ret->zpp_pool = null();
						HX_STACK_LINE(882)
						ret->zpp_disp = false;
						HX_STACK_LINE(882)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(882)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(882)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(882)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(882)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(882)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(882)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(882)
											ret1->next = null();
										}
										HX_STACK_LINE(882)
										ret1->weak = false;
									}
									HX_STACK_LINE(882)
									ret1->_immutable = immutable;
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										ret1->x = 48.5;
										HX_STACK_LINE(882)
										ret1->y = (int)17;
										HX_STACK_LINE(882)
										{
										}
										HX_STACK_LINE(882)
										{
										}
									}
									HX_STACK_LINE(882)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(882)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(882)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(882)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(882)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(882)
						{
							HX_STACK_LINE(882)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(882)
							if ((_this->_immutable)){
								HX_STACK_LINE(882)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(882)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(882)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(882)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(882)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(882)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(882)
											_this->_validate();
										}
									}
									HX_STACK_LINE(882)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(882)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(882)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(882)
											_this->_validate();
										}
									}
									HX_STACK_LINE(882)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(882)
						if ((!(((bool((_Function_3_1::Block(ret) == 48.5)) && bool((_Function_3_2::Block(ret) == (int)17))))))){
							HX_STACK_LINE(882)
							{
								HX_STACK_LINE(882)
								ret->zpp_inner->x = 48.5;
								HX_STACK_LINE(882)
								ret->zpp_inner->y = (int)17;
								HX_STACK_LINE(882)
								{
								}
								HX_STACK_LINE(882)
								{
								}
							}
							HX_STACK_LINE(882)
							{
								HX_STACK_LINE(882)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(882)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(882)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(882)
						ret;
					}
					HX_STACK_LINE(882)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(882)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_235{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
				{
					HX_STACK_LINE(882)
					{
					}
					HX_STACK_LINE(882)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(882)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(882)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(882)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(882)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(882)
						ret->zpp_pool = null();
						HX_STACK_LINE(882)
						ret->zpp_disp = false;
						HX_STACK_LINE(882)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(882)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(882)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(882)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(882)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(882)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(882)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(882)
											ret1->next = null();
										}
										HX_STACK_LINE(882)
										ret1->weak = false;
									}
									HX_STACK_LINE(882)
									ret1->_immutable = immutable;
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										ret1->x = 39.5;
										HX_STACK_LINE(882)
										ret1->y = (int)4;
										HX_STACK_LINE(882)
										{
										}
										HX_STACK_LINE(882)
										{
										}
									}
									HX_STACK_LINE(882)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(882)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(882)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(882)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(882)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(882)
						{
							HX_STACK_LINE(882)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(882)
							if ((_this->_immutable)){
								HX_STACK_LINE(882)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(882)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(882)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(882)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(882)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(882)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(882)
											_this->_validate();
										}
									}
									HX_STACK_LINE(882)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(882)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(882)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(882)
											_this->_validate();
										}
									}
									HX_STACK_LINE(882)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(882)
						if ((!(((bool((_Function_3_1::Block(ret) == 39.5)) && bool((_Function_3_2::Block(ret) == (int)4))))))){
							HX_STACK_LINE(882)
							{
								HX_STACK_LINE(882)
								ret->zpp_inner->x = 39.5;
								HX_STACK_LINE(882)
								ret->zpp_inner->y = (int)4;
								HX_STACK_LINE(882)
								{
								}
								HX_STACK_LINE(882)
								{
								}
							}
							HX_STACK_LINE(882)
							{
								HX_STACK_LINE(882)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(882)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(882)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(882)
						ret;
					}
					HX_STACK_LINE(882)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(882)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_236{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
				{
					HX_STACK_LINE(882)
					{
					}
					HX_STACK_LINE(882)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(882)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(882)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(882)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(882)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(882)
						ret->zpp_pool = null();
						HX_STACK_LINE(882)
						ret->zpp_disp = false;
						HX_STACK_LINE(882)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(882)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(882)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(882)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(882)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(882)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(882)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(882)
											ret1->next = null();
										}
										HX_STACK_LINE(882)
										ret1->weak = false;
									}
									HX_STACK_LINE(882)
									ret1->_immutable = immutable;
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										ret1->x = (int)20;
										HX_STACK_LINE(882)
										ret1->y = -0.5;
										HX_STACK_LINE(882)
										{
										}
										HX_STACK_LINE(882)
										{
										}
									}
									HX_STACK_LINE(882)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(882)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(882)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(882)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(882)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(882)
						{
							HX_STACK_LINE(882)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(882)
							if ((_this->_immutable)){
								HX_STACK_LINE(882)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(882)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(882)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(882)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(882)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(882)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(882)
											_this->_validate();
										}
									}
									HX_STACK_LINE(882)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(882)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(882)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(882)
											_this->_validate();
										}
									}
									HX_STACK_LINE(882)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(882)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)20)) && bool((_Function_3_2::Block(ret) == -0.5))))))){
							HX_STACK_LINE(882)
							{
								HX_STACK_LINE(882)
								ret->zpp_inner->x = (int)20;
								HX_STACK_LINE(882)
								ret->zpp_inner->y = -0.5;
								HX_STACK_LINE(882)
								{
								}
								HX_STACK_LINE(882)
								{
								}
							}
							HX_STACK_LINE(882)
							{
								HX_STACK_LINE(882)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(882)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(882)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(882)
						ret;
					}
					HX_STACK_LINE(882)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(882)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_237{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
				{
					HX_STACK_LINE(882)
					{
					}
					HX_STACK_LINE(882)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(882)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(882)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(882)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(882)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(882)
						ret->zpp_pool = null();
						HX_STACK_LINE(882)
						ret->zpp_disp = false;
						HX_STACK_LINE(882)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(882)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(882)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(882)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(882)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(882)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(882)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(882)
											ret1->next = null();
										}
										HX_STACK_LINE(882)
										ret1->weak = false;
									}
									HX_STACK_LINE(882)
									ret1->_immutable = immutable;
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										ret1->x = (int)19;
										HX_STACK_LINE(882)
										ret1->y = -0.5;
										HX_STACK_LINE(882)
										{
										}
										HX_STACK_LINE(882)
										{
										}
									}
									HX_STACK_LINE(882)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(882)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(882)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(882)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(882)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(882)
						{
							HX_STACK_LINE(882)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(882)
							if ((_this->_immutable)){
								HX_STACK_LINE(882)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(882)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(882)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(882)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(882)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(882)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(882)
											_this->_validate();
										}
									}
									HX_STACK_LINE(882)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",882);
								{
									HX_STACK_LINE(882)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(882)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(882)
									{
										HX_STACK_LINE(882)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(882)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(882)
											_this->_validate();
										}
									}
									HX_STACK_LINE(882)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(882)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)19)) && bool((_Function_3_2::Block(ret) == -0.5))))))){
							HX_STACK_LINE(882)
							{
								HX_STACK_LINE(882)
								ret->zpp_inner->x = (int)19;
								HX_STACK_LINE(882)
								ret->zpp_inner->y = -0.5;
								HX_STACK_LINE(882)
								{
								}
								HX_STACK_LINE(882)
								{
								}
							}
							HX_STACK_LINE(882)
							{
								HX_STACK_LINE(882)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(882)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(882)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(882)
						ret;
					}
					HX_STACK_LINE(882)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(882)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(881)
		::nape::shape::Polygon s47 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_231::Block()).Add(_Function_1_232::Block()).Add(_Function_1_233::Block()).Add(_Function_1_234::Block()).Add(_Function_1_235::Block()).Add(_Function_1_236::Block()).Add(_Function_1_237::Block())),mat10,filt10);		HX_STACK_VAR(s47,"s47");
		HX_STACK_LINE(886)
		{
			HX_STACK_LINE(886)
			{
				HX_STACK_LINE(886)
				s47->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(886)
				if (((((  (((s47->zpp_inner->body != null()))) ? ::nape::phys::Body(s47->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body7))){
					HX_STACK_LINE(886)
					if (((s47->zpp_inner->body != null()))){
						HX_STACK_LINE(886)
						((  (((s47->zpp_inner->body != null()))) ? ::nape::phys::Body(s47->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s47);
					}
					HX_STACK_LINE(886)
					if (((body7 != null()))){
						HX_STACK_LINE(886)
						::nape::shape::ShapeList _this = body7->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(886)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(886)
							_this->push(s47);
						}
						else{
							HX_STACK_LINE(886)
							_this->unshift(s47);
						}
					}
				}
			}
			HX_STACK_LINE(886)
			if (((s47->zpp_inner->body != null()))){
				HX_STACK_LINE(886)
				s47->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(886)
				Dynamic();
			}
		}
		HX_STACK_LINE(887)
		{
			HX_STACK_LINE(887)
			{
				HX_STACK_LINE(887)
				s47->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(887)
				s47->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(887)
				s47->zpp_inner->wake();
			}
			HX_STACK_LINE(887)
			s47->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(888)
		{
			HX_STACK_LINE(888)
			{
				HX_STACK_LINE(888)
				s47->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(888)
				s47->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(888)
				{
				}
				HX_STACK_LINE(888)
				s47->zpp_inner->wake();
			}
			HX_STACK_LINE(888)
			s47->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(889)
		{
			HX_STACK_LINE(889)
			{
				HX_STACK_LINE(889)
				if (((prop10 == null()))){
					HX_STACK_LINE(889)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(889)
				s47->zpp_inner->setFluid(prop10->zpp_inner);
			}
			HX_STACK_LINE(889)
			{
				HX_STACK_LINE(889)
				s47->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(889)
				if (((s47->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(889)
					s47->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(889)
				s47->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(890)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s47){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",890);
					{
						HX_STACK_LINE(890)
						if (((s47->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(890)
							s47->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(890)
						return s47->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(890)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s47);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(890)
			{
				HX_STACK_LINE(890)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(890)
				while(((_g < _g1->length))){
					HX_STACK_LINE(890)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(890)
					++(_g);
					HX_STACK_LINE(890)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(890)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(890)
						continue;
					}
					HX_STACK_LINE(890)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(890)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(890)
					{
						HX_STACK_LINE(890)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(890)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(890)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(890)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_238{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",893);
				{
					HX_STACK_LINE(893)
					{
					}
					HX_STACK_LINE(893)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(893)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(893)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(893)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(893)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(893)
						ret->zpp_pool = null();
						HX_STACK_LINE(893)
						ret->zpp_disp = false;
						HX_STACK_LINE(893)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(893)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(893)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",893);
								{
									HX_STACK_LINE(893)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(893)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(893)
									{
										HX_STACK_LINE(893)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(893)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(893)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(893)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(893)
											ret1->next = null();
										}
										HX_STACK_LINE(893)
										ret1->weak = false;
									}
									HX_STACK_LINE(893)
									ret1->_immutable = immutable;
									HX_STACK_LINE(893)
									{
										HX_STACK_LINE(893)
										ret1->x = 46.5;
										HX_STACK_LINE(893)
										ret1->y = (int)37;
										HX_STACK_LINE(893)
										{
										}
										HX_STACK_LINE(893)
										{
										}
									}
									HX_STACK_LINE(893)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(893)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(893)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(893)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(893)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(893)
						{
							HX_STACK_LINE(893)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(893)
							if ((_this->_immutable)){
								HX_STACK_LINE(893)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(893)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(893)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(893)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",893);
								{
									HX_STACK_LINE(893)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(893)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(893)
									{
										HX_STACK_LINE(893)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(893)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(893)
											_this->_validate();
										}
									}
									HX_STACK_LINE(893)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",893);
								{
									HX_STACK_LINE(893)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(893)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(893)
									{
										HX_STACK_LINE(893)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(893)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(893)
											_this->_validate();
										}
									}
									HX_STACK_LINE(893)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(893)
						if ((!(((bool((_Function_3_1::Block(ret) == 46.5)) && bool((_Function_3_2::Block(ret) == (int)37))))))){
							HX_STACK_LINE(893)
							{
								HX_STACK_LINE(893)
								ret->zpp_inner->x = 46.5;
								HX_STACK_LINE(893)
								ret->zpp_inner->y = (int)37;
								HX_STACK_LINE(893)
								{
								}
								HX_STACK_LINE(893)
								{
								}
							}
							HX_STACK_LINE(893)
							{
								HX_STACK_LINE(893)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(893)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(893)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(893)
						ret;
					}
					HX_STACK_LINE(893)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(893)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_239{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",893);
				{
					HX_STACK_LINE(893)
					{
					}
					HX_STACK_LINE(893)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(893)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(893)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(893)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(893)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(893)
						ret->zpp_pool = null();
						HX_STACK_LINE(893)
						ret->zpp_disp = false;
						HX_STACK_LINE(893)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(893)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(893)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",893);
								{
									HX_STACK_LINE(893)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(893)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(893)
									{
										HX_STACK_LINE(893)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(893)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(893)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(893)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(893)
											ret1->next = null();
										}
										HX_STACK_LINE(893)
										ret1->weak = false;
									}
									HX_STACK_LINE(893)
									ret1->_immutable = immutable;
									HX_STACK_LINE(893)
									{
										HX_STACK_LINE(893)
										ret1->x = 48.5;
										HX_STACK_LINE(893)
										ret1->y = (int)17;
										HX_STACK_LINE(893)
										{
										}
										HX_STACK_LINE(893)
										{
										}
									}
									HX_STACK_LINE(893)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(893)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(893)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(893)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(893)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(893)
						{
							HX_STACK_LINE(893)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(893)
							if ((_this->_immutable)){
								HX_STACK_LINE(893)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(893)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(893)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(893)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",893);
								{
									HX_STACK_LINE(893)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(893)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(893)
									{
										HX_STACK_LINE(893)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(893)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(893)
											_this->_validate();
										}
									}
									HX_STACK_LINE(893)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",893);
								{
									HX_STACK_LINE(893)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(893)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(893)
									{
										HX_STACK_LINE(893)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(893)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(893)
											_this->_validate();
										}
									}
									HX_STACK_LINE(893)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(893)
						if ((!(((bool((_Function_3_1::Block(ret) == 48.5)) && bool((_Function_3_2::Block(ret) == (int)17))))))){
							HX_STACK_LINE(893)
							{
								HX_STACK_LINE(893)
								ret->zpp_inner->x = 48.5;
								HX_STACK_LINE(893)
								ret->zpp_inner->y = (int)17;
								HX_STACK_LINE(893)
								{
								}
								HX_STACK_LINE(893)
								{
								}
							}
							HX_STACK_LINE(893)
							{
								HX_STACK_LINE(893)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(893)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(893)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(893)
						ret;
					}
					HX_STACK_LINE(893)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(893)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_240{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",893);
				{
					HX_STACK_LINE(893)
					{
					}
					HX_STACK_LINE(893)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(893)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(893)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(893)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(893)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(893)
						ret->zpp_pool = null();
						HX_STACK_LINE(893)
						ret->zpp_disp = false;
						HX_STACK_LINE(893)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(893)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(893)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",893);
								{
									HX_STACK_LINE(893)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(893)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(893)
									{
										HX_STACK_LINE(893)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(893)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(893)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(893)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(893)
											ret1->next = null();
										}
										HX_STACK_LINE(893)
										ret1->weak = false;
									}
									HX_STACK_LINE(893)
									ret1->_immutable = immutable;
									HX_STACK_LINE(893)
									{
										HX_STACK_LINE(893)
										ret1->x = 10.5;
										HX_STACK_LINE(893)
										ret1->y = (int)46;
										HX_STACK_LINE(893)
										{
										}
										HX_STACK_LINE(893)
										{
										}
									}
									HX_STACK_LINE(893)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(893)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(893)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(893)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(893)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(893)
						{
							HX_STACK_LINE(893)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(893)
							if ((_this->_immutable)){
								HX_STACK_LINE(893)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(893)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(893)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(893)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",893);
								{
									HX_STACK_LINE(893)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(893)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(893)
									{
										HX_STACK_LINE(893)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(893)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(893)
											_this->_validate();
										}
									}
									HX_STACK_LINE(893)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",893);
								{
									HX_STACK_LINE(893)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(893)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(893)
									{
										HX_STACK_LINE(893)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(893)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(893)
											_this->_validate();
										}
									}
									HX_STACK_LINE(893)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(893)
						if ((!(((bool((_Function_3_1::Block(ret) == 10.5)) && bool((_Function_3_2::Block(ret) == (int)46))))))){
							HX_STACK_LINE(893)
							{
								HX_STACK_LINE(893)
								ret->zpp_inner->x = 10.5;
								HX_STACK_LINE(893)
								ret->zpp_inner->y = (int)46;
								HX_STACK_LINE(893)
								{
								}
								HX_STACK_LINE(893)
								{
								}
							}
							HX_STACK_LINE(893)
							{
								HX_STACK_LINE(893)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(893)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(893)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(893)
						ret;
					}
					HX_STACK_LINE(893)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(893)
					return ret;
				}
				return null();
			}
		};
		struct _Function_1_241{
			inline static ::nape::geom::Vec2 Block( ){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",893);
				{
					HX_STACK_LINE(893)
					{
					}
					HX_STACK_LINE(893)
					::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(893)
					if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
						HX_STACK_LINE(893)
						ret = ::nape::geom::Vec2_obj::__new(null(),null());
					}
					else{
						HX_STACK_LINE(893)
						ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
						HX_STACK_LINE(893)
						::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
						HX_STACK_LINE(893)
						ret->zpp_pool = null();
						HX_STACK_LINE(893)
						ret->zpp_disp = false;
						HX_STACK_LINE(893)
						if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
							HX_STACK_LINE(893)
							::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
						}
					}
					HX_STACK_LINE(893)
					if (((ret->zpp_inner == null()))){
						struct _Function_3_1{
							inline static ::zpp_nape::geom::ZPP_Vec2 Block( ){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",893);
								{
									HX_STACK_LINE(893)
									bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
									HX_STACK_LINE(893)
									::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(893)
									{
										HX_STACK_LINE(893)
										if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
											HX_STACK_LINE(893)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
										}
										else{
											HX_STACK_LINE(893)
											ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
											HX_STACK_LINE(893)
											::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(893)
											ret1->next = null();
										}
										HX_STACK_LINE(893)
										ret1->weak = false;
									}
									HX_STACK_LINE(893)
									ret1->_immutable = immutable;
									HX_STACK_LINE(893)
									{
										HX_STACK_LINE(893)
										ret1->x = (int)30;
										HX_STACK_LINE(893)
										ret1->y = 49.5;
										HX_STACK_LINE(893)
										{
										}
										HX_STACK_LINE(893)
										{
										}
									}
									HX_STACK_LINE(893)
									return ret1;
								}
								return null();
							}
						};
						HX_STACK_LINE(893)
						ret->zpp_inner = _Function_3_1::Block();
						HX_STACK_LINE(893)
						ret->zpp_inner->outer = ret;
					}
					else{
						HX_STACK_LINE(893)
						if (((bool((ret != null())) && bool(ret->zpp_disp)))){
							HX_STACK_LINE(893)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(893)
						{
							HX_STACK_LINE(893)
							::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(893)
							if ((_this->_immutable)){
								HX_STACK_LINE(893)
								hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
							}
							HX_STACK_LINE(893)
							if (((_this->_isimmutable_dyn() != null()))){
								HX_STACK_LINE(893)
								_this->_isimmutable();
							}
						}
						HX_STACK_LINE(893)
						{
						}
						struct _Function_3_1{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",893);
								{
									HX_STACK_LINE(893)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(893)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(893)
									{
										HX_STACK_LINE(893)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(893)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(893)
											_this->_validate();
										}
									}
									HX_STACK_LINE(893)
									return ret->zpp_inner->x;
								}
								return null();
							}
						};
						struct _Function_3_2{
							inline static Float Block( ::nape::geom::Vec2 &ret){
								HX_STACK_PUSH("*::closure","PhysicsData.hx",893);
								{
									HX_STACK_LINE(893)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(893)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(893)
									{
										HX_STACK_LINE(893)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(893)
										if (((_this->_validate_dyn() != null()))){
											HX_STACK_LINE(893)
											_this->_validate();
										}
									}
									HX_STACK_LINE(893)
									return ret->zpp_inner->y;
								}
								return null();
							}
						};
						HX_STACK_LINE(893)
						if ((!(((bool((_Function_3_1::Block(ret) == (int)30)) && bool((_Function_3_2::Block(ret) == 49.5))))))){
							HX_STACK_LINE(893)
							{
								HX_STACK_LINE(893)
								ret->zpp_inner->x = (int)30;
								HX_STACK_LINE(893)
								ret->zpp_inner->y = 49.5;
								HX_STACK_LINE(893)
								{
								}
								HX_STACK_LINE(893)
								{
								}
							}
							HX_STACK_LINE(893)
							{
								HX_STACK_LINE(893)
								::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(893)
								if (((_this->_invalidate_dyn() != null()))){
									HX_STACK_LINE(893)
									_this->_invalidate(_this);
								}
							}
						}
						HX_STACK_LINE(893)
						ret;
					}
					HX_STACK_LINE(893)
					ret->zpp_inner->weak = true;
					HX_STACK_LINE(893)
					return ret;
				}
				return null();
			}
		};
		HX_STACK_LINE(892)
		::nape::shape::Polygon s48 = ::nape::shape::Polygon_obj::__new(Dynamic( Array_obj<Dynamic>::__new().Add(_Function_1_238::Block()).Add(_Function_1_239::Block()).Add(_Function_1_240::Block()).Add(_Function_1_241::Block())),mat10,filt10);		HX_STACK_VAR(s48,"s48");
		HX_STACK_LINE(897)
		{
			HX_STACK_LINE(897)
			{
				HX_STACK_LINE(897)
				s48->zpp_inner->immutable_midstep(HX_CSTRING("Shape::body"));
				HX_STACK_LINE(897)
				if (((((  (((s48->zpp_inner->body != null()))) ? ::nape::phys::Body(s48->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body7))){
					HX_STACK_LINE(897)
					if (((s48->zpp_inner->body != null()))){
						HX_STACK_LINE(897)
						((  (((s48->zpp_inner->body != null()))) ? ::nape::phys::Body(s48->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->wrap_shapes->remove(s48);
					}
					HX_STACK_LINE(897)
					if (((body7 != null()))){
						HX_STACK_LINE(897)
						::nape::shape::ShapeList _this = body7->zpp_inner->wrap_shapes;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(897)
						if ((_this->zpp_inner->reverse_flag)){
							HX_STACK_LINE(897)
							_this->push(s48);
						}
						else{
							HX_STACK_LINE(897)
							_this->unshift(s48);
						}
					}
				}
			}
			HX_STACK_LINE(897)
			if (((s48->zpp_inner->body != null()))){
				HX_STACK_LINE(897)
				s48->zpp_inner->body->outer;
			}
			else{
				HX_STACK_LINE(897)
				Dynamic();
			}
		}
		HX_STACK_LINE(898)
		{
			HX_STACK_LINE(898)
			{
				HX_STACK_LINE(898)
				s48->zpp_inner->immutable_midstep(HX_CSTRING("Shape::sensorEnabled"));
				HX_STACK_LINE(898)
				s48->zpp_inner->sensorEnabled = false;
				HX_STACK_LINE(898)
				s48->zpp_inner->wake();
			}
			HX_STACK_LINE(898)
			s48->zpp_inner->sensorEnabled;
		}
		HX_STACK_LINE(899)
		{
			HX_STACK_LINE(899)
			{
				HX_STACK_LINE(899)
				s48->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidEnabled"));
				HX_STACK_LINE(899)
				s48->zpp_inner->fluidEnabled = false;
				HX_STACK_LINE(899)
				{
				}
				HX_STACK_LINE(899)
				s48->zpp_inner->wake();
			}
			HX_STACK_LINE(899)
			s48->zpp_inner->fluidEnabled;
		}
		HX_STACK_LINE(900)
		{
			HX_STACK_LINE(900)
			{
				HX_STACK_LINE(900)
				if (((prop10 == null()))){
					HX_STACK_LINE(900)
					hx::Throw (HX_CSTRING("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false"));
				}
				HX_STACK_LINE(900)
				s48->zpp_inner->setFluid(prop10->zpp_inner);
			}
			HX_STACK_LINE(900)
			{
				HX_STACK_LINE(900)
				s48->zpp_inner->immutable_midstep(HX_CSTRING("Shape::fluidProperties"));
				HX_STACK_LINE(900)
				if (((s48->zpp_inner->fluidProperties == null()))){
					HX_STACK_LINE(900)
					s48->zpp_inner->setFluid(::nape::phys::FluidProperties_obj::__new(null(),null())->zpp_inner);
				}
				HX_STACK_LINE(900)
				s48->zpp_inner->fluidProperties->wrapper();
			}
		}
		HX_STACK_LINE(901)
		{
			struct _Function_2_1{
				inline static ::nape::callbacks::CbTypeList Block( ::nape::shape::Polygon &s48){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",901);
					{
						HX_STACK_LINE(901)
						if (((s48->zpp_inner_i->wrap_cbTypes == null()))){
							HX_STACK_LINE(901)
							s48->zpp_inner_i->setupcbTypes();
						}
						HX_STACK_LINE(901)
						return s48->zpp_inner_i->wrap_cbTypes;
					}
					return null();
				}
			};
			HX_STACK_LINE(901)
			::nape::callbacks::CbTypeList outtypes = _Function_2_1::Block(s48);		HX_STACK_VAR(outtypes,"outtypes");
			HX_STACK_LINE(901)
			{
				HX_STACK_LINE(901)
				int _g = (int)0;		HX_STACK_VAR(_g,"_g");
				Array< ::String > _g1 = HX_CSTRING("").split(HX_CSTRING(","));		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(901)
				while(((_g < _g1->length))){
					HX_STACK_LINE(901)
					::String namex = _g1->__get(_g);		HX_STACK_VAR(namex,"namex");
					HX_STACK_LINE(901)
					++(_g);
					HX_STACK_LINE(901)
					::String name = ::StringTools_obj::trim(namex);		HX_STACK_VAR(name,"name");
					HX_STACK_LINE(901)
					if (((name == HX_CSTRING("")))){
						HX_STACK_LINE(901)
						continue;
					}
					HX_STACK_LINE(901)
					if ((!(::PhysicsData_obj::types->exists(name)))){
						HX_STACK_LINE(901)
						hx::Throw (((HX_CSTRING("Error: CbType with name '") + name) + HX_CSTRING("' has not been registered")));
					}
					HX_STACK_LINE(901)
					{
						HX_STACK_LINE(901)
						::nape::callbacks::CbType obj = ::PhysicsData_obj::types->get(name);		HX_STACK_VAR(obj,"obj");
						HX_STACK_LINE(901)
						if ((outtypes->zpp_inner->reverse_flag)){
							HX_STACK_LINE(901)
							outtypes->push(obj);
						}
						else{
							HX_STACK_LINE(901)
							outtypes->unshift(obj);
						}
					}
				}
			}
		}
		struct _Function_1_242{
			inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body7){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",906);
				{
					struct _Function_2_1{
						inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body7){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",906);
							{
								HX_STACK_LINE(906)
								if ((body7->zpp_inner->world)){
									HX_STACK_LINE(906)
									hx::Throw ((HX_CSTRING("Error: Space::world has no ") + HX_CSTRING("localCOM")));
								}
								HX_STACK_LINE(906)
								if (((body7->zpp_inner->wrap_localCOM == null()))){
									struct _Function_4_1{
										inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body7){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",906);
											{
												HX_STACK_LINE(906)
												Float x = body7->zpp_inner->localCOMx;		HX_STACK_VAR(x,"x");
												Float y = body7->zpp_inner->localCOMy;		HX_STACK_VAR(y,"y");
												bool weak = false;		HX_STACK_VAR(weak,"weak");
												HX_STACK_LINE(906)
												if (((bool((x != x)) || bool((y != y))))){
													HX_STACK_LINE(906)
													hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
												}
												HX_STACK_LINE(906)
												::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
												HX_STACK_LINE(906)
												if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
													HX_STACK_LINE(906)
													ret = ::nape::geom::Vec2_obj::__new(null(),null());
												}
												else{
													HX_STACK_LINE(906)
													ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
													HX_STACK_LINE(906)
													::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
													HX_STACK_LINE(906)
													ret->zpp_pool = null();
													HX_STACK_LINE(906)
													ret->zpp_disp = false;
													HX_STACK_LINE(906)
													if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
														HX_STACK_LINE(906)
														::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
													}
												}
												HX_STACK_LINE(906)
												if (((ret->zpp_inner == null()))){
													struct _Function_6_1{
														inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",906);
															{
																HX_STACK_LINE(906)
																bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
																HX_STACK_LINE(906)
																::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(906)
																{
																	HX_STACK_LINE(906)
																	if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
																		HX_STACK_LINE(906)
																		ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
																	}
																	else{
																		HX_STACK_LINE(906)
																		ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
																		HX_STACK_LINE(906)
																		::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
																		HX_STACK_LINE(906)
																		ret1->next = null();
																	}
																	HX_STACK_LINE(906)
																	ret1->weak = false;
																}
																HX_STACK_LINE(906)
																ret1->_immutable = immutable;
																HX_STACK_LINE(906)
																{
																	HX_STACK_LINE(906)
																	ret1->x = x;
																	HX_STACK_LINE(906)
																	ret1->y = y;
																	HX_STACK_LINE(906)
																	{
																	}
																	HX_STACK_LINE(906)
																	{
																	}
																}
																HX_STACK_LINE(906)
																return ret1;
															}
															return null();
														}
													};
													HX_STACK_LINE(906)
													ret->zpp_inner = _Function_6_1::Block(x,y);
													HX_STACK_LINE(906)
													ret->zpp_inner->outer = ret;
												}
												else{
													HX_STACK_LINE(906)
													if (((bool((ret != null())) && bool(ret->zpp_disp)))){
														HX_STACK_LINE(906)
														hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
													}
													HX_STACK_LINE(906)
													{
														HX_STACK_LINE(906)
														::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(906)
														if ((_this->_immutable)){
															HX_STACK_LINE(906)
															hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
														}
														HX_STACK_LINE(906)
														if (((_this->_isimmutable_dyn() != null()))){
															HX_STACK_LINE(906)
															_this->_isimmutable();
														}
													}
													HX_STACK_LINE(906)
													if (((bool((x != x)) || bool((y != y))))){
														HX_STACK_LINE(906)
														hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
													}
													struct _Function_6_1{
														inline static Float Block( ::nape::geom::Vec2 &ret){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",906);
															{
																HX_STACK_LINE(906)
																if (((bool((ret != null())) && bool(ret->zpp_disp)))){
																	HX_STACK_LINE(906)
																	hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
																}
																HX_STACK_LINE(906)
																{
																	HX_STACK_LINE(906)
																	::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(906)
																	if (((_this->_validate_dyn() != null()))){
																		HX_STACK_LINE(906)
																		_this->_validate();
																	}
																}
																HX_STACK_LINE(906)
																return ret->zpp_inner->x;
															}
															return null();
														}
													};
													struct _Function_6_2{
														inline static Float Block( ::nape::geom::Vec2 &ret){
															HX_STACK_PUSH("*::closure","PhysicsData.hx",906);
															{
																HX_STACK_LINE(906)
																if (((bool((ret != null())) && bool(ret->zpp_disp)))){
																	HX_STACK_LINE(906)
																	hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
																}
																HX_STACK_LINE(906)
																{
																	HX_STACK_LINE(906)
																	::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(906)
																	if (((_this->_validate_dyn() != null()))){
																		HX_STACK_LINE(906)
																		_this->_validate();
																	}
																}
																HX_STACK_LINE(906)
																return ret->zpp_inner->y;
															}
															return null();
														}
													};
													HX_STACK_LINE(906)
													if ((!(((bool((_Function_6_1::Block(ret) == x)) && bool((_Function_6_2::Block(ret) == y))))))){
														HX_STACK_LINE(906)
														{
															HX_STACK_LINE(906)
															ret->zpp_inner->x = x;
															HX_STACK_LINE(906)
															ret->zpp_inner->y = y;
															HX_STACK_LINE(906)
															{
															}
															HX_STACK_LINE(906)
															{
															}
														}
														HX_STACK_LINE(906)
														{
															HX_STACK_LINE(906)
															::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(906)
															if (((_this->_invalidate_dyn() != null()))){
																HX_STACK_LINE(906)
																_this->_invalidate(_this);
															}
														}
													}
													HX_STACK_LINE(906)
													ret;
												}
												HX_STACK_LINE(906)
												ret->zpp_inner->weak = weak;
												HX_STACK_LINE(906)
												return ret;
											}
											return null();
										}
									};
									HX_STACK_LINE(906)
									body7->zpp_inner->wrap_localCOM = _Function_4_1::Block(body7);
									HX_STACK_LINE(906)
									body7->zpp_inner->wrap_localCOM->zpp_inner->_inuse = true;
									HX_STACK_LINE(906)
									body7->zpp_inner->wrap_localCOM->zpp_inner->_immutable = true;
									HX_STACK_LINE(906)
									body7->zpp_inner->wrap_localCOM->zpp_inner->_validate = body7->zpp_inner->getlocalCOM_dyn();
								}
								HX_STACK_LINE(906)
								return body7->zpp_inner->wrap_localCOM;
							}
							return null();
						}
					};
					HX_STACK_LINE(906)
					::nape::geom::Vec2 _this = _Function_2_1::Block(body7);		HX_STACK_VAR(_this,"_this");
					bool weak = false;		HX_STACK_VAR(weak,"weak");
					HX_STACK_LINE(906)
					if (((bool((_this != null())) && bool(_this->zpp_disp)))){
						HX_STACK_LINE(906)
						hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
					}
					struct _Function_2_2{
						inline static ::nape::geom::Vec2 Block( ::nape::geom::Vec2 &_this,bool &weak){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",906);
							{
								struct _Function_3_1{
									inline static Float Block( ::nape::geom::Vec2 &_this){
										HX_STACK_PUSH("*::closure","PhysicsData.hx",906);
										{
											HX_STACK_LINE(906)
											if ((_this->zpp_disp)){
												HX_STACK_LINE(906)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(906)
											{
												HX_STACK_LINE(906)
												::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
												HX_STACK_LINE(906)
												if (((_this1->_validate_dyn() != null()))){
													HX_STACK_LINE(906)
													_this1->_validate();
												}
											}
											HX_STACK_LINE(906)
											return _this->zpp_inner->x;
										}
										return null();
									}
								};
								struct _Function_3_2{
									inline static Float Block( ::nape::geom::Vec2 &_this){
										HX_STACK_PUSH("*::closure","PhysicsData.hx",906);
										{
											HX_STACK_LINE(906)
											if ((_this->zpp_disp)){
												HX_STACK_LINE(906)
												hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
											}
											HX_STACK_LINE(906)
											{
												HX_STACK_LINE(906)
												::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
												HX_STACK_LINE(906)
												if (((_this1->_validate_dyn() != null()))){
													HX_STACK_LINE(906)
													_this1->_validate();
												}
											}
											HX_STACK_LINE(906)
											return _this->zpp_inner->y;
										}
										return null();
									}
								};
								HX_STACK_LINE(906)
								Float x = _Function_3_1::Block(_this);		HX_STACK_VAR(x,"x");
								Float y = _Function_3_2::Block(_this);		HX_STACK_VAR(y,"y");
								HX_STACK_LINE(906)
								if (((bool((x != x)) || bool((y != y))))){
									HX_STACK_LINE(906)
									hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
								}
								HX_STACK_LINE(906)
								::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(906)
								if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
									HX_STACK_LINE(906)
									ret = ::nape::geom::Vec2_obj::__new(null(),null());
								}
								else{
									HX_STACK_LINE(906)
									ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
									HX_STACK_LINE(906)
									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
									HX_STACK_LINE(906)
									ret->zpp_pool = null();
									HX_STACK_LINE(906)
									ret->zpp_disp = false;
									HX_STACK_LINE(906)
									if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
										HX_STACK_LINE(906)
										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
									}
								}
								HX_STACK_LINE(906)
								if (((ret->zpp_inner == null()))){
									struct _Function_4_1{
										inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",906);
											{
												HX_STACK_LINE(906)
												bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
												HX_STACK_LINE(906)
												::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(906)
												{
													HX_STACK_LINE(906)
													if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
														HX_STACK_LINE(906)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
													}
													else{
														HX_STACK_LINE(906)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
														HX_STACK_LINE(906)
														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(906)
														ret1->next = null();
													}
													HX_STACK_LINE(906)
													ret1->weak = false;
												}
												HX_STACK_LINE(906)
												ret1->_immutable = immutable;
												HX_STACK_LINE(906)
												{
													HX_STACK_LINE(906)
													ret1->x = x;
													HX_STACK_LINE(906)
													ret1->y = y;
													HX_STACK_LINE(906)
													{
													}
													HX_STACK_LINE(906)
													{
													}
												}
												HX_STACK_LINE(906)
												return ret1;
											}
											return null();
										}
									};
									HX_STACK_LINE(906)
									ret->zpp_inner = _Function_4_1::Block(x,y);
									HX_STACK_LINE(906)
									ret->zpp_inner->outer = ret;
								}
								else{
									HX_STACK_LINE(906)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(906)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(906)
									{
										HX_STACK_LINE(906)
										::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
										HX_STACK_LINE(906)
										if ((_this1->_immutable)){
											HX_STACK_LINE(906)
											hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
										}
										HX_STACK_LINE(906)
										if (((_this1->_isimmutable_dyn() != null()))){
											HX_STACK_LINE(906)
											_this1->_isimmutable();
										}
									}
									HX_STACK_LINE(906)
									if (((bool((x != x)) || bool((y != y))))){
										HX_STACK_LINE(906)
										hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
									}
									struct _Function_4_1{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",906);
											{
												HX_STACK_LINE(906)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(906)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(906)
												{
													HX_STACK_LINE(906)
													::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(906)
													if (((_this1->_validate_dyn() != null()))){
														HX_STACK_LINE(906)
														_this1->_validate();
													}
												}
												HX_STACK_LINE(906)
												return ret->zpp_inner->x;
											}
											return null();
										}
									};
									struct _Function_4_2{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",906);
											{
												HX_STACK_LINE(906)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(906)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(906)
												{
													HX_STACK_LINE(906)
													::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(906)
													if (((_this1->_validate_dyn() != null()))){
														HX_STACK_LINE(906)
														_this1->_validate();
													}
												}
												HX_STACK_LINE(906)
												return ret->zpp_inner->y;
											}
											return null();
										}
									};
									HX_STACK_LINE(906)
									if ((!(((bool((_Function_4_1::Block(ret) == x)) && bool((_Function_4_2::Block(ret) == y))))))){
										HX_STACK_LINE(906)
										{
											HX_STACK_LINE(906)
											ret->zpp_inner->x = x;
											HX_STACK_LINE(906)
											ret->zpp_inner->y = y;
											HX_STACK_LINE(906)
											{
											}
											HX_STACK_LINE(906)
											{
											}
										}
										HX_STACK_LINE(906)
										{
											HX_STACK_LINE(906)
											::zpp_nape::geom::ZPP_Vec2 _this1 = ret->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
											HX_STACK_LINE(906)
											if (((_this1->_invalidate_dyn() != null()))){
												HX_STACK_LINE(906)
												_this1->_invalidate(_this1);
											}
										}
									}
									HX_STACK_LINE(906)
									ret;
								}
								HX_STACK_LINE(906)
								ret->zpp_inner->weak = weak;
								HX_STACK_LINE(906)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(906)
					return _Function_2_2::Block(_this,weak);
				}
				return null();
			}
		};
		HX_STACK_LINE(906)
		::nape::geom::Vec2 anchor7 = _Function_1_242::Block(body7);		HX_STACK_VAR(anchor7,"anchor7");
		struct _Function_1_243{
			inline static ::nape::geom::Vec2 Block( ::nape::geom::Vec2 &anchor7){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",907);
				{
					struct _Function_2_1{
						inline static Float Block( ::nape::geom::Vec2 &anchor7){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",907);
							{
								HX_STACK_LINE(907)
								if (((bool((anchor7 != null())) && bool(anchor7->zpp_disp)))){
									HX_STACK_LINE(907)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(907)
								{
									HX_STACK_LINE(907)
									::zpp_nape::geom::ZPP_Vec2 _this = anchor7->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(907)
									if (((_this->_validate_dyn() != null()))){
										HX_STACK_LINE(907)
										_this->_validate();
									}
								}
								HX_STACK_LINE(907)
								return anchor7->zpp_inner->x;
							}
							return null();
						}
					};
					struct _Function_2_2{
						inline static Float Block( ::nape::geom::Vec2 &anchor7){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",907);
							{
								HX_STACK_LINE(907)
								if (((bool((anchor7 != null())) && bool(anchor7->zpp_disp)))){
									HX_STACK_LINE(907)
									hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
								}
								HX_STACK_LINE(907)
								{
									HX_STACK_LINE(907)
									::zpp_nape::geom::ZPP_Vec2 _this = anchor7->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(907)
									if (((_this->_validate_dyn() != null()))){
										HX_STACK_LINE(907)
										_this->_validate();
									}
								}
								HX_STACK_LINE(907)
								return anchor7->zpp_inner->y;
							}
							return null();
						}
					};
					HX_STACK_LINE(907)
					Float x = -(_Function_2_1::Block(anchor7));		HX_STACK_VAR(x,"x");
					Float y = -(_Function_2_2::Block(anchor7));		HX_STACK_VAR(y,"y");
					struct _Function_2_3{
						inline static ::nape::geom::Vec2 Block( Float &x,Float &y){
							HX_STACK_PUSH("*::closure","PhysicsData.hx",907);
							{
								HX_STACK_LINE(907)
								if (((bool((x != x)) || bool((y != y))))){
									HX_STACK_LINE(907)
									hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
								}
								HX_STACK_LINE(907)
								::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(907)
								if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
									HX_STACK_LINE(907)
									ret = ::nape::geom::Vec2_obj::__new(null(),null());
								}
								else{
									HX_STACK_LINE(907)
									ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
									HX_STACK_LINE(907)
									::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
									HX_STACK_LINE(907)
									ret->zpp_pool = null();
									HX_STACK_LINE(907)
									ret->zpp_disp = false;
									HX_STACK_LINE(907)
									if (((ret == ::zpp_nape::util::ZPP_PubPool_obj::nextVec2))){
										HX_STACK_LINE(907)
										::zpp_nape::util::ZPP_PubPool_obj::nextVec2 = null();
									}
								}
								HX_STACK_LINE(907)
								if (((ret->zpp_inner == null()))){
									struct _Function_4_1{
										inline static ::zpp_nape::geom::ZPP_Vec2 Block( Float &x,Float &y){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",907);
											{
												HX_STACK_LINE(907)
												bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
												HX_STACK_LINE(907)
												::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(907)
												{
													HX_STACK_LINE(907)
													if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
														HX_STACK_LINE(907)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();
													}
													else{
														HX_STACK_LINE(907)
														ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
														HX_STACK_LINE(907)
														::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(907)
														ret1->next = null();
													}
													HX_STACK_LINE(907)
													ret1->weak = false;
												}
												HX_STACK_LINE(907)
												ret1->_immutable = immutable;
												HX_STACK_LINE(907)
												{
													HX_STACK_LINE(907)
													ret1->x = x;
													HX_STACK_LINE(907)
													ret1->y = y;
													HX_STACK_LINE(907)
													{
													}
													HX_STACK_LINE(907)
													{
													}
												}
												HX_STACK_LINE(907)
												return ret1;
											}
											return null();
										}
									};
									HX_STACK_LINE(907)
									ret->zpp_inner = _Function_4_1::Block(x,y);
									HX_STACK_LINE(907)
									ret->zpp_inner->outer = ret;
								}
								else{
									HX_STACK_LINE(907)
									if (((bool((ret != null())) && bool(ret->zpp_disp)))){
										HX_STACK_LINE(907)
										hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
									}
									HX_STACK_LINE(907)
									{
										HX_STACK_LINE(907)
										::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(907)
										if ((_this->_immutable)){
											HX_STACK_LINE(907)
											hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
										}
										HX_STACK_LINE(907)
										if (((_this->_isimmutable_dyn() != null()))){
											HX_STACK_LINE(907)
											_this->_isimmutable();
										}
									}
									HX_STACK_LINE(907)
									if (((bool((x != x)) || bool((y != y))))){
										HX_STACK_LINE(907)
										hx::Throw (HX_CSTRING("Error: Vec2 components cannot be NaN"));
									}
									struct _Function_4_1{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",907);
											{
												HX_STACK_LINE(907)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(907)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(907)
												{
													HX_STACK_LINE(907)
													::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(907)
													if (((_this->_validate_dyn() != null()))){
														HX_STACK_LINE(907)
														_this->_validate();
													}
												}
												HX_STACK_LINE(907)
												return ret->zpp_inner->x;
											}
											return null();
										}
									};
									struct _Function_4_2{
										inline static Float Block( ::nape::geom::Vec2 &ret){
											HX_STACK_PUSH("*::closure","PhysicsData.hx",907);
											{
												HX_STACK_LINE(907)
												if (((bool((ret != null())) && bool(ret->zpp_disp)))){
													HX_STACK_LINE(907)
													hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
												}
												HX_STACK_LINE(907)
												{
													HX_STACK_LINE(907)
													::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(907)
													if (((_this->_validate_dyn() != null()))){
														HX_STACK_LINE(907)
														_this->_validate();
													}
												}
												HX_STACK_LINE(907)
												return ret->zpp_inner->y;
											}
											return null();
										}
									};
									HX_STACK_LINE(907)
									if ((!(((bool((_Function_4_1::Block(ret) == x)) && bool((_Function_4_2::Block(ret) == y))))))){
										HX_STACK_LINE(907)
										{
											HX_STACK_LINE(907)
											ret->zpp_inner->x = x;
											HX_STACK_LINE(907)
											ret->zpp_inner->y = y;
											HX_STACK_LINE(907)
											{
											}
											HX_STACK_LINE(907)
											{
											}
										}
										HX_STACK_LINE(907)
										{
											HX_STACK_LINE(907)
											::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(907)
											if (((_this->_invalidate_dyn() != null()))){
												HX_STACK_LINE(907)
												_this->_invalidate(_this);
											}
										}
									}
									HX_STACK_LINE(907)
									ret;
								}
								HX_STACK_LINE(907)
								ret->zpp_inner->weak = true;
								HX_STACK_LINE(907)
								return ret;
							}
							return null();
						}
					};
					HX_STACK_LINE(907)
					return _Function_2_3::Block(x,y);
				}
				return null();
			}
		};
		HX_STACK_LINE(907)
		body7->translateShapes(_Function_1_243::Block(anchor7));
		HX_STACK_LINE(908)
		{
			struct _Function_2_1{
				inline static ::nape::geom::Vec2 Block( ::nape::phys::Body &body7){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",908);
					{
						HX_STACK_LINE(908)
						if (((body7->zpp_inner->wrap_pos == null()))){
							HX_STACK_LINE(908)
							body7->zpp_inner->setupPosition();
						}
						HX_STACK_LINE(908)
						return body7->zpp_inner->wrap_pos;
					}
					return null();
				}
			};
			HX_STACK_LINE(908)
			::nape::geom::Vec2 _this = _Function_2_1::Block(body7);		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(908)
			if (((bool((_this != null())) && bool(_this->zpp_disp)))){
				HX_STACK_LINE(908)
				hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
			}
			HX_STACK_LINE(908)
			{
				HX_STACK_LINE(908)
				::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
				HX_STACK_LINE(908)
				if ((_this1->_immutable)){
					HX_STACK_LINE(908)
					hx::Throw (HX_CSTRING("Error: Vec2 is immutable"));
				}
				HX_STACK_LINE(908)
				if (((_this1->_isimmutable_dyn() != null()))){
					HX_STACK_LINE(908)
					_this1->_isimmutable();
				}
			}
			HX_STACK_LINE(908)
			{
			}
			struct _Function_2_2{
				inline static Float Block( ::nape::geom::Vec2 &_this){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",908);
					{
						HX_STACK_LINE(908)
						if (((bool((_this != null())) && bool(_this->zpp_disp)))){
							HX_STACK_LINE(908)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(908)
						{
							HX_STACK_LINE(908)
							::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(908)
							if (((_this1->_validate_dyn() != null()))){
								HX_STACK_LINE(908)
								_this1->_validate();
							}
						}
						HX_STACK_LINE(908)
						return _this->zpp_inner->x;
					}
					return null();
				}
			};
			struct _Function_2_3{
				inline static Float Block( ::nape::geom::Vec2 &_this){
					HX_STACK_PUSH("*::closure","PhysicsData.hx",908);
					{
						HX_STACK_LINE(908)
						if (((bool((_this != null())) && bool(_this->zpp_disp)))){
							HX_STACK_LINE(908)
							hx::Throw (((HX_CSTRING("Error: ") + HX_CSTRING("Vec2")) + HX_CSTRING(" has been disposed and cannot be used!")));
						}
						HX_STACK_LINE(908)
						{
							HX_STACK_LINE(908)
							::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(908)
							if (((_this1->_validate_dyn() != null()))){
								HX_STACK_LINE(908)
								_this1->_validate();
							}
						}
						HX_STACK_LINE(908)
						return _this->zpp_inner->y;
					}
					return null();
				}
			};
			HX_STACK_LINE(908)
			if ((!(((bool((_Function_2_2::Block(_this) == (int)0)) && bool((_Function_2_3::Block(_this) == (int)0))))))){
				HX_STACK_LINE(908)
				{
					HX_STACK_LINE(908)
					_this->zpp_inner->x = (int)0;
					HX_STACK_LINE(908)
					_this->zpp_inner->y = (int)0;
					HX_STACK_LINE(908)
					{
					}
					HX_STACK_LINE(908)
					{
					}
				}
				HX_STACK_LINE(908)
				{
					HX_STACK_LINE(908)
					::zpp_nape::geom::ZPP_Vec2 _this1 = _this->zpp_inner;		HX_STACK_VAR(_this1,"_this1");
					HX_STACK_LINE(908)
					if (((_this1->_invalidate_dyn() != null()))){
						HX_STACK_LINE(908)
						_this1->_invalidate(_this1);
					}
				}
			}
			HX_STACK_LINE(908)
			_this;
		}
		struct _Function_1_244{
			inline static Dynamic Block( ::nape::phys::Body &body7,::nape::geom::Vec2 &anchor7){
				HX_STACK_PUSH("*::closure","PhysicsData.hx",910);
				{
					hx::Anon __result = hx::Anon_obj::Create();
					__result->Add(HX_CSTRING("body") , body7,false);
					__result->Add(HX_CSTRING("anchor") , anchor7,false);
					return __result;
				}
				return null();
			}
		};
		HX_STACK_LINE(910)
		::PhysicsData_obj::bodies->set(HX_CSTRING("tennisbal"),_Function_1_244::Block(body7,anchor7));
	}
return null();
}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PhysicsData_obj,init,(void))


PhysicsData_obj::PhysicsData_obj()
{
}

void PhysicsData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PhysicsData);
	HX_MARK_END_CLASS();
}

void PhysicsData_obj::__Visit(HX_VISIT_PARAMS)
{
}

Dynamic PhysicsData_obj::__Field(const ::String &inName,bool inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return init_dyn(); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { return types; }
		if (HX_FIELD_EQ(inName,"fprop") ) { return fprop_dyn(); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bodies") ) { return bodies; }
		if (HX_FIELD_EQ(inName,"fprops") ) { return fprops; }
		if (HX_FIELD_EQ(inName,"filter") ) { return filter_dyn(); }
		if (HX_FIELD_EQ(inName,"cbtype") ) { return cbtype_dyn(); }
		if (HX_FIELD_EQ(inName,"lookup") ) { return lookup_dyn(); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"filters") ) { return filters; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"material") ) { return material_dyn(); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"materials") ) { return materials; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"createBody") ) { return createBody_dyn(); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"registerFilter") ) { return registerFilter_dyn(); }
		if (HX_FIELD_EQ(inName,"registerCbType") ) { return registerCbType_dyn(); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"graphicsPosition") ) { return graphicsPosition_dyn(); }
		if (HX_FIELD_EQ(inName,"registerMaterial") ) { return registerMaterial_dyn(); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"flashGraphicsUpdate") ) { return flashGraphicsUpdate_dyn(); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"registerFluidProperties") ) { return registerFluidProperties_dyn(); }
	}
	return super::__Field(inName,inCallProp);
}

Dynamic PhysicsData_obj::__SetField(const ::String &inName,const Dynamic &inValue,bool inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { types=inValue.Cast< ::Hash >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bodies") ) { bodies=inValue.Cast< ::Hash >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fprops") ) { fprops=inValue.Cast< ::Hash >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"filters") ) { filters=inValue.Cast< ::Hash >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"materials") ) { materials=inValue.Cast< ::Hash >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PhysicsData_obj::__GetFields(Array< ::String> &outFields)
{
	super::__GetFields(outFields);
};

static ::String sStaticFields[] = {
	HX_CSTRING("graphicsPosition"),
	HX_CSTRING("flashGraphicsUpdate"),
	HX_CSTRING("createBody"),
	HX_CSTRING("registerMaterial"),
	HX_CSTRING("registerFilter"),
	HX_CSTRING("registerFluidProperties"),
	HX_CSTRING("registerCbType"),
	HX_CSTRING("bodies"),
	HX_CSTRING("materials"),
	HX_CSTRING("filters"),
	HX_CSTRING("fprops"),
	HX_CSTRING("types"),
	HX_CSTRING("material"),
	HX_CSTRING("filter"),
	HX_CSTRING("fprop"),
	HX_CSTRING("cbtype"),
	HX_CSTRING("lookup"),
	HX_CSTRING("init"),
	String(null()) };

static ::String sMemberFields[] = {
	String(null()) };

static void sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PhysicsData_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(PhysicsData_obj::bodies,"bodies");
	HX_MARK_MEMBER_NAME(PhysicsData_obj::materials,"materials");
	HX_MARK_MEMBER_NAME(PhysicsData_obj::filters,"filters");
	HX_MARK_MEMBER_NAME(PhysicsData_obj::fprops,"fprops");
	HX_MARK_MEMBER_NAME(PhysicsData_obj::types,"types");
};

static void sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PhysicsData_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(PhysicsData_obj::bodies,"bodies");
	HX_VISIT_MEMBER_NAME(PhysicsData_obj::materials,"materials");
	HX_VISIT_MEMBER_NAME(PhysicsData_obj::filters,"filters");
	HX_VISIT_MEMBER_NAME(PhysicsData_obj::fprops,"fprops");
	HX_VISIT_MEMBER_NAME(PhysicsData_obj::types,"types");
};

Class PhysicsData_obj::__mClass;

void PhysicsData_obj::__register()
{
	Static(__mClass) = hx::RegisterClass(HX_CSTRING("PhysicsData"), hx::TCanCast< PhysicsData_obj> ,sStaticFields,sMemberFields,
	&__CreateEmpty, &__Create,
	&super::__SGetClass(), 0, sMarkStatics, sVisitStatics);
}

void PhysicsData_obj::__boot()
{
}

